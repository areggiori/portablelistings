<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="tools/rfc2629xslt/rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "tools/rfc2629xslt/rfc2629.dtd">

<!--

TODO:
    -> add/suggest oderly scheme to describe a profile
    -> refer to JSON style guidelines
    
ISSUES:
    -> the filter dotted notation does not work well to select sub-field type e.g. 'original title' we need 'alternativeTitle.type' eq 'original title' and can not filter by original title directly.
    
-->

<rfc category="info" ipr="trust200902">

  <?rfc toc="yes"?>
  <?rfc tocindent="yes"?>
  <?rfc tocdepth="7" ?>

  <?rfc sortrefs="yes"?>
  <?rfc symrefs="yes"?>
  <?rfc strict="yes"?>
  <?rfc compact="yes"?>
  <?rfc comments="yes"?>
  <?rfc inline="yes"?>

  <?rfc iprnotified="no" ?>
  <?rfc private="Working Draft" ?>

  <front>
    <title abbrev="Portable Listings">Portable Listings</title>

    <author initials="A. A." surname="Reggiori" fullname="Alberto Attilio Reggiori">
      <organization>Derrick Media</organization>
      <address>
        <email>alberto@derrickmedia.com</email>
        <uri>http://www.derrickmedia.com/</uri>
      </address>
    </author>

    <date month="May" year="2013"/>

    <abstract>
      <t>
        This document specifies Portable Listings, a JSON document format
        and API for accessing audiovisual content metadata over HTTP.
      </t>
    </abstract>

  </front>
  <middle>

      <section title="Notational Conventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref target="RFC2119" />.
        </t>
      </section>

    <section title="Definitions">
      <t>
        <list style="hanging">
          <t hangText="Audiovisual Content:">
            Or more simply Content throughout the scope of this document, it refers to the actual intellectual or artistic piece of material such as a Television Programme, Feature Film, Music Video, Advert etc.
          </t>
          <t hangText="Content Metadata:">
            <!--Content metadata is a well-defined concept in the broadcast and television industry -->
            It is structured information that describes, explains, locates, or makes it easier to retrieve, use, or manage a piece of audiovisual content.
            Examples of metadata records include detailed information about a television show episode (title, synopsis, series, brand, creator, contributor, release date, etc.), a film (title, synopsis, genre, year, duration, etc.), an advert on television (title, advert brand, advert product, advert code, product code etc.), a broadcast event on a television schedule (broadcast service name, start/end time, country, language, etc.) and so on. <!-- While the term metadata is genrally used to refer to data about data, in the remaining of this document we will refer any other information about the content metadata as ancillary or system information to avoid further confusing the reader. -->
            More specifically a piece of Content Metadata is being represented with the "Content" object type throughout the scope of this document (see <xref target="content-type" />).
          </t>
          <t hangText="Entry Metadata:">
            Or meta-metadata, it is system information which is used to support the storage and retrieval of actual Content Metadata itself (e.g. <spanx style="verb">updated</spanx>, <spanx style="verb">metadataPublisher</spanx>).
            Throughout this document we will clearly distinguish the "Entry Metadata" and "Content Metadata" and we will provide additional text to clarify the context of a specific piece of metadata, where and if necessary.
          </t>
          <t hangText="Listings:">
            Or listings information, it is a term used in this document as a more colloquial and less technical synonym for the information being stored and search by a Provider.
            More specifically the term listings might refer to a specific list of results (result set) returned by a Service Provider, which includes both the Content Metadata and any Entry Metadata.
            For example, one could talk about television listings information, listings of people contributing to a film, a listings of showing times of a film, a listings of upcoming DVDs releases, a listings of scenes of a film and so on.
          </t>
          <t hangText="Content Language/Length/Type:">
            These terms they are generally used to refer to the language, length in bytes and the type of the metadata Entry, as returned in an HTTP request header.
            Where and if necessary we will clarify when the term language, type or length will refer to the actual piece of Audiovisual Content.
          </t>
          <t hangText="Service Provider:">
            <!-- Publisher / Originator or Authority for a CRID -->
            A Web application that provides listings information via the Portable Listings protocol.
          </t>
          <t hangText="Consumer:">
            <!-- Recipient -->
            A Web site or application that uses the Portable Listings protocol to request listings information managed by the Service Provider.
          </t>
          <t hangText="Base URL:">
            The root endpoint URL specified by the Service Provider during Discovery and used to make requests. Consumers MAY append additional path information and query string parameters to this URL as part of the request.
          </t>
          <t hangText="Entry:">
            An individual item object (or result) part of a result set (listings) returned by a Service Provider. Entries are represented in a result set with the <spanx style="verb">entry</spanx> element. An entry has one or more fields and relationships associated to it.
          </t>
          <t hangText="Singular Field:">
            An Entry field that can appear at most once per Entry, e.g. <spanx style="verb">displayName</spanx> or <spanx style="verb">id</spanx>.
          </t>
          <t hangText="Plural Field:">
            An Entry field that can appear multiple times per Entry, e.g. <spanx style="verb">keywords</spanx> or <spanx style="verb">tags</spanx>.
          </t>
          <t hangText="Simple Field">
            A Singular Field or Plural Field whose value is a single string attribute (see <xref target="structure" />).
          </t>
          <t hangText="Complex Field">
            A Singular Field or Plural Field whose value is an object containing multiple sub-field attributes (see <xref target="structure" />).
            <!--
             A complex field is distinguishged from a sub-Entry due the complex field does not have any of the core properties (sub-fields) an Entry has e.g. <spanx style="verb">id</spanx> or <spanx style="verb">updated</spanx>.
            -->
          </t>          
          <t hangText="Canonical Value:">
            Specified string values for string-valued Entry fields that represent common values in a canonical form. For example <spanx style="verb">alternativeTitle</spanx> field MAY have a <spanx style="verb">type</spanx> of "original", "working" etc.
            Service Providers SHOULD conform to Canonical Values if appropriate, but MAY deviate if they need to represent additional values (see <xref target="reference-data" />).
          </t>
          <t hangText="Primary Sub-Value:">
            The sub-field in a Complex Field that should be used when sorting or filtering by that field. Unless otherwise specified, the <spanx style="verb">value</spanx> sub-field is always the Primary Sub-Field.
          </t>
          <t hangText="Singular Relationship:">
            An Entry relationship which link to another Entry via a well-known named relationship and that can have at most one value, e.g. a programme <spanx style="verb">service</spanx>.
          </t>
          <t hangText="Plural Relationship:">
            An Entry relationship which link to another Entry via a well-known named relationship and that can have multiple values, e.g. a series <spanx style="verb">programmes</spanx>.
          </t>
          <t hangText="Sub-Entry:">
            An Entry which is related to another entry via a well-known relationship.
          </t>
          <t hangText="Source Entry">
            Or Relationship Context, it is the Entry from which a named and directed Relationship is created to a Target Entry.
          </t>
          <t hangText="Target Entry">
            A Target Entry is the Sub-Entry target of a Relationship from a Source Entry. A Target Entry can play one or more Roles with a given Source Entry.
          </t>
          <t hangText="Sub-Entry Role">
            The role played by the Target Entry in a Relationship with a given Source Entry is defined to be the name of the relationship itself.
          </t>
          <t hangText="Profile:">
            A particular format (or schema) for the various Entries per <xref target="RFC6906"/>.
            In the scope of this specification a profile is expressed using an atomic set of data modelling rules as defined in <xref target="structure"/>.
            The <spanx style="verb">core</spanx> profile is integral part of this specification as defined in <xref target="core-profile" />.
          </t>
          <!--
            TODO:
                -> perhaps clarify meta-metadata here and what is for example source, licensing/policy for content metadata; and underline the story of content and metadata distintion - with PoCo was easier! (just metadata)
                -> clarify "what is a user", especially in light of autenthentication to avoid confusion - and if added user as contributor/user-rating etc explain!
          -->
        </list>
      </t>
    </section>

    <section title="Introduction">
      <t>        
        This document specifies Portable Listings, a document format and API to easily provide secure access to audiovisual content metadata and related information over the Web.
        <!-- the basic idea is to have a a core data model (structure) and core vocabulary - and then combine it together with existing information -->
      </t>
      <t>
        The specification defines a general framework, access patterns and portable format for holding and retrieving a variety of audiovisual content metadata using simple entity types, containers,
        attributes and relationships. For example, using Portable Listing a Consumer can request information from a Service Provider about television series and episodes information, music videos, film reviews,
        showing times, casts, crews, video technical details, subtitles, trailers etc.
        Mechanisms are defined to specify alternative languages and refer to related metadata and resources. This document also defines the procedure by which particular audiovisual content metadata formats,
        called profiles, for carrying application-specific information can be defined and referenced, and the conventions such formats must follow. It is expected that other specifications
        will be produced that define such formats for various applications.        
      </t>
      <t>
        This specification also defines and adds the following additional link relation types to the "Link Relations" registry established by <xref target="RFC5988"/>:
        "promotional-information", "review", "highlights", "screenplay", "transcript", "shot", "shot-list", "edit-decision-list", "rundown", "dopesheet",
        "trailer", ""simulcast", "ondemand", "catchup", "recommendation", "insertion-points", "advert", "telescoped-advert", "speedbump", "product-purchase", "recap",
        "making-of", "content-package", "supplemental-information", "best-of" and "extract".
      </t>
    
      <section title="Goals">
        <t>
          The goal of Portable Listings is to make it easier for developers to give their users a secure way to
          access audiovisual content metadata and related information over the web. Specifically, we seek
          to create:
          
          <list style="symbols">
            <t>
              A common access pattern and listings schema that any Service Provider can implement.
            </t>
            <t>
              Well-specified authorization and access rules.
            </t>
            <t>
              Free and open source libraries in many languages for most popular platforms.
            </t>
            <t>
              Community-sourced support, documentation, and collaborative tools.
            </t>
            <t>
              And absolutely minimal complexity, with the lightest possible toolchain requirements for developers.
            </t>
           </list>
        </t>
      </section>
      
      <section title="Approach">
         <t>
          Our design is focused around ease of adoption, which means a few things:
          
          <list style="numbers">
            <t>
              First, our emphasis is on simplicity of design and targeted use cases, keeping our scope intentionally narrow
              at the outset. For example, this document is simply about access, and defers for now on the more complex issues
              around update and sync.
            </t>
            <t>
              Second, we're taking a modern approach to audiovisual content metadata description by unifying traditional and
              more Web oriented data, in order to properly represent the current diversity of television, brodcasting and Web ecosystems.
            </t>
            <t>
              Third, we're leveraging and reusing existing broadcast and television industry standards and semantics wherever possible,
              including the EBUCore Metadata Set <xref target="EBUCORE" />, TV-Anytime <xref target="TV-ANYTIME" />, the BBC Programmes Ontology <xref target="BBC-PROGRAMMES" /> and <xref target="HTML5"/> Video and Media Multitrack <xref target="HTML5-MM"/>.
              This document is heavily grounded on previous work done on the Portable Contacts <xref target="PortableContacts" /> and related specifications.
            </t>
            <t>
              Fourth, we designed the specification to be extensible and pluggable where additional information and functionality can be easily added by Service Providers as needed.
            </t>
            <t>
              And lastly, we're designing something that should be easy for current service providers to adopt. We started
              with a review of all the major existing television, broadcast, Web and Social media standards and APIs and targeted common capabilities that they all share
              and provide. We believe this pragmatic balance is the best and quickest way to achieve our intended goal of
              widespread adoption.
            </t>
          </list>
        </t>
      </section>

      <section title="Feedback">
        <t>
          The Portable Listing specification is currently being developed on the http://groups.google.com/group/portablelistings
          mailing list. Feedback can be posted to the Portable Listings list or directly to the author. If you encounter any problems with joining the list, please contact the author.
          If you refer or discuss any further about Portable Listings on Twitter or Facebook the hash tag <spanx style="verb">#poli</spanx> or <spanx style="verb">#portablelistings</spanx> MAY be used.
        </t>
      </section>
      
    </section>
    
    <!--

        Perhaps add an "Overview" taken from TV-Anyime content, metadata, workflow/s and meta-metadata story (info about metadata records).

    -->
    <section title="Workflow Overview" anchor="workflow-overview">
    <t>
        <!--
        From Poco but considering TV scenarios: traditional (tvdns / dvb), webtv/ connceted tv, html5 ... start EPG or LiveTV, discovery API, query, results, fetch/display, ... re-iterate..
        Plus providers of metadata could be: broadcasters, end-users (activity streams)...
        -->
        A Consumer wishing to access a Provider's metadata via Portable Listings must start with an Initial Identifier for the Service Provider containing the Provider's metadata.
        In many cases, this may be the domain name of the Service Provider's web site, such as sample.site.org, but may be a more specific URL.
        Consumers then perform Discovery on the Initial Identifier to determine where the Portable Contacts endpoint for this Service Provider resides.
        If successful, the Consumer may then attempt to request information from that endpoint.
        If the endpoint contains private metadata, the Service Provider will return an authorization challenge, and the Consumer must then guide the user through an appropriate authorization flow to obtain the credentials necessary to access this private metadata.
        Upon successful authorization, the Consumer may request metadata from the Portable Listings endpoint using these authorization credentials.
        Whether accessing public or private metadata, Consumers may request a specific subset of the Provider's metadata using standard Query Parameters.
        Upon a successful request, the metadata is returned in the response, and the Consumer may then parse the response metadata and use it as desired. The following sections detail each of these steps.
    </t>
    <!--
        <section title="Metadata Freshness" anchor="metadata-freshness">
            <t>
                Content metadata MAY become "stale" when the content changes. A Service Provider MUST make sure that any content metadata returned to a Consumer is kept in sync with the corresponding content, or if it is not possible a Provider MAY decide to define a policy to guarantee the freshness of metadata.
                 Also note that, while it is true that when a Provider changes a content metadata field value also some of the system fields MAY be changed (see <xref target="system-information"/> - e.g. a movie title spelling mistake correction generally triggers a change to the updated field), the viceversa it is not always true (e.g. a metadata record publication date might be changed by a Provider without the content metadata fields being touched).
             </t>
        </section>
    -->
    
    </section>
    
    <!--
    
        To simplify the content<->metadata could be added as new section or part of the "discovery" (see for example TVDNS DVB etc.) - we ultimately want to be able to tie the Web service
        to the asset/essence/location very easily - of course each location/file might be a specific version or instatiation (as whole, a file of version and metadata) or part of it (a speeach of a scene)
        Another use case is for example how to tie the script XML file (typed in with some tool) with the relative Web service ?! Or have XML Web URL location and tie it to Portable Listing service...
        
        HTML5 discovery ? extra track/URL ? - see http://blog.gingertech.net/2010/08/07/websrt-and-html5-media-accessibility/ and objectType="metadata" src="calif_meta.wsrt" srclang="en" etc...
        
        Split between types of sources and types of entitites: tv (linear/VOD), contributors (web-finger, facebook) etc
        
        See XRD stuff Project Baird http://github.com/nexgenta/Baird/wiki/XRD-extensions-for-web-applications
        
    -->
    <section title="Discovery" anchor="discovery">
      <!-- see Salmon for newer stuff -->
      <t>
        Discovery serves both to signal that a Service provider is Portable Listings enabled and provide the Portable Listings API endpoint(s) to which requestes may be sent. 
    
        It relies on link endpoint discovery per <xref target="RFC5988"/> for feeds and HTML pages, and discoverable URIs per LRDD <xref target="HOSTMETA"/>, <xref target="WEBFINGER" />, and <xref target="XRD" />.
      </t>
      <t>
        The API is identified by the Service Type http://portablelistings.net/spec/1.0 and the corresponding URI is the Base URL for the API.
        The Base URL MUST NOT contain any query string, as additional path information and query string variables MAY be appended by Consumers as part of forming the request (as described in detail below).
      </t>
      <t>
        An example XRD document describing the availability and location of a Portable Listings endpoint might look like this:
        <figure>
          <artwork><![CDATA[
<XRDS xmlns="xri://$xrds">
  <XRD xmlns:simple="http://xrds-simple.net/core/1.0"
              xmlns="xri://$XRD*($v*2.0)" version="2.0">
    <Type>xri://$xrds*simple</Type>    <Service>
      <Type>http://portablelistings.net/spec/1.0</Type>
      <URI>http://sample.site.org/path/to/api/</URI>
    </Service>  </XRD>
</XRDS>
          ]]></artwork>
        </figure>
      </t>
      <!--
      <t>
        In addition to discovering the endpoint itself, Service Providers using OAuth to protect responses MUST also support OAuth Discovery, as described in <xref target="auth" />.
      </t>
      -->
    </section>

    <section title="Listings API">
      <t>
        This first version of the specification excludes updates and focus on simple read-only invocation. All requests to the Service Provider are made as HTTP GET operations on a URL deriving from the Base URL specified in <xref target="discovery" />.
      </t>
        <t>
          A request using the Base URL alone MUST return all content metadata Entries.
        </t>
        <t>
          For example, by issuing this request:
        </t>
        <figure>
          <artwork>
GET /api/listings HTTP/1.1
Host: api.example.org
          </artwork>
        </figure>
        <t>
          The following two Entries would be returned:
        </t>
        <figure>
          <artwork>
HTTP/1.1 200 OK
Content-Length: ...
Content-Language: en
Content-Type: application/listings+json

{
  "entry": [ 
    {
      "id": "5E5EEBED3173",
      "objectType": "episode",
      "displayName": "Episode 1",
      "title": "Pilot",
      "alternativeTitle": [
                  {
                    "type": "original",
                    "value": "Northwest Passage"
                  }
              ],
      "summary": "The small northwest town of
                  Twin Peaks, Washington
                  is shaken when the body of
                  Laura Palmer, is discovered...",
      "contributor": [
        {
          "href": "C675EDD23A2D",
          "role": "director",
          "label": "David Lynch",
          "primary": true
        },
        {
          "href": "C675EDD23A2D",
          "role": "writer",
          "label": "David Lynch"
        },
        {
          "href": "2F050A9AF481",
          "role": "writer",
          "label": "Mark Frost"
        }
      ],
      "aliases": [
        {
          "href": "http://en.wikipedia.org/wiki/Pilot_(Twin_Peaks)"
        },
        {
          "href": "http://www.imdb.com/title/tt0278784/"
        }
      ]
    },
    {
      "id": "8881860D6F31",
      "objectType": "episode",
      "displayName": "Episode 2",
      "title": "Traces to Nowhere",
      "summary": "Cooper's investigation into the
                  murder of Laura Palmer continues,
                  as her secret boyfriend James Hurley
                  is interrogated...",
      "contributor": [
        {
          "href": "3C67E1038205",
          "role": "director",
          "label": "Duwayne Dunham",
          "primary": true
        }
      ]
    }          
  ]
}
          </artwork>
        </figure>
        
      <section title="Requesting Specific Information" anchor="request-specific-information">
        <t>
          In addition to simple requests, Service Providers MUST recognize the following additional path information when appended to the Base URL:
          <list style="symbols">
            <t>
              <spanx style="verb">/{id}</spanx> -- Only return content metadata for the Entry whose <spanx style="verb">id</spanx> field value is equal to the provided <spanx style="verb">{id}</spanx>, if such an Entry exists. In this case any Entry not matching the requested ID MUST be filtered out of the result list by the Service Provider.
            </t>
            <t>
              <spanx style="verb">/?id={IRI}</spanx> -- Only return content metadata for the Entries whose <spanx style="verb">aliases</spanx> link is equal to the provided <spanx style="verb">{IRI}</spanx>, if such  Entries exist. In this case any Entry not matching the requested alias MUST be filtered out of the result list by the Service Provider.
              Note that mutliple Entries MAY be matching the id parameter.
            </t>
            <t>
              <spanx style="verb">/{id}/{relationship}</spanx> -- Return content metadata of any sub-entries related to the Entry whose <spanx style="verb">id</spanx> field value is equal to the provided <spanx style="verb">{id}</spanx> (if such an Entry exists) via a <spanx style="verb">named relationship</spanx> as provided in the <spanx style="verb">{relationship}</spanx> value. The provided <spanx style="verb">{relationship}</spanx> MUST be a valid relationship name for the selected Entry type. Also in this case any Entry not matching the requested ID MUST be filtered out of the result list by the Service Provider.
              <!-- A Consumer MAY request to filter results by relationship type (i.e. <spanx style="verb">rel</spanx>) using the <spanx style="verb">filterRelationshipType</spanx> filter paramters, see <xref target="query-params"/>. -->
            </t>
          </list>
        </t>
        
        <!--
            TODO:
                -> perhaps add MAY possibility to be Open Social / PoCo People Service inerop params (see http://opensocial-resources.googlecode.com/svn/spec/1.1/Social-API-Server.xml#People-Service )
        -->
        
        <t>
          For example, assuming the Service Provider has the information as listed in the previous example by issuing this request:
        </t>
        <figure>
          <artwork>
GET /api/listings/5E5EEBED3173 HTTP/1.1
Host: api.example.org
          </artwork>
        </figure>
        <t>
          The following Entry would be returned:
        </t>
        <figure>
          <artwork>
HTTP/1.1 200 OK
Content-Length: ...
Content-Language: en
Content-Type: application/listings+json

{
    "entry": {
      "id": "5E5EEBED3173",
      "objectType": "episode",
      "displayName": "Episode 1",
      "title": "Pilot",
      "alternativeTitle": [
                  {
                  "type": "original",
                  "value": "Northwest Passage"
                  }
              ],
      "summary": "The small northwest town of Twin Peaks,
                  Washington is shaken when the body of
                  Laura Palmer, is discovered...",
      "contributor": [
        {
          "href": "C675EDD23A2D",
          "role": "director",
          "label": "David Lynch",
          "primary": true
        },
        {
          "href": "C675EDD23A2D",
          "role": "writer",
          "label": "David Lynch"
        },
        {
          "href": "2F050A9AF481",
          "role": "writer",
          "label": "Mark Frost"
        }
      ],
      "aliases": [
        {
          "href": "http://en.wikipedia.org/wiki/Pilot_(Twin_Peaks)"
        },
        {
          "href": "http://www.imdb.com/title/tt0278784/"
        }
      ]
    }
}
          </artwork>
        </figure>
        <t>
            The same Entry would be returned using the following query:
        </t>
        <figure>
            <artwork>
GET /api/listings/?id=http://www.imdb.com/title/tt0278784/ HTTP/1.1
Host: api.example.org
            </artwork>
        </figure>
        <t>
            While instead by issuing this request:
        </t>
        <figure>
          <artwork>
GET /api/listings/5E5EEBED3173/contributor HTTP/1.1
Host: api.example.org
          </artwork>
        </figure>
        <t>
          The following Entries would be returned:
        </t>
        <figure>
          <artwork>
HTTP/1.1 200 OK
Content-Length: ...
Content-Language: en
Content-Type: application/listings+json

{
    "entry": [
      {
        "id": "C675EDD23A2D",
        "objectType": "person",
        "displayName": "David Lynch",
        "name": {
          "middleName": "Keith"
        },
        "birthday": "1946-01-20"
      },
      {
        "id": "2F050A9AF481",
        "objectType": "person",
        "displayName": "Mark Frost"
      }
    ]
}
          </artwork>
        </figure>
  
    <!--
    TODO - add sensible example of relationships expansion
    -->
                  <!--
             IMPORTANT!!! add story about expanding relationship expansion:
                -> by default relationships are *NOT* expanded and relationship attributes just contain detault two + eventually type
                -> if expand=true only one level is expanded (not arbitrary to avoid recursion?!)
                    -> explain that expand is dangerous though and my impact performances
                    -> expand only work on internal relationships!
                    -> expand mgith retunr all Complex Sub-field, but see old PoCO text though...
                    -> simple use-case expand an EPG/Schedule - list of programmes and their information
                -> think/deal with corner case of expansion of a Series and nextEpisode/previousEpisode relationships on Episodes which might recourse and second duplicate hell information!!
                    -> perhaps propose to exapnd only the same/repeated entity once (the first in tree/graph expansion order)
                    
                -->          

      </section>

      <section title="Query Parameters" anchor="query-params">
        <t>
          Portable Listings defines a standard set of operations that can be used to filter, sort, and paginate response results. The operations are specified by adding query parameter to the Base URL, either in the query string or as HTTP POST data. Providers MAY support additional query parameters not specified here, and Providers SHOULD ignore any query parameters they don't recognize.
        </t>
        <!-- TODO - Add about how how a specific profile (e.g. core) will constraint Filtering and Ordering parameter valid values to a finite set for simplicity, however API is generic and a Provider MAY decide
                   to support additional values
         
                   basically we need to define in a profile per object type what it is:
                        searchable = filterBy
                        browseable = filterLinksBy/filterRelationshipBy
                        displayable = fields, links and relationships -->
        <!-- TODO - Add note about allowing multiple URL query parameters on filterLinksBy and filterRelationshipsBy for ANDs and use comma-separated values for ORs - or come up with alternative syntax for subgraph -->

        <section title="Filtering" anchor="filtering">
          <t>
            Filtering is used to limit the request results to Entries that match given criteria. Results filtering is accomplished by combining the following request parameters:

            <list style="hanging">
              <t hangText="filterBy:">
                Specifies the field name to filter by.
                If the specified field is a Plural Field, the Entry SHALL match if any of the instances of the given field match the specified criterion (e.g. if an Entry has multiple <spanx style="verb">alternativeTitle</spanx> values, only one has to match for the entire Entry to match).
                If a Simple Field is specified, its value must match the specified <spanx style="verb">filterValue</spanx> according to the specified <spanx style="verb">filterOp</spanx>.
                If a Complex Field is specified, its Primary Sub-Field must match.
                If the specified field is not a direct child of the <spanx style="verb">entry</spanx> element, the full path MUST be specified using the '.' character as separator (i.e. <spanx style="verb">field.subfield</spanx>).
                For example, to filter by gender the parameter value is <spanx style="verb">gender</spanx> and to filter by first name, the parameter value is <spanx style="verb">name.givenName</spanx>.
                <!--The parameter SHALL be used only to filter Entry top level fields.-->
                Links SHALL be filtered using the <spanx style="verb">filterLinksBy</spanx> filter while relationships SHALL be filtered using the <spanx style="verb">filterRelationshipsBy</spanx> filter.
              </t>
              <t hangText="filterOp:">
                Specifies the comparison method used to evaluate the field value with the value of the filter criterion. Providers SHOULD support the following values:
                <list style="symbols">
                  <t>
                    <spanx style="verb">equals</spanx>: the two values must be identical strings.
                  </t>
                  <t>
                    <spanx style="verb">contains</spanx>: the entire <spanx style="verb">filterValue</spanx>
                    must be a substring of the Entry field value.
                  </t>
                  <t>
                    <spanx style="verb">startswith</spanx>: the entire <spanx style="verb">filterValue</spanx>
                    must be a substring of the Entry field value, starting at the beginning of the field value. This criterion is satisfied if the two strings are equal.
                  </t>
                  <t>
                    <spanx style="verb">present</spanx>: an Entry matches the criterion if the field specified by <spanx style="verb">filterBy</spanx> has a non-empty value, or if it contains a non-empty node for complex fields.
                  </t>
                </list>
                Providers MAY support additional filter operations if they choose. Providers MUST decline to filter results if the specified filter operation is not recognized (as per <xref target="declining" />).
                
                <!--
                    Must have:
                    
                    - range search dates - start at, edns at, duration at least

                    Two MAY have:
                    
                    - date/time like date grabber for dates but allowing 2 dates E.g. date-range start at 9:25pm till duration etc...
                    - geo-json for location search

                -->
                <!-- inspired to Facebook Graph API http://developers.facebook.com/docs/api
                   'ids' could be used to reverse look up entry IDs and fetch multiple objects, does return "matched-id": { ... }, "matched-id": { ... } - sortby does not apply here as well as fields filter
                    the big problem that this also would impact the output JSON/format
                    -->
              </t>
              <!-- TODO : Add filterType to filter complex field "type" e.g. "directorCommentary" when filterBy=alternativeLanguage -->
              <t hangText="filterValue:">
                Specifies the value to filter by, using the comparison method defined by <spanx style="verb">filterOp</spanx>.
              </t>
              <t hangText="filterObjectType:">
                Specifies a comma-separated list of object types as expressed in the Entry <spanx style="verb">objectType</spanx> field.
                A Service provider SHALL filter out any Entries not matching any of the requested object types.
                If the <spanx style="verb">entry</spanx> object type value is specified, all metadata Entries MUST be returned.
                This is also equivalent to providing no additional path info or query parameters on the Base URL.
              </t>
              <!-- start/end, only start no end, end no start, arbitrary start and end field -->
              <!-- Allow filterMatchingCount for example starting after this time, next n-matching items -->
              <t hangText="filterDateBy:">
                Specifies the field name to filter by date.
                If <spanx style="verb">filterDateOp</spanx> is <spanx style="verb">range</spanx> and the upper date boundary field name is different from the lower boundary field name, a second field name SHALL be specified separated by comma (e.g. start,end).
                If the specified fields are Plural, Entries SHALL match if any of the instances of the given field match the specified criterion (e.g. if an Entry has multiple <spanx style="verb">alternativeDate</spanx> values, only one has to match for the entire Entry to match).
                If Simple Fields are specified, their value must match the specified <spanx style="verb">filterDateValue</spanx> according to the specified <spanx style="verb">filterDateOp</spanx>.
                If Complex Fields are specified, their Primary Sub-Field must match.
                The <spanx style="verb">updated</spanx> field SHALL be filtered using the <spanx style="verb">updatedSince</spanx> and <spanx style="verb">updatedUntil</spanx> filters.
              </t>
              <t hangText="filterDateOp:">
                Specifies the comparison method used to evaluate the date field values with the values of the date filter criterion. Providers SHOULD support the following values:
                <list style="symbols">
                  <t>
                    <spanx style="verb">onThisDate</spanx>: the date field value MUST be identical with the date filter criterion value.
                  </t>
                  <t>
                    <spanx style="verb">before</spanx>: the date field value MUST be less than the date filter criterion value.
                  </t>
                  <t>
                    <spanx style="verb">after</spanx>: the date field value MUST be greater than the date filter criterion value.
                  </t>
                  <t>
                    <spanx style="verb">range</spanx>: the lower boundary date field value MUST BE greater than or equal to lower boundary date filter criterion value, and the upper boundary date field value MUST BE less than or equal to the upper boundary date filter criterion value.
                  </t>
                </list>
                Providers MAY support additional date filter operations if they choose. Providers MUST decline to filter results if the specified filter operation is not recognized (as per <xref target="declining" />).
              </t>

              <t hangText="filterDateValue:">
                Specifies the value to filter by date, using the comparison method defined by <spanx style="verb">filterDateOp</spanx>.
                The value MAY be expressed as TIME, TIMESTAMP, YEAR or PERIOD as specified in <xref target="fields"/>.
                If <spanx style="verb">filterDateOp</spanx> is <spanx style="verb">range</spanx> a second value SHALL be specified separated by comma (e.g. 2011-05-20,2011-05-21).
              </t>

              <t hangText="filterLinksBy:">
                Specifies a link name to filter Entries by (e.g. 'thumbnails').
                A Service Provider SHALL match only Entries which have the given link name.
                The <spanx style="verb">aliases</spanx> links SHALL be filtered using the <spanx style="verb">id</spanx> selector (see <xref target="request-specific-information"/>).
              </t>
              <t hangText="filterLinksType:">
                Specifies a link type to filter Entries by (e.g. 'review').
                A Service Provider SHALL match only Entries which have a link type as specified in the <spanx style="verb">rel</spanx> sub-field matching the specified link type.
              </t>
              <t hangText="filterLinksValue:">
                Specifies a link target IRI to filter Entries by.
                A Service Provider SHALL match only Entries which have a link target as specified in the <spanx style="verb">href</spanx> sub-field matching the specified link target IRI.
              </t>

              <t hangText="filterPublisher:">
                Specifies the id of the metadata publisher as expressed in the <spanx style="verb">metadataPublisher</spanx> relationship.
                A Service Provider SHALL filter out any Entries not matching any of the requested metadata provider.
                If the <spanx style="verb">@all</spanx> value is specified, all metadata Entries MUST be returned irrespectively of the metadata publisher.
                This is also equivalent to providing no additional path info or query parameters on the Base URL.
              </t>

              <t hangText="filterRelationshipsBy:">
                Specifies a relationship name to filter Entries by (e.g. 'service').
                A Service Provider SHALL match only Entries which have the provided relationship name.
                The <spanx style="verb">metadataPublisher</spanx> relationship SHALL be filtered using the <spanx style="verb">filterPublisher</spanx> filter.
              </t>
              <t hangText="filterRelationshipsType:">
                Specifies a relationship type to filter Entries by (e.g. 'related').
                A Service Provider SHALL match only Entries which have a relationship type as specified in the <spanx style="verb">rel</spanx> sub-field matching the specified relationship type.
              </t>
              <t hangText="filterRelationshipsValue:">
                Specifies a relationship target identifier to filter Entries by.
                A Service Provider SHALL match only Entries which have a relationship target as specified in the <spanx style="verb">href</spanx> sub-field matching the specified relationship target identifier.
              </t>
              <!-- 
              <t hangText="filterRelationshipType:">
                Specifies the relationship type value to filter by. If relationships have been requested <spanx style="verb">by-reference</spanx>, its value must match the LINK structure <spanx style="verb">rel</spanx> sub-field value, and the two values must be identical strings.
                If relationships have been requested <spanx style="verb">by-value</spanx>, its value must match the RELATIONSHIP structure <spanx style="verb">rel</spanx> sub-field value, and the two values must be identical strings.
                Any relationship types not matching the requested <spanx style="verb">rel</spanx> MUST be filtered out of the result list by the Service Provider. If the provided <spanx style="verb">{rel}</spanx> is equal to the <spanx style="verb">@all</spanx> value, all relationship types MUST be returned.
              </t>
              -->
              <!--
                -> added something about "revision/record-version" retrieve for {id} identified resources if supported revision.
              -->
            </list>
          </t>
          <!--
            Perhaps add filter by metadata 'source', 'creator'
            -->
          <t>
            In addition, requests can filter results based on their "update" timestamp:

            <list style="hanging">
            <!-- deprecate/replace this with simpler sequence=<number> -->
              <t hangText="updatedSince:">
              <!-- MAKE clear that updatedSince is about Entry metadata and not the content - so to know if a piece of content has been actually updated normally the Consumer need to use the filterBy=modified (or similar) request/filter - it is very important -->
                Returns only Entries that have been modified on or after the given time, specified as an TIMESTAMP (see <xref target="RFC3339"/>).
                The filter is based on the value of the <spanx style="verb">updated</spanx> field, and can be used independently of other filters or combined.
                It enables a basic syndication pattern when accessing the same metadata over time. The first API call returns all metadata, which can be stored locally.
                Subsequent API calls can specify <spanx style="verb">updatedSince</spanx> with the time of the last API call, so that only Entries that have been added or modified since the last API call will be returned.
              </t>
              <t hangText="updatedUntil:">
                Returns only Entries that have been modified on or before the given time, specified as an TIMESTAMP (see <xref target="RFC3339"/>).
                Like for <spanx style="verb">updatedSince</spanx> the filter is based on the value of the <spanx style="verb">updated</spanx> field, and can be used independently of other filters or combined.
              </t>
              <!-- add filter by SOURCE or named graph -->
            </list>
          </t>
          <t>
            For example, given the content metadata of the sample request above and the parameters <spanx style="verb">filterBy=title&amp;filterOp=startswith&amp;filterValue=Trac</spanx>, only the second Entry (with id=8881860D6F31) would match and be returned.
            However, with parameters <spanx style="verb">filterBy=title&amp;filterOp=present</spanx>, both Entries would be returned.
            Given the parameters <spanx style="verb">filterBy=title&amp;filterOp=contains&amp;filterValue=lot</spanx>, only the first Entry (with id=5E5EEBED3173) would match, as would it be the only Entry to match given the parameters <spanx style="verb">filterBy=alternativeTitle&amp;filterOp=present</spanx>.
          </t>
          
          <t>
            If a request specifies a <spanx style="verb">filterValue</spanx> but no <spanx style="verb">filterBy</spanx> or <spanx style="verb">filterOp</spanx>, it is up to the Service Provider how to interpret this filter request.
            Service Providers MAY choose to default to filtering by a given field (e.g. <spanx style="verb">displayName</spanx>); they MAY choose to implement a custom, Provider-specific query syntax for <spanx style="verb">filterValue</spanx> in this case; or they MAY choose to reject requests of this type.
          </t>

          <t>
            In general, if Consumers want to request specific behavior from Service Providers, they should do so by being explicit in their use of query parameters.
          </t>
          
        </section>

        <section title="Sorting">
          <t>
            Sorting allows requests to specify the order in which Entries are returned.

            <list style="hanging">
              <t hangText="sortBy">
                Specifies the field name whose value SHALL be used to order the returned Entries. The sort order is determine by the <spanx style="verb">sortOrder</spanx> parameter. If <spanx style="verb">sortBy</spanx> is a Singular Field, Entries are sorted according to that field's value; if it's a Plural Field, Entries are sorted by the Value (or Major Value, if it's a Complex Field, see <xref target="structure" />) of the field marked with "primary": "true", if any, or else the first value in the list, if any, or else they are sorted last if the given Entry has no metadata for the given field.
              </t>
              <t hangText="sortOrder">
                The order in which the <spanx style="verb">sortBy</spanx> parameter is applied. Allowed values are <spanx style="verb">ascending</spanx> and <spanx style="verb">descending</spanx>. If a value for <spanx style="verb">sortBy</spanx> is provided and no <spanx style="verb">sortOrder</spanx> is specifies, the <spanx style="verb">sortOrder</spanx> SHALL default to <spanx style="verb">ascending</spanx>. Sort order is expected to be case-insensitive Unicode alphabetic sort order, with no specific locale implied.
              </t>
            </list>
          </t>
        </section>

        <!--
            -> UC: cross-check possible use-case that pagination works for sub-entries like a large number of Contributors on a programme, inspie of just a large number of programmes...
        -->
        <section title="Pagination">
          <t>
            The pagination parameters can be used together to "page through" a large number of results in manageable chunks:

            <list style="hanging">
              <t hangText="startIndex:">
                Specifies the offset of the first result to be returned with respect to the list of Entries that would be returned if no <spanx style="verb">startIndex</spanx> were provided. For instance, if in a given request 10 Entries would normally be provided, if <spanx style="verb">startIndex</spanx>
                is 7 and no <spanx style="verb">count</spanx> is specified, then only the last 3 Entries in that list would be returned (Entries are zero-indexed). If <spanx style="verb">startIndex</spanx> is greater than or equal to the total number of results that would be returned, no Entries are returned. Value MUST be a non-negative integer and defaults to 0 if no value is specified.
              </t>
              <t hangText="count:">
                If non-zero, specifies the maximum number of Entries the Consumer would like the Provider to return at a time. Value MUST be a non-negative integer and defaults to 0 if no value is specified. A <spanx style="verb">count</spanx> of 0 means that is up to the Provider to determine how many Entries to return by default (some Providers may return all Entries by default; others may return a fixed default number like 10). Providers SHOULD honor a very large <spanx style="verb">count</spanx> value, and SHOULD support returning all Entries at once when presented with a <spanx style="verb">count</spanx> request that is larger than the number of Entries the user has, but Providers MAY choose to never return more than a Provider-determined maximum number of Entries per request, if returning all Entries is too burdensome. In all cases, at most <spanx style="verb">count</spanx>
                Entries SHALL be returned, starting at <spanx style="verb">startIndex</spanx> and counting up from there. In each of these cases, Providers MUST indicate the total number of Entries they chose to return in the response using the <spanx style="verb">itemsPerPage</spanx> response element (see <xref target="response-format" />).
              </t>
            </list>

            For instance, on an initial query, specifying <spanx style="verb">startIndex=0&amp;count=10</spanx>
            will return only the first 10 results. The total number of possible results is indicated by the <spanx style="verb">totalResults</spanx> field of results, so the client knows how many "pages" of results exist. A subsequent query of <spanx style="verb">startIndex=10&amp;count=10</spanx> will return the next 10 results, and so on.
          </t>
          
          <!--
            TODO - consider pagination of relationships with very large number of siblings - FB graph api seems using nested cursors...
          -->
        </section>

        <!-- TODO
                -> add about "node selectors" ?
                        -> select field name, value - json value or null
                        -> select sub-tree - json object or array
        -->
        <section title="Presentation" anchor="presentation">
          <t>
            Presentation controls the format, makeup, and delivery mechanism for returning the requested result set:

            <list style="hanging">
              <t hangText="fields:">
                If non-empty, each Entry returned SHALL contain only the fields explicitly requested.
                A Service Provider MAY return a subset of the requested fields if they are not supported.
                A Provider SHOULD return at least the <spanx style="verb">id</spanx> and <spanx style="verb">displayName</spanx> fields for an Entry.
                This parameter is used for efficiency when a Consumer wishes to access only a subset of the fields.                  
                Value is a comma separated list of top level field names (e.g. id,title), and it defaults to an empty list which means it's up to the Provider which fields to return.
                Consumers MAY request all available fields by using the special value <spanx style="verb">@all_fields</spanx> (i.e. any field).
                <!--Providers MAY support additional fields parameter formats if they choose.-->
                Providers MUST decline to present results if the specified fields parameter format is not recognized (as per <xref target="declining" />).
              </t>
              <t hangText="links:">
                If non-empty, each Entry returned SHALL contain only the links explicitly requested.
                A Service Provider MAY return a subset of the requested links if they are not supported.
                This parameter is used for efficiency when a Consumer wishes to access only a subset of the links.
                Value is a comma separated list of link names (e.g. links), and it defaults to an empty list which means it's up to the Provider which links to return.
                Consumers MAY request all available links to be returned by using the special value <spanx style="verb">@all_links</spanx> (i.e. any link).
                Providers MUST return the requested links information using a LINK structure as explained in <xref target="link-structure" />.
                Providers MUST decline to present results if the specified links parameter format is not recognized (as per <xref target="declining" />).
              </t>
              <t hangText="relationships:">
                If non-empty, each Entry returned SHALL contain only the relationship names explicitly requested.
                A Service Provider MAY return a subset of the requested relationships if they are not supported.
                A Provider SHOULD return at least the <spanx style="verb">href</spanx> and <spanx style="verb">entry</spanx> fields for relationships included <spanx style="verb">by-reference</spanx> and <spanx style="verb">by-value</spanx> respectively (see <xref target="relationships"/>).
                This parameter is used for efficiency when a Consumer wishes to access only a subset of the relationships.
                Value is a comma separated list of top level relationship names (e.g. contributor,creator,crossPromotions), and it defaults to an empty list which means it's up to the Provider which relationships to return.
                Consumers MAY request all available relationships by using the special value <spanx style="verb">@all_relationships</spanx> (i.e. any relationship).
                Providers MUST return the requested relationships information using a Complex Field structure as explained in <xref target="relationships" />.
                Additionall a Provider MAY use the <spanx style="verb">includeRelationships</spanx> parameter (see below).
                <!--Providers MAY support additional fields parameter formats if they choose.-->
                Providers MUST decline to present results if the specified fields parameter format is not recognized (as per <xref target="declining" />).
              </t>
              <t hangText="format:">
                <!--
                     -> Check/add how sub-entries and relationships are expanded; especially 1-to-1 and 1-to-N
                -->
                Specifies the format in which the response content metadata is returned.
                Service Providers MUST support the values <spanx style="verb">json</spanx> for JSON (http://json.org) and MAY support additional formats if desired.
                The format defaults to <spanx style="verb">json</spanx> if no format is specified. Singular Fields are encoded as string key/value pairs in JSON, e.g. <spanx style="verb">"field": "value"</spanx>.
                Plural Fields and Plural Bundles are encoded as arrays in JSON, e.g. <spanx style="verb">"fields": [ "value1", "value2" ]</spanx>.
                Nodes with multiple sub-nodes are represented as objects in JSON, e.g. <spanx style="verb">"field": { "subfield1": "value1", "subfield2": "value2" }</spanx>.
              </t>
              <t hangText="includeRelationships:">
                This is an optional parameter and it MUST be used in combination with the <spanx style="verb">relationships</spanx> parameter.
                If non-empty, it MUST specifies a valid boolean value of 'true' or 'false'.
                If the value is 'true' a Provider SHOULD include relationships information using an inline <spanx style="verb">entry</spanx> structure as explained in <xref target="relationships" /> and <xref target="response-format"/>.
                A Provider SHOULD expand only the immediate Sub-Entries, one level only.
                Providers MAY support the expansion of an arbitrary number of levels of Sub-Entries.
                A Provider SHOULD NOT expand the same Sub-Entry multiple times in the scope of the same Entry (e.g. a Programme Entry which is connected to a Contact Entry multiple times via the contributor relationship as 'director' or 'writer').
                For efficiency a Provider MAY NOT expand the same Sub-Entry multiple times in the scope of the same request.
                A Consumer SHOULD BE able to process at least one level of inclusion of Sub-Entries, and MAY ignore any sub-levels of inclusion if not supported or understood.
                A Provider SHOULD NOT filter an inline <spanx style="verb">entry</spanx> structure using the <spanx style="verb">fields</spanx> parameter as it complicates the processing of the request.
              </t>
              <t hangText="listFields:">
                This is an optional parameter.
                If non-empty, it MUST specifies a valid boolean value of 'true' or 'false'.
                If the value is 'true' a Provider SHOULD list the existing simple and complex field names (<xref target="fields"/>) in the <spanx style="verb">metadataFields</spanx> Entry structured field as Entry Metadata. Otherwise no extra field SHALL be included.
                When used in combination with the <spanx style="verb">fields</spanx> parameter only field names not listed in the fields parameter SHALL be returned.
              </t>
              <t hangText="listLinks:">
                This is an optional parameter.
                If non-empty, it MUST specifies a valid boolean value of 'true' or 'false'.
                If the value is 'true' a Provider SHOULD list the existing Web link field names (<xref target="link-structure"/>) in the <spanx style="verb">metadataLinks</spanx> Entry structured field as Entry Metadata. Otherwise no extra field SHALL be included.
                When used in combination with the <spanx style="verb">fields</spanx> parameter only Web link field names not listed in the fields paramters SHALL be returned.
              </t>
              <t hangText="listRelationships:">
                This is an optional parameter.
                If non-empty, it MUST specifies a valid boolean value of 'true' or 'false'.
                If the value is 'true' a Provider SHOULD list the existing relationship field names (<xref target="relationships"/>) in the <spanx style="verb">metadataRelationships</spanx> Entry structured field as Entry Metadata. Otherwise no extra field SHALL be included.
                When used in combination with the <spanx style="verb">fields</spanx> parameter only relationship field names not listed in the fields paramters SHALL be returned.
              </t>
            </list>
          </t>
          
          <t>
          For example, assuming the Service Provider has the information as listed in the previous example by issuing this request:
        </t>
        <figure>
          <artwork>
GET /api/listings/5E5EEBED3173?fields=title,alternativeTitle&amp;
                relationships=contributor&amp;
                includeRelationships=true HTTP/1.1
Host: api.example.org
          </artwork>
        </figure>
        <t>
          The following Entry would be returned:
        </t>
        <figure>
          <artwork>
HTTP/1.1 200 OK
Content-Length: ...
Content-Language: en
Content-Type: application/listings+json

{
    "entry": {
      "id": "5E5EEBED3173",
      "objectType": "episode",
      "displayName": "Episode 1",
      "title": "Pilot",
      "alternativeTitle": [
            {
            "type": "original",
            "value": "Northwest Passage"
            }
        ],
      "contributor": [
        {
          "entry": {
            "id": "C675EDD23A2D",
            "objectType": "person",
            "displayName": "David Lynch",
            "name": {
              "middleName": "Keith"
            },
            "birthday": "1946-01-20"
          },
          "role": "director"
        },
        {
          "entry": {
            "id": "2F050A9AF481",
            "objectType": "person",
            "displayName": "David Lynch"
          }
          "role": "writer"
        },
        {
          "entry": {
            "id": "2F050A9AF481",
            "objectType": "person",
            "displayName": "Mark Frost"
          }
          "role": "writer"
        }
      ]
    }
}
          </artwork>
        </figure>
          <t>
            While instead by issuing this request:
          </t>
            <figure>
                <artwork>
GET /api/listings/5E5EEBED3173?fields=title,alternativeTitle&amp;
                relationships=contributor&amp;listRelationships=true
                &amp;listFields=true&amp;listLinks=true HTTP/1.1
Host: api.example.org
                </artwork>
            </figure>
            <t>
                The following Entry would be returned:
            </t>
            <figure>
                <artwork>
HTTP/1.1 200 OK
Content-Length: ...
Content-Language: en
Content-Type: application/listings+json
                    
{
    "entry": {
      "id": "5E5EEBED3173",
      "objectType": "episode",
      "displayName": "Episode 1",
      "title": "Pilot",
      "alternativeTitle": [
            {
            "type": "original",
            "value": "Northwest Passage"
            }
        ],
      "contributor": [
        {
          "href": "C675EDD23A2D",
          "role": "director",
          "label": "David Lynch",
          "primary": true
        },
        {
          "href": "C675EDD23A2D",
          "role": "writer",
          "label": "David Lynch"
        },
        {
          "href": "2F050A9AF481",
          "role": "writer",
          "label": "Mark Frost"
        }
      ],
      "metadataFields": [
        "summary",
        "position"
      ],
      "metadataLinks": [
        "links",
        "thumbnails"
      ],
      "metadataRelationships": [
        "parent",
        "peers","
        "service",
        "versions"
      ]
    }
}
                </artwork>
            </figure>
        </section>
        
    
        <!--
            Possible sections add ons:
                    -> Revesion control, audit trail ( rev, who )
                    -> Content to metadat and viceversa ? -> this would require a whole new restructing of content, metadata and meta-metadata....necessary ?
        -->
        
        <section title="Declining to honor query parameters" anchor="declining">
          <t>
            Providers SHOULD honor all filtering, sorting and pagination values requests specified via Query Parameters. However, in some instances it may be too burdensome to comply with a particular request, e.g. because the Provider does not have an efficient database index set up for a given field that is requested for filtering or sorting, and is unable to efficiently fetch all metadata and post-process the results to honor the request before returning the response. In such cases, Providers MAY decline to honor the request (or specific pieces of the request). If any part of the request is declined, Providers MUST specify which part(s) of the request were declined in the response, using <spanx style="verb">"sorted": false</spanx>, <spanx style="verb">"filtered": false</spanx>, <spanx style="verb">"updatedSince": false</spanx> and/or <spanx style="verb">"updatedUntil": false</spanx> as appropriate. For efficiency, Providers SHOULD omit these response fields if that part of the request was successfully performed, or if no such Query Parameter was specified in the request.
          </t>
          <t>
            Note that since all of the filtering, sorting and pagination operations are designed to reduce the amount of metadata returned, it is possible for Consumers to emulate these operations client-side when a Provider declines to perform them server-side. For instance, filtering can be accomplished by iterating through each entry returned and deleting those that do not match the filtering criteria. Thus Consumers can request these operations to be performed server-side, and Providers will honor them if possible, and otherwise indicate to Consumers that they need to be performed client-side, effectively "splitting the workload" while maintaining consistent semantics.
          </t>
        </section>

      </section>

      <section title="Response Format" anchor="response-format">
        <t>
          The structure of the response object returned from a successful request is as follows.
        </t>
        <t>
          The root element is an anonymous JSON object. The root node MUST contain the following child nodes, and MAY contain additional nodes that the Service Provider wishes to add to expose additional information. Note that <spanx style="verb">startIndex</spanx>, <spanx style="verb">itemsPerPage</spanx>, and <spanx style="verb">totalResults</spanx> are based on <xref target="OpenSearch" />. See the Appendix for a full example.
          <list style="symbols">
            <t>
              <spanx style="verb">startIndex</spanx>: the index of the first result returned in this response, relative to the starting index of all results that would be returned if no <spanx style="verb">startIndex</spanx> had been requested. In general, this will be equal to the value requested by the <spanx style="verb">startIndex</spanx>, or 0 if no specific <spanx style="verb">startIndex</spanx> was requested.
            </t>
            <t>
              <spanx style="verb">itemsPerPage</spanx>: the number of results returned per page in this response. In general, this will be equal to the <spanx style="verb">count</spanx> Query Parameter, but MAY be less if the Service Provider is unwilling to return as many results per page as requested, or if there are less than the requested number of results left to return when starting at the current <spanx style="verb">startIndex</spanx>. This field MUST be present if and only if a value for <spanx style="verb">count</spanx> is specified in the request.
            </t>
            <t>
              <spanx style="verb">totalResults</spanx>: the total number of Entries that would be returned if there were no <spanx style="verb">startIndex</spanx> or <spanx style="verb">count</spanx> specified. This value tells the Consumer how many total results to expect, regardless of the current pagination being used, but taking into account the current filtering options in the request.
            </t>
            <t>
              <spanx style="verb">entry</spanx>: an array of Entry objects, one for each Entry matching the request, as defined in <xref target="core-profile" />.
              For consistency of parsing, if the request could possibly return multiple Entries (as is normally the case), this value MUST always be an array of results, even if there happens to be 0 or 1 matching results.
              If the request is specifically for a single Entry (e.g. because the request contains Additional Path Information like <spanx style="verb">/id</spanx>), then <spanx style="verb">entry</spanx> MUST be an object containing the single Entry returned (i.e. <spanx style="verb">"entry": [ { /* first Entry */ }, ... ]</spanx> and <spanx style="verb">"entry": { /* only Entry */ }</spanx> respectively).
              When Sub-Entries are requested <spanx style="verb">by-value</spanx> to be included inline (see <xref target="relationships"/>), then the same <spanx style="verb">entry</spanx> construct MUST be used to express any Sub-Entries as value of the RELATIONSHIP Complex Field its sub-field <spanx style="verb">entry</spanx> (i.e. <spanx style="verb">"entry": [ { /* Entry fields */ ... , "pluralRelationship_name": [ { "entry": { /* first Sub-Entry */ }, "rel": "first" }, ... ] } ]</spanx> for Plural Relationships, and <spanx style="verb">"entry": [ { /* Entry fields */ ... , "singularRelationship_name": { "entry": { /* only Sub-Entry */ }, "rel": "next" } } ]</spanx> for Singular Relationships respectively).
            </t>            
          </list>
        </t>
      </section>

      <section title="Error Codes" anchor="error-codes">
        <t>
          The Service Provider MUST return a response code with every response. Response codes are numeric and conform to existing HTTP response codes where possible, as defined below. In addition to the response code, Service Providers SHOULD also provide a human-readable reason that explains the reason for the response code. This message SHOULD be intelligible to developers, but MAY be unsuitable for display to end-users. Clients SHOULD provide their own appropriate error message to users when encountering an error response.
        </t>
        <t>
          Service Providers SHOULD conform to the following response codes to indicate the following situations. Service Providers MAY return additional codes to indicate additional information, but are discouraged from doing so and should instead augment the reason text with existing codes, if possible.
        </t>
        <t>
          <list style="hanging">
            <t hangText="200:">
              OK (response returned successfully)
            </t>
            <t hangText="400:">
              Bad Request (request was malformed or illegal and cannot be completed)
            </t>
            <t hangText="401:">
              Unauthorized (authentication headers / parameters were invalid or missing)
            </t>
            <t hangText="404:">
              Not Found (the request points to an object that does not exist, e.g. to an unknown Entry id; note that Service Providers MUST return a 200 with an empty array of Entries if the request has filtering parameters that are valid but have no matches)
            </t>
            <t hangText="500:">
              Internal Server Error (un unexpected error occurred during processing)
            </t>
            <t hangText="503:">
              Service Unavailable (service is temporarily unavailable; this may be because the Consumer has exceeded their rate-limit of requests)
            </t>
          </list>
        </t>
      </section>

        <!--
            TODO:
                -> Add sory about "user's metadata", "account metadata" and also when we talk about returned metadata with authorization (even for anon user/public) we need to define "this users's entire set of Listings" - especially in light of identifiers uniqueness, creator etc....
            
        -->
      <section title="Authentication and Authorization" anchor="auth">
        <t>
          The content metadata returned by a Portable Listings endpoint MAY contain public metadata, or it MAY contain private metadata.
          If the metadata returned is public, no authentication or authorization is required.
          Often however, the metadata returned is not public, and Service Providers SHOULD ensure that the user or the metadata provider (or user) has given prior consent, either explicitly or implicitly, for their information to be released by this API.
          Typically this is done by Consumers obtaining either Direct Authorization (with raw credentials, for example the user's username and password) or Delegated Authorization (with an access token obtained out-of-band by the user, and given to the Consumer to present as part of the request).
          Portable Listings specifies standard mechanisms for both types of authorization, so that Consumers may be able to obtain private metadata on a metadata provider's or user's behalf from Service Providers in an automated and consistent fashion.
          Regardless of the Authorization method used, the context of the request (i.e. the metadata service or user for whom metadata is being requested) MUST be inferred by Service Providers from the Base URL and the authorization credentials provided.
          If public data is being accessed (and no authorization is provided), the Base URL MUST contain enough information for Service Providers to know which metadata to return, but if private metadata is being accessed (and authorization is provided), the same Base URL MAY return information for different metadata services or users depending on the authorization credentials provided.           
          <!--For the remaining of this document we will refer to "user's metadata set" as the actual set of metadata Entries returned to a Consumer for the context of the request.-->
        </t>
        <section title="Delegated Authorization">
          <t>
          <!--
            TODO:
                -> add/expand 2-legged OAuth (see google marketplace stuff) if not use granting directly but whol domain.
          -->
            Service Providers wishing to provide Delegated Authorization MUST support <xref target="OAuth 2.0" /> as an OAuth Service Provider, and MAY also support additional Delegated Authorization mechanisms, if they choose.
            Service Providers supporting OAuth SHOULD provide a mechanism for Consumers to automatically obtain an access token, but MAY require this to be done out-of-band.
         </t>
         <!--
         <t>
            To be finished....
         </t>
         -->
        </section>
        <section title="Direct Authorization">
          <t>
            Service Providers wishing to provide Direct Authorization MUST support HTTP Basic Access Authentication <xref target="RFC2617" />, and MAY also support additional Direct Authorization mechanisms, if they choose.
            In addition to being a well-established mechanism for Direct Authorization, HTTP Basic has the added benefit of being understood by most Web Browsers, and can prompt users to enter their credentials as part of accessing a resource protected in this manner.
            There are also convenient ways of providing and parsing HTTP Basic credentials in popular tools and libraries.
          </t>
        </section>
          <section title="Available Authorization Methods">
          <t>
            Service Providers that provide access to private metadata MAY choose not to support either Direct Authorization or Delegated Authorization, depending on their security requirements, but they MUST support either OAuth or HTTP Basic auth if they require any Authorization.
            When accessing a Portable Listings endpoint, if sufficient authorization credentials are not provided, the Service Provider SHOULD return a 401 Unauthorized response, and SHOULD provide the available Authorization mechanisms available by including WWW-Authenticate headers in the response for each type of Authorization method supported (as defined in <xref target="RFC2616" />, section 14.47).
            Consumers will then be able to recognize that the API is a protected resource and initiate the proper Authorization process needed to obtain the appropriate credentials.
            An example set of WWW-Authenticate headers returned by a Service Provider that supports both OAuth and HTTP Basic might look like this.
            Note that the realm value is intended to be an opaque string that merely defines a shared label for resources that share the same authorization requirements.
            <figure>
              <artwork>
WWW-Authenticate: OAuth realm="sample.site.org"
WWW-Authenticate: Basic realm="sample.site.org"
              </artwork>
            </figure>
          </t>
          <t>
            If Service Providers wish to make some response metadata publicly available and also provide additional info given the proper authorization credentials, they SHOULD provide a 200 OK response to requests without authorization with a WWW-Authenticate header in the response indicating that additional info is available via the specified authorization mechanisms.
          </t>
        </section>
      </section>

    </section>
    
    <!-- thi is the data model really - vocabulary should move out of this doc and add "if two Consumers/Service-Provider agrees on the information semantics is fine :) -->

    <section title="Listings Format" anchor="listings-format">
      <t>
        The Portable Listings format is expressed in terms of profiles identified with a URI per <xref target="RFC6906"/>.
      </t>
      <t>
        In the scope of this specification a profile is defined using the basic structures defined in <xref target="structure"/>.
        In addition a profile MAY also define addition constraints and guidelines for a Consumer application.
      </t>
      <t>
        An Entry is defined to be "compliant" with a profile if and only if it adheres to the format structures, the contraints and the requirements set in a profile description.
        A Entry MAY be compliant with multiple profiles.
      </t>
      <t>
        <!-- A profile it is intended only as an informative guide to Consumer applications interpreting the information contained within an Entry and it does not impose any
        behavioral requirements on implementations.-->
        Unless specifically forbidden by a particular profile definition, an Entry can contain arbitrary fields and relationships.
        Consumer MAY choose to ignore any unknown information and continue processing.
      </t>
      <t>
        This specification defines the <spanx style="verb">core profile</spanx> and it is the only profile that a Portable Listings implementation is required to support (see <xref target="core-profile"/>).
        Support for other profiles is optional. If a Consumer is presented with an Entry expressed using an unknown profile, the Consumer MAY choose to ignore it and continue processing.
        
        <!--
            TODO:
                -> minimal compliancy
                    -> all types too broad
                    -> Entry, Contact (& Collection ?) - rest optional - so profiles can be defined based on Entry downwards... ?! again too generic not A/V specific ???
                    -> see MPEG-7 profiles and compliancy idea
                    -> also very important about valids / canonical values minimal list - or leave it open ? controlled lists can be very wide for Provider to implement...
                    
                -> check/if add or use AVRO schema primitive and complex types instead http://avro.apache.org/docs/current/spec.html#schema_primitive
        -->
      </t>
      
      <section title="Basic Structure" anchor="structure">
      <t>
        <!-- add that an Entry represents an resource map (aggregation) of all information about actual AV concept the Consumer has (E.g. all the AV concept metadata from a given source and other
             pieces of information aggregated from other sources about the same AV concept) - the concpet of aggregation if explained at http://www.openarchives.org/ore -->
        Each Entry is defined as a set of fields, links and relationships.
        Each Entry MUST have a unique identifier and an object type.
        The order in which Entry fields, links and relationships are defined is not significant.
        By definition an Entry has object type of <spanx style="verb">entry</spanx>.
        Objects are represented in a result set with the <spanx style="verb">entry</spanx> element (see <xref target="response-format"/>) and the object type is specified using lowercased object type name as value of the <spanx style="verb">objectType</spanx> field.
        <!-- TODO - Improve this and talk about how to "automatically inherit the default metadata signalled in parents/ancestors" -->
        Unless specified otherwise and as general rule, all fields, links and relationships applying to a specific Entry type SHALL BE  applicable to any Entry sub-type (e.g. fields and relationships defined for <spanx style="verb">programme</spanx> apply to <spanx style="verb">series</spanx>).
      </t>
      <section title="Fields" anchor="fields">
        <t>
        Each field is defined as either a Singular Field, in which case there MUST NOT be more than one instance of that field per Entry, or as a Plural Field, in which case any number of instances of that field MAY be present per Entry.
        By definition, each Entry returned to a Consumer MUST include the <spanx style="verb">id</spanx> and <spanx style="verb">displayName</spanx> fields with non-empty or no null values, but all other fields are optional.
        </t>    
        <t>
          Entry fields information is formatted using labeled attributes with either structured or unstructured values.
          Each attribute value consists of one of the following types:

          <list style="hanging">
            <t hangText="Simple:">
              A single value attribute. Unless otherwise specified, a Simple field is by definition a STRING.
              A Simple Field value can be any of the following datatypes:
              <list style="hanging">
                <t hangText="STRING:">
                    A string value as defined in section 2.5 in <xref target="RFC4627"/>. A string attribute MAY be used to specify a REQUIRED data type format (e.g. URI, DATE) or allow any string.
                </t>
                <t hangText="NUMBER">
                    An interger or floating point numeric value as defined in section 2.4 in <xref target="RFC4627"/>. 
                </t>
                <t hangText="BOOLEAN:">
                    A boolean value as defined in section 2.1 in <xref target="RFC4627"/>. Values are case-sensitive.
                </t>
                <t hangText="NULL:">
                    An null value as defined in section 2.1 in <xref target="RFC4627"/>. The value is case-sensitive. A field with value null is considered to be the same as if the field value was omitted. This value is a valid value for any field which is not specified as REQUIRED.
                </t>
                <t hangText="HTML:">
                    The special value type HTML is used to describe a STRING which contains a string of characters that would be valid if used within a DIV container element in an HTML document, as defined by <xref target="HTML5"/>.
                    Since strings as defined in section 2.5 in <xref target="RFC4627"/> are strings of unicode characters rather than octets, care may be required in some implementations to ensure that the default character encoding of an HTML parser used to parse the content of such a string is correctly configured to match the encoding of the string in that implementation's internal string representation.
                </t>
                <t hangText="IRI:">
                    The special value type IRI is used to describe a string which contains an IRI as defined in <xref target="RFC3987"/>. Note that the definition of "IRI" excludes relative references. Though the IRI might use a dereferencable scheme, Consumers MUST NOT assume it can be dereferenced.
                    Because of the risk of confusion between IRIs that would be equivalent if they were mapped to URIs and dereferenced, the following normalization strategy SHOULD be applied when generating values for fields of type IRI:
                    <list style="symbols"> 
                            <t>Provide the scheme in lowercase characters.</t>
                            <t>Provide the host, if any, in lowercase characters.</t> 
                            <t>Only perform percent-encoding where it is essential.</t>
                            <t>Use uppercase A through F characters when percent-encoding.</t>
                            <t>Prevent dot-segments from appearing in paths.</t>
                            <t>For schemes that define a default authority, use an empty authority if the default is desired.</t>
                            <t>For schemes that define an empty path to be equivalent to a path of "/", use "/".</t>
                            <t>For schemes that define a port, use an empty port if the default is desired.</t>
                            <t>Preserve empty fragment identifiers and queries.</t>
                            <t>Ensure that all components of the IRI are appropriately character normalized, e.g., by using NFC or NFKC.</t>
                    </list>
                    <!--A URL is defined to be a special case of a IRI following the URI mapping rules above.-->
                </t>
                <t hangText="LANGUAGE:">
                    The special value type LANGUAGE is used to describe a valid language code value as defined in <xref target="RFC5646"/>.
                </t>
                <t hangText="TIMESTAMP:">
                    The special value type TIMESTAMP is used to describe a string which contains a valid timestamp as defined in <xref target="RFC3339"/>.
                </t>
                <t hangText="TIME:">
                    The special value type TIME is used to describe a string which represents an instant of time that recurs every day as defined in section 3.2.8 of <xref target="XSD-DATATYPES"/>.
                </t>
                <t hangText="YEAR:">
                    The special value type YEAR is used to describe a string which represents a gregorian calendar year as defined in section 3.2.11 of <xref target="XSD-DATATYPES"/>.
                </t>
                <t hangText="DURATION:">
                    The special value type DURATION is used to describe a string which represents a duration of time as defined in section 3.2.6 of <xref target="XSD-DATATYPES"/> and ISO 8601 <xref target="ISO8601-duration"/>.
                </t>
                <t hangText="TIMECODE:">
                    The special value type TIMECODE is used to describe a string which represents a duration expressed in timecode using the ANSI/SMPTE 12M-1986 (Timecode) format <xref target="ANSI-SMPTE-12M-1986"/>.
                </t>
                <t hangText="PERIOD:">
                    The special value type PERIOD is used to describe a string which represents a time interval as defined in <xref target="DCMI-PERIOD"/>.
                </t>
                <t hangText="TERRITORY:">
                    The special value type TERRITORY is used to describe a string which represents a country or territory as defined in ISO 3166 <xref target="ISO3166"/>.
                </t>
                <t hangText="PLACE:">
                    The special value type PLACE is used to describe a string which represents a geographical Point as defined in GeoJSON <xref target="GEO-JSON"/>.
                </t>
                <t hangText="ENUM:">
                    A simple field MAY contain Canonical Values specified as an enumerated list of valids to represent specific Reference Data values (see for example the <spanx style="verb">core profile</spanx> <xref target="reference-data"/>).
                    In this case Service Providers SHOULD try to conform to those values if appropriate, but MAY provide alternate values to represent additional values.
                </t>
                <t hangText="CONSTANT:">
                    A pre-defined constant unchangable Simple value.
                </t>
                <!--            
                        Add default types:
                            -> 'html'for embedding DIV/html into json - see json-syndication format
                -->
              </list>
                Providers MAY support additional Simple field string type values if they choose. Consumer MAY choose to ignore any unknown information or process those values as STRING.
                <vspace blankLines="1" />
            </t>
            <t hangText="Complex:">
                A multi-value attribute containing any combination of other attributes. Complex attributes are defined by listing the child attributes and their types.
                For most Complex Fields, the <spanx style="verb">value</spanx> sub-field contains the Major Value of that field (i.e. the primary piece of listings information described by that field) and the other fields provide additional information about the field itself.<!-- Complex Fields SHOULD NOT be nested -->
                A Complex Field is marked with the COMPLEX keyword in the rest of this document.
                <vspace blankLines="2" />
                Unless specified otherwise, and except for the structures defined in <xref target="link-structure"/> and <xref target="relationships"/>, all Plural Complex Fields (i.e. plural fields which instances are not a simple value) have the same four standard sub-fields:
                    <list style="hanging">
                        <t hangText="value: (SIMPLE)">
                            The primary value of this field, e.g. an alternative title, URL or e-mail address.
                            When specifying a <spanx style="verb">sortBy</spanx> field in the Query Parameters for a Plural Field, the default meaning is to sort based on this <spanx style="verb">value</spanx> sub-field.
                            Each non-empty Plural Field value MUST contain at least the <spanx style="verb">value</spanx> sub-field, but all other sub-fields are optional.
                        </t>
                        <t hangText="primary: (BOOLEAN)">
                            A Boolean value indicating whether this instance of the Plural Field is the primary or preferred value of for this field, e.g. the preferred mailing address or primary e-mail address.
                            Service Providers MUST NOT mark more than one instance of the same Plural Field as primary="true", and MAY choose not to mark any fields as primary, if this information is not available.
                            For efficiency, Service Providers SHOULD NOT mark all non-primary fields with primary="false", but should instead omit this sub-field for all non-primary instances.
                        </t>
                        <t hangText="type: (ENUM)">
                            The type of field for this instance, usually used to identify the preferred function of the given listings information.
                            This string generally is specified to contain a valid Canonical Value picked from a pre-defined list.
                            For example in an <spanx style="verb">alternativeTitle</spanx> the <spanx style="verb">type</spanx> sub-field string value could be <spanx style="verb">original</spanx> or <spanx style="verb">working</spanx> (see <xref target="reference-data"/>).
                        </t>
                        <t hangText="label: (STRING)">
                            A human-readable label or name associated to the <spanx style="verb">value</spanx> sub-field.
                        </t>
                        <t hangText="lang: (LANGUAGE)">
                            The language of the attribute value. The value MUST be a valid LANGUAGE Canonical Value.
                        </t>
                        <t hangText="attributionDate: (TIMESTAMP)">
                         The date at which the specific attribute vaue was attributed.
                        </t>
                        <t hangText="note: (STRING or HTML)">
                         A note on the attribute value to provide additional contextual information.
                        </t>
                    </list>
                    <!--
                    Meta-metadata identifiers - should/MUST add QR code of the metadta record :) so easy to refer/type-into due write MTD is hard ! see http://techcrunch.com/2010/03/19/facebook-qr-codes-location/
                    We could eventually have QR code of the tape/content - not so interesting ?!
                    -->
                Also unless specified otherwise, when returning Plural Fields, Service Providers SHOULD canonicalize the value returned, if appropriate (e.g. for URLs and e-mail addresses).
                Providers MAY return the same value more than once with different types <!--(e.g. the same XXXX may used as YYYYYY in american english or ZZZZZ in british english)-->, but SHOULD NOT return the same (type, value) combination more than once per Plural Field, as this complicates processing by the Consumer.
            </t>
          </list>
        </t>
        <t>
            In the rest of this document, a required field (or sub-field) is marked with the REQUIRED keyword.
        </t>
        <t>
            A Simple Field is marked with the SIMPLE keyword or the uppercase identifier of its datatype (e.g. STRING, DATE).
            A Complex Field is marked with the COMPLEX keyword or the uppercase identifier of its complex datatype (e.g. LINK, SOURCE).
            Some fields MAY be defined as accepting multiple datatypes using the "or" combinator. For example, the type "STRING or NUMBER" indicates that a Simple Field may accept either a string or a numeric value.
        </t>
        <t>
            Field structures will be described as follow:
            <list style="hanging">
                <t hangText="singularField: (DATATYPE)">
                    A Singular Field with a SIMPLE or COMPLEX value with datatype DATATYPE.
                </t>
                <t hangText="pluralField: [DATATYPE]">
                    A Plural Field with an Array of SIMPLE of COMPLEX values with datatype DATATYPE.
                </t>
            </list>
        </t>
    </section>
                  
    <section title="Links" anchor="link-structure">
          <t>
              A Complex Field which represent a standard LINK as defined by section 3 of <xref target="RFC5988" />.
              This enables Providers to create generic standard links between an Entry and other resources, including other Entries (see <xref target="relationships"/>), using the registry of links relations defined by the Web Linking specification and HTML5 Link types <xref target="HTML5"/>.
              The Context of the LINK is the Entry which has a field using the LINK construct as value.
              <!-- see requirements atom link-inline stuff -->
              <!--
               Providers SHOULD NOT use this construct to link or refer to other Entries, but use instead the Entry relationship mechanisms defined in this specification.
               -->
          </t>
          <t>
              <list style="hanging">
                  <t hangText="href: (IRI)">
                      REQUIRED. The IRI of the link. This IRI MAY be relative or absolute. If the URI is relative it is resolved against the Service Provider root API endpoint URL.
                      Unless otherwise specified, this is the Primary Sub-Field for the field having this construct as value, for the purposes of sorting and filtering.
                      The <spanx style="verb">value</spanx> sub-field SHALL not be specified.
                  </t>
                  <t hangText="rel: (ENUM or IRI)">
                      The link relation type. Unless otherwise specified, the rel value MUST be a valid Canonical Value as defined in <xref target="IANA-RELREG" /> and in <xref target="additional-link-relation-types"/>.
                      If this property is omitted or null it MUST BE processed as if the value was the string "alternate".
                  </t>
                  <t hangText="mediaType: (ENUM)">
                      The media type of the representation identified by the IRI of the link. The value is a hint about the type of the representation that is expected to be returned when the value of the href field is dereferenced.
                      Note that the type field does not override the actual media type returned with the representation. A link construct MAY have a type sub-field, whose value MUST conform to the syntax of a MIME media type defined in <xref target="MIMEREG"/>. Unless otherwise specified, the type value field MUST be a valid Canonical Value as defined by the IANA MIME Media Types registry <xref target="IANA-MIMEREG"/>.
                  </t>
                  <t hangText="hreflang: (LANGUAGE)">
                      The content language of the representation identified by the IRI of the link.
                      When used together with the rel sub-field with value "alternate", it implies a translated version of the Context of the link.
                      A link construct MAY have an hreflang sub-field, whose value MUST be a valid LANGUAGE Canonical Value.
                      The <spanx style="verb">lang</spanx> sub-field SHALL not be specified.
                  </t>
                  <t hangText="label: (STRING)">
                      A human-readable label about the link.
                  </t>
                  <t hangText="length: (NUMBER)">
                      The content length in octets of the representation identified by the IRI of the link. The value is a hint about the content length of the representation returned when the IRI in the href sub-field is mapped to a URI and dereferenced. Note that the length sub-field does not override the actual content length of the representation as reported by the underlying protocol.
                  </t>
                  <t hangText="width: (NUMBER)">
                      When the target resource is a visual media item, for example if the media type is image/* or video/*, this value is a hint about the item's intrinsic or ideal width in pixels.
                  </t>
                  <t hangText="height: (NUMBER)">
                      When the target resource is a visual media item, for example if the media type is image/* or video/*, this value is a hint about the item's intrinsic or ideal height in pixels.
                  </t>
                  <t hangText="duration: (TIMECODE or DURATION or NUMBER)">
                      When the target resource is a time-based media item, for example if the media type is video/* or audio/*, this value is a hint about the item's approximate duration.
                  </t>
                  <t hangText="primary: (BOOLEAN)">
                      If the link construct is used in a Plural Field, this is a boolean value indicating whether this instance of the link is the primary or preferred value of for the link, e.g. the preferred link.
                      Service Providers MUST NOT mark more than one instance of the same link as primary="true", and MAY choose not to mark any links as primary, if this information is not available.
                      For efficiency, Service Providers SHOULD NOT mark all non-primary links with primary="false", but should instead omit this sub-field for all non-primary instances.
                  </t>
              </list>
              Unless otherwise specified, when the link construct is used in a Plural Field, Providers MAY return the link construct with the same href and rel values combination more than once with different type, hreflang, label, length, width, height or duration, but MUST NOT return more than once the same type and hreflang combination for a given href with rel field of value "alternate".
          </t>
    </section>
          
    <!--
    <section title="Date Group" anchor="data-group-structure">
           <t>
           The components of a Complex Field to represent a DATEGROUP expressing a date, time, time period, or interval.
           Any of the <spanx style="verb">start_year</spanx>, <spanx style="verb">start_date</spanx>, <spanx style="verb">start_time</spanx>, <spanx style="verb">end_year</spanx>,
           <spanx style="verb">end_date</spanx>, <spanx style="verb">end_time</spanx> MUST BE non-empty or null, unless the <spanx style="verb">period</spanx> is non-empty or null.
           And viceversa.
           </t>
           <t>
           <list style="hanging">
           <t hangText="start_year: (YEAR)">
           A start year.
           </t>
           <t hangText="start_date: (TIMESTAMP)">
           A start timestamp.
           </t>
           <t hangText="start_time: (TIME)">
           A start instant of time.
           </t>
           <t hangText="end_year: (YEAR)">
           An end year.
           </t>
           <t hangText="end_date: (TIMESTAMP)">
           An end timestamp.
           </t>
           <t hangText="end_time: (TIME)">
           An end instant of time.
           </t>
           <t hangText="period: (PERIOD)">
           A time interval.
           </t>
           <t hangText="primary: (BOOLEAN)">
           If the link construct is used in a Plural Field, this is a boolean value indicating whether this instance of the link is the primary or preferred value of for the field, e.g. the preferred link. Service Providers MUST NOT mark more than one instance of the same link as primary="true", and MAY choose not to mark any fields as primary, if this information is not available. For efficiency, Service Providers SHOULD NOT mark all non-primary fields with primary="false", but should instead omit this sub-field for all non-primary instances.
           </t>
           </list>
           
           This first version of the specification excludes any range filtering or search.
           A Provider SHOULD try its best to match and filter Entry results upon the DATEGROUP structure.
           For the purposes of sorting and filtering the following set rules SHOULD BE tried in order:
           <list style="numbers">
           <t>If the <spanx style="verb">period</spanx> field is non-empty or null, the <spanx style="verb">period</spanx> field is used as the Primary Sub-Field.</t>
           <t>Otherwise, if either the <spanx style="verb">start_date</spanx> or the <spanx style="verb">end_date</spanx> fields (or both) are non-empty or null, either of the fields is used as the Primary Sub-Field.
           The <spanx style="verb">start_date</spanx> is always matched before.</t>
           <t>Otherwise, in similar way the <spanx style="verb">start_time</spanx> combined with the <spanx style="verb">start_year</spanx> and the <spanx style="verb">end_time</spanx> combined with the <spanx style="verb">end_year</spanx> pairs are matched.</t>
           </list>
           </t>
    </section>
    -->
          
    <section title="Relationships" anchor="relationships">
        <t>
          A relationship expresses a directed labeled and typed connection from a Source Entry (or relationship Context Entry) to a Target Entry.
          Each relationship MUST have a name and a type.
          Each relationship between two Entries is defined as either a Singular Relationship, in which case there MUST be one and only one Sub-Entry associated, or as a Plural Relationship, in which case any number of Sub-Entries MAY be associated to the source Entry being described.
          When a relationship is defined as REQUIRED its minimal cardinality is set to one Sub-Entry.
        </t>
        <t>
          Entry relationships information is formatted using a Singular Complex Field for a Singular Relationship, and a Plural Complex Field for a Plural Relationship.
          The Complex Field name is defined to be the relationship name (e.g. <spanx style="verb">creator</spanx>, <spanx style="verb">publisher</spanx> or <spanx style="verb">contributor</spanx>).
          The relationship Complex Field MUST BE a direct child of the <spanx style="verb">entry</spanx> element representing the Source Entry (i.e. a sub-field can not be used to express a relationship).
          A relationship Complex Field MAY have additional Simple or Complex sub-fields, but MUST NOT contain Complex Fields representing other relationships.
        </t>
        <t>
            The structure of the Complex Field varies depending whether the relationship information is requested <spanx style="verb">by-reference</spanx> or <spanx style="verb">by-value</spanx>. However, the <spanx style="verb">value</spanx> sub-field SHALL not be specified.
          <list style="hanging">
              <t hangText="by-reference">
                The relationship is formatted using a LINK structure as defined in <xref target="link-structure"/> with the following differences:
                <list style="hanging">
                    <t hangText="href: (IRI)">
                        REQUIRED. The value MUST BE a valid URL reference to a Service Provider Portable Listings API endpoint including path information and other query parameters which can be used to request a single Target Entry connected with the Source Entry via the named relationship (see <xref target="request-specific-information"/>).
                        Note that this definition also covers the scenario of relationships expressed between Entries across Service Providers.
                        Although a Provider SHOULD NOT reference Entries on another Provider as this complicates processing by the Consumer.
                    </t>
                    <t hangText="mediaType: (CONSTANT)">
                        If non-empty or null, the media type is defined to be <spanx style="verb">application/listings+json</spanx>.  The <spanx style="verb">profile</spanx> media type parameter MAY be specified as defined in <xref target="referencing-profiles"/>.
                    </t>
                    <t hangText="rel: (ENUM or IRI)">
                        <!-- It is the field used to filter relationships by type (see <xref target="query-params"/>). -->
                        The value must be a valid relation type as defined in <xref target="IANA-RELREG" /> and in <xref target="additional-link-relation-types"/>.
                        If this attribute is omitted it MUST BE processed as if the value were the string "related".
                    </t>
                    <t hangText="role: (ENUM or IRI)">
                        Unless otherwise specified, this is an optional sub-field used to represent the role played by the Target Entry in the relationship (e.g. <spanx style="verb">contributor</spanx> as specified in <xref target="content-type-relationships"/>).
                        The value SHOULD BE selected from a standard list of values.
                    </t>
                    <t hangText="hreflang: (LANGUAGE)">
                        The content language of the metadata Entry referenced.
                        The value MUST be a valid LANGUAGE Canonical Value.
                        The <spanx style="verb">lang</spanx> sub-field SHALL not be specified.
                    </t>
                    <t hangText="label: (STRING)">
                        If non-empty or null, the label SHOULD match the <spanx style="verb">displayName</spanx> field of the Sub-Entry.
                    </t>
                    <t hangText="primary: (BOOLEAN)">
                        If the inline entry construct is used in a Plural Field, this is a boolean value indicating whether this instance of the relationship is the primary or preferred value of for the relationship, e.g. the preferred relationship.
                        Service Providers MUST NOT mark more than one instance of the same relationship as primary="true", and MAY choose not to mark any relationship as primary, if this information is not available.
                        For efficiency, Service Providers SHOULD NOT mark all non-primary relationships with primary="false", but should instead omit this sub-field for all non-primary instances.
                    </t>
                </list>
                A Provider MAY define additional fields if necessary.
              </t>
              <t hangText="by-value">
                The relationship is formatted using an "inline entry" multi-value attribute defined as follows:
                <list style="hanging">
                  <t hangText="entry:">
                    REQUIRED. It MUST contain the exact content of the <spanx style="verb">entry</spanx> element representing the Target Entry structure connected with the Source Entry via the named relationship.
                  </t>
                  <t hangText="rel: (ENUM or IRI)">
                    The link relation type. <!-- It is the field used to filter relationships by type (see <xref target="query-params"/>). -->
                    The value must be a valid relation type as defined in <xref target="IANA-RELREG" /> and in <xref target="additional-link-relation-types"/>.
                    If this attribute is omitted it MUST BE processed as if the value were the string "related".
                  </t>
                  <t hangText="role: (ENUM or IRI)">
                    Unless otherwise specified, this is an optional sub-field used to represent the role played by the Target Entry in the relationship (e.g. <spanx style="verb">contributor</spanx> as specified in <xref target="content-type-relationships"/>).
                    The value SHOULD BE selected from a standard list of values.
                  </t>
                  <t hangText="lang: (LANGUAGE)">
                    The content language of the metadata Entry included.
                    The value MUST be a valid LANGUAGE Canonical Value.
                  </t>
                  <t hangText="label: (STRING)">
                    The label SHOULD match the <spanx style="verb">displayName</spanx> field of the Sub-Entry.
                  </t>
                  <t hangText="primary: (BOOLEAN)">
                    If the inline entry construct is used in a Plural Field, this is a boolean value indicating whether this instance of the relationship is the primary or preferred value of for the relationship, e.g. the preferred relationship.
                    Service Providers MUST NOT mark more than one instance of the same relationship as primary="true", and MAY choose not to mark any relationship as primary, if this information is not available.
                    For efficiency, Service Providers SHOULD NOT mark all non-primary relationships with primary="false", but should instead omit this sub-field for all non-primary instances.
                  </t>
                  <!--
                  <t hangText="profile: [IRI]">
                    An array of IRI containing the identifiers for the profiles used to describe their metadata Entries included.
                    This represent the default profiles for the included Entry if not specified otherwise (see also <xref target="referencing-profiles"/>).
                  </t>
                  -->
                </list>
                A Provider MAY define additional sub-fields if necessary.
              </t>
          </list>
            <!--
                Meta-metadata identifiers - should/MUST add QR code of the metadata record :) so easy to refer/type-into due write MTD is hard ! see http://techcrunch.com/2010/03/19/facebook-qr-codes-location/
                We could eventually have QR code of the tape/content - not so interesting ?!
            -->
            <!--
            Also unless specified otherwise, when returning Plural Fields, Service Providers SHOULD canonicalize the value returned, if appropriate (e.g. for URLs and e-mail addresses). Providers MAY return the same value more than once with different types (e.g. the same XXXX may used as YYYYYY in american english or ZZZZZ in british english), but SHOULD NOT return the same (type, value) combination more than once per Plural Field, as this complicates processing by the Consumer.
            -->
          Note that the above definitions effectively require a Provider to represent each individual member of a relationship using one Complex Field (either a link or an entry structure) for each individual associated Sub-Entry.
        </t>
        <t>
            A Provider MAY return Plural Relationships with the same href (if by-reference) or entry (if by-value) and rel values combination more than once with different role and hreflang (if by-reference) or lang (if by-value).
        </t>
        <t>
          For efficiency, Service Providers SHOULD return relationships information <spanx style="verb">by-reference</spanx>.
          A Consumer MAY explicitly request to include relationships information <spanx style="verb">by-value</spanx> as explained in <xref target="presentation"/>.
        </t>
        <t>
          Again for efficiency, Service Providers MAY return only a sub-set of all the connected Sub-Entries inside a Source Entry.
          A Consumer MUST BE able to retrieve the complete list of Sub-Entries wrapped into one single <spanx style="verb">entry</spanx> element (single object or array) using additional path information (e.g. <spanx style="verb">http://api.example.org/api/listings/5E5EEBED3173/contributor</spanx> - see <xref target="request-specific-information"/>).
        </t>
        <t>
          
        </t>
        <t>
            In the rest of this document, a required relationship is marked with the REQUIRED keyword.
            A relationship (either to be included <spanx style="verb">by-reference</spanx> or <spanx style="verb">by-value</spanx>) is marked with the RELATIONSHIP keyword or with the uppercase identifier of the object type of the Target Entry (e.g. PERSON, ENTRY, PROGRAMME etc).
            Some relationships may be defined as accepting multiple object types using the "or" combinator. For example, the type "GROUP or ORGANISATION" indicates that a relationship may accept as Target Entry a Group or an Organisation.
        </t>
        <t>
            Relationships structures will be described as follow:
            <list style="hanging">
                <t hangText="singularRelationshipName: (OBJECTYPE)">
                    A Singular Relationship with a name of <spanx style="verb">singular_relationship_name</spanx> connecting the Source Entry containing the named relationship attriubute with a Target Entry of type OBJECTYPE.
                    The relationship type is expressed using the <spanx style="verb">rel</spanx> sub-field.
                </t>
                <t hangText="pluralRelationshipName: [OBJECTYPE]">
                    A Plural Relationship with a name of <spanx style="verb">plural_relationship_name</spanx> connecting the Source Entry containing the named relationship attriubute with a Target Entry of type OBJECTYPE.
                    The relationship type is expressed using the <spanx style="verb">rel</spanx> sub-field.
                </t>
            </list>
        </t>
        <t>
            The Core profile (see <xref target="core-profile"/>) defines a pre-defined set of relationship names, based on existing industrial standards and vocabularies aiming to provide a standard list of named relationships.
        </t>

        <!--
          A Provider MAY define and reference additional properties or characteristics about a named relationship (E.g. validitidy of a relationship, creation time and so on). A Provider SHOULD include such information as additional Simple or Complex Fields of either the Source Entry or the Target Entry, and reference to the corresponding profile definition in order to let Consumers to process information correctly (see <xref target="referencing-profiles"/>). Such additional information SHOULD BE defined as optional and associated with a specific instance of a Entry as playing a specific role in a specific relationship, rather than a characteristic of the general Entry Type itself.
          Entry relationships information is formatted using 
          labeled multi-value attributes containing any combination of other attribute types. A Relationship SHOULD NOT contain Complex Fields.
          In spite of syntactic similarity Relationships and Complex Fields are two separated and well defined concepts.
          
          with structured strings. Each attribute value consists of one of the following types:

            Extended relationship:
                -> indicate the two roles that the entity involved plays in the relationship.
                -> Time + Space based: ( activity streams )
                    -> an action that was perfomred (the verb) at some instant in time, in some place, by some actor (the actor / entity) with some social object
                        -> for Location based see http://wiki.activitystrea.ms/Location
                        -> object and actor could be in different places !
                        -> "In Activity Streams, location can be a property of either the entire entry OR of the actor and object OR one of the actor or objects."
                        
                -> Role based: ( contributor )
                    -> an actor plays a specific role in a given named relationship
                
                -> add extended/relationship specifci filter functions to the above e.g. give all relationship with specific properties e.g. "all contributors which are actors" 
                    -> need to have primary concept too, and not sure which field is default primary
                    
                -> Extended rels are like "link tables" / "Hierarchies" ( see M$ MDS )
                    -> add relationship/link attribute 'authoritative" "when it took effect" etc... basically attributes to relationships! how do we query them?! /id/relation is then ambigous !!!
   
                           <t hangText="Relationship:">
              A special case of a Complex Field with a mandatory <spanx style="verb">entry</spanx> sub-field containing a Sub-Entry related to the Entry context of this relationship.
              
              Unless specified the rel
              
              relationship between an Entry and a Sub-Entry expressed as a multi-value attribute containing any combination of other attributes.... + entry sub-field
              
               Complex attributes are defined by listing the child attributes and their types. For most Complex Fields, the <spanx style="verb">value</spanx> sub-field contains the Major Value of that field (i.e. the primary piece of listings information described by that field), the <spanx style="verb">lang</spanx> sub-field contains the language of the value (see <xref target="multilingual-fields"/>), and the other fields provide additional information about the field itself. Complex Fields SHOULD NOT be nested. A simple field is marked with the COMPLEX keyword.
               Syntactially a relationship and a Complex Field are identical and the only difference is the presence of the reserved "entry" sub-field...
            </t>


            Perhaps add about the fact that other scalar/basic data types could be expressed as Complex values with needed sub-fields
            
            Attribute name MIGHT consist of a prefix and suffix separated by ':'; where the prefix must be bound to a specific profile (see XXXX ). All field attributes and relationships defined in this document are assumed to be part of the 'core profile' and implicitly bound to the profile identifier 'XXX'.
            Add about profile could define other Javascript/ECMAScript data types, but we sticked to simplicity and pragmatism - and could use sub-file "dataType" on Complex Field if necessary/needed !
            Say we do not deal with inheritance into model, but relay on external definitions.


            TODO:
                -> explain if relationships are simmetric and MUST BE / MUST NOT BE bi-directionally set.
                -> if simmetric say we make realAtoB / relBtoA: <description> .... kind of or not ?

          tags on relationships as default together with sub-entries ref
          
          <t hangText="tags: (any)">
                    A Plural Field representing a list user-defined categories or labels for the link, e.g. "datamodel" or "schema". These values SHOULD be case-insensitive, and there SHOULD NOT be multiple tags provided for a given link that differ only in case. Note that this field is a Simple Field, meaning each instance consists only of a string value.
                  </t>


            A Service provider MAY decide to automatically expand relationship or not; or use the modifiers above
            In Any case, we do not want to have expanded/not-exanded relationships - we assumed that a Consumer knowing the profile/s it knows what to ask for
            Optionally in the future XRD description of the Service Provider MAY carry some extra Portable Listings information of which profiles are supproted. Or make it mandatory?!?!?!
          
          
             IMPORTANT!!! add story about expanding relationship expansion:
                -> by default relationships are *NOT* expanded and relationship attributes just contain detault two + eventually type
                -> if expand=true only one level is expanded (not arbitrary to avoid recursion?!)
                -> canonical case of expansion is when /{objectType}/{id}/{relationship}
          
             in the future here we will add 'href' optional attribute to refer to entries, rather than inline them 
                    -> internal ref 'ID'
                    -> external ref 'URI' where starts with something like list:<authority>:ID or similar - TBD
             Add from Link and relationships spec and how to refer to external information and/or bear in mind how to map easily "related information" to future new Entry objectTypes (E.g. books)
             
             link types:
                -> to related resources (non-relationships)
                    -> (only) listed and can not be inlined
                -> to related Entries
                    -> listed
                    -> inline
                
                'href' is special and for non-relationships and MUST not start with a '#'
        -->
        </section>
        
      </section>

      <section title="Multilingual Fields" anchor="multilingual-fields">
        <t>
          The <spanx style="verb">Content-Language</spanx> HTTP header SHOUDL BE used by a Service Provider to signal a Consumer that the fields returned are expressed in a specific language. If the language is not specified, the fields language is left undefined.
        </t>
        <t>
          A Provider MAY return fields in multiple languages using the MIME multipart/alternative Content-Type in combination with the Content-Language header (see section 4.2 in <xref target="RFC5646"/>). 
        </t>
        <t>
          A Consumer MAY request metadata in one or more languages using the HTTP Accept-Language header.
        </t>
        <!--
        Add about Content-Language header as default if not present as useful shortcut to avoid repeat language on fields (especially singular value) - the language field value always override the header value
        -->
      </section>

      <!-- taken from atom old proposal -->
      <section title="Interoperability Considerations" anchor="interoperability-considerations">

      <t>
        Interoperability between Portable Listings implementations relies on the ability to for those implementations to rely on a consistent collection of required metadata elements. 
        The <spanx style="verb">core profile</spanx> described in <xref target="core-profile"/> is intended to provide a foundation upon which such interoperability MAY be based. New profiles MAY choose to either extend or modify the requirements specified by the core. Profiles that seek only to extend the core without changing any of those core requirements will have a much greater chance of ensuring appropriate levels of interoperability. Profiles that modify the core requirements run the risk of breaking interoperability in Portable Listings implementations. Because of this, for the sake of protecting interoperability, it is highly recommended that new profiles seek to extend the core rather than modify it.
      </t>
      </section>
      
      <section title="Referencing Profiles" anchor="referencing-profiles">
        <t>
            A Service Provider SHOULD signal a Consumer that the Entries are expssed using specific profiles by returning the <spanx style="verb">Content-Type</spanx> HTTP header with the media type parameter <spanx style="verb">profile</spanx> containing a whitespace-separated list of the profile URIs used.
        </t>
        <t>
            Alternatively profiles MAY be referenced per <xref target="RFC6906"/> as follow:
            <list style="symbols">
                <t>From individual metadata Entries using the <spanx style="verb">links</spanx> field with a "rel" attribute of "profile".</t>
                <t>Returning the <spanx style="verb">Link</spanx> HTTP header in responses.</t>
            </list>
        </t>
        <t>
            A Provider SHOULD return a profile identifier with each Consumer request. 
            The <spanx style="verb">core profile</spanx> is the default profile for all Entries returned by a Service Provider unless otherwise specified.
            Consumer SHOULD ignore any Entry object types, fields or relationship they do not understand.
            Note that the profile Content-type parament and field are intended only as a hint.
            A Consumer application MAY use it to help make decisions about an Entry but the presence of a particular profile identifier in the media type does not place any obligations on the application.
        </t>
      </section>
      
      <!--
        Add about "stale metadata" and how to keep in sync (dynamic) metadata:
            -> when content changes
            -> when metadata chnages ( needs updates back, already contemplated ... ?)
            
        at least mention it, and how to "pushes" ? pub-sub ?
        -->

    </section>
    
    <section title="Core Profile" anchor="core-profile">
        
        <t>
            The <spanx style="verb">core profile</spanx> aims to provide a minimal metadata set to identify and describe a piece of audiovisual content through the whole content value chain.
            It is expected that other specifications will be produced that to define formats specific to various broadcasting and audiovisual applications.
            <!-- from the planning, commissioning throughout the distribution, archive and consumption processes, covering aspects both of B2B and B2C interactions. -->
        </t>
        <t>
            Where possible the structure and semantics were directly taken directly from industry and open standards such as <xref target="EBUCORE" />, <xref target="EBU-OBJECTMODEL"/>, <xref target="TV-ANYTIME" /> and <xref target="BBC-PROGRAMMES"/>,
            trying also to align as much as possible with existing work done with <xref target="PortableContacts" />, <xref target="MEDIA-RSS"/>, <xref target="ATOM-MEDIA"/>, <xref target="HTML5"/> Video and Media Multitrack definitions <xref target="HTML5-MM"/><!--, <xref target="W3C-MEDIA-ANNOTATION-WG"/>--> and related specifications.
        <!-- Inside the defintions of this document we explicitly refer with mappings to existing vocabularies where possible, to easy the job of conversion between different formats. -->
      </t>
      <t>
        The following guidelines were followed to transform the input standard scheme into the core profile:
        <list style="symbols">
            <!-- fix/finalised once doc written and explain how we mapped things in... -->
            <t>Object types, field names and relationships have been renamed in camelCase where not already so.</t>
            <t>Object types have been mapped to Entry objectType field.</t>
            <t>EBUCore type groups were compacted into field names where possible, also resulting in more flattened data structures.</t>
            <t>More modern naming and human-readable labels have been used to express field names and relationships where necessary</t>
            <t>Where possible and making sense, structured hierarchies has been simplified and "flattened" making access to objects and fields more efficiently and less cumbersome for Consumers.</t>
            <!-- TODO - perhaps add we aimed to make Consumer access maximum to 2 HTTP GET operations - which means 4 levels of objects, including fields and sub-fields. -->
            <t>Even with the spelling updates and structure updates, the field and structure mappings remain equivalent, which it means that it SHOULD BE easy to convert Portable Listings metadata to and from original vocabualries</t>
            <t>Last, aiming for simplicity and pragmatism and even if the list of structrues and fields is broad, this first version of the core profile specification left out some of the concepts defined into input vocabularies.</t>
        </list>
      </t>

        <!--
            TODO:
                -> check if moving Collection to Content Collection (generic ala mediarss, and also for production, packaing, programme group etc...)
                -> segment, and segment group
                    -> think/add SMPTE timecode (see timecode datatype)
                    -> look if need to generalize into pgramme item / programme item grooup ala EBUcore / PMETA
                -> clips / media object
                    -> mashup medirss, html5, popcorn.js
                -> content packaging
                    -> offer, prices, rights
                -> Rights management
                    -> see ebu core and tv-anytime - and DDEX for compaign etc (or think simple profile)
                -> Channel / Schedule and Service
                    -> to finish
                    -> including broadcast vs. VOD/online
        -->

        <!--
        
        <section title="System Information" anchor="system-information">

        <t>
          The majorority of the fields defined in the <spanx style="verb">core profile</spanx> are meant to be used to represent descriptive, administrative or technical properties of an actual audiovisual piece of content or any other related resource (e.g. a television show episode title, synopsys, release date, a film genre, duration, a video file format, width, height, the language of a related Web resource, a thumbnail image size and so on). Some fields instead are purely defined to help a Service Provider to manage and store metadata records; or support a Consumer to retrieve and filter results. We refer to such fields as "system information" due the information they carry it is not generally considered part of the properties of a piece of content (or any other related resource) but rather associated to the "status" or properties of a metadata record itself.
        </t>
        <t>
           For example, an Entry <spanx style="verb">updated</spanx> field describes the most recent date the metadata record was modified, rather than the actual modification date of the piece of content. Likewise a <spanx style="verb">published</spanx> field describes the date when the metadata record was added to a database, or a <spanx style="verb">license</spanx> field describes the rights and usage terms of the metadata record rather than the actual content copyright or intellectual property rights. Or even an Entry <spanx style="verb">id</spanx> field itself MAY or MAY not contain a unique identifier specific to the metadata record (e.g. a database record identifier) rather than an unambiguous identifier for a piece of content used inside an agency, station or production company.
        </t>
        <t>
          Unless specified otherwise, all fields defined in the <spanx style="verb">core profile</spanx> refer to content specific properties, and where necessary the field naming has been choosen to make clear and disambiguate their definition (e.g. <spanx style="verb">contentXXXXXX</spanx> rather than <spanx style="verb">XXXX</spanx>). For easy reference to the reader system information fields are marked with the SYSTEM keyword.  Also unless specified otherwise, the results returned to a Consumer MUST contain all the system information fields.
        </t>
        </section>
        
        -->
        <section title="Reference Data" anchor="reference-data">
        <!-- see "dictionary" / "lookup" output structure and lookuptable=1 params -->
        <t>
          Well-defined Canonical Values MAY BE used for string-valued fields as reference data. For example, a Canonical Value can be used to express the <spanx style="verb">type</spanx> sub-field in a Complex Field.
          Where possible and useful the Reference Data and Canonical Values SHOULD BE selected from a standard list of values such as the EBU Metadata Reference Data and Classification Schemes <xref target="EBU-REFERENCEDATA"/> or the TV-Anytime Classification Schemes <xref target="TV-ANYTIME" />.
          A Provider MAY either use the well-defined and standardised lists of Canonical Values or it MAY define application specific values which a Consumer can reference.
        </t>
        <!--
        <t>
          Unless otherwise specified, the following guidelines has been used to map the EBU Metadata Reference Data and Classification Schemes Term IDs and Term Names to Canonical Values in Complex Fields (see <xref target="structure"/>):
        <list style="symbols">
            <t>the Term ID has been mapped to the <spanx style="verb">type</spanx> sub-field using a string-numeric dotted notation</t>
            <t>the Term Name has been mapped to the <spanx style="verb">label</spanx> sub-field</t>
        </list>
        </t>
        ** TODO: we need to have a Portable Listings Reference Data complementary spec where we define the mapping rules of reference data, and register relationship type/s for roles etc - see Web Linking registry policy etc
        <t>
            For readability, usability and simplicity of the Portable Listings format, in specific field definitions (e.g. <spanx style="verb">alternativeTitle</spanx> or <spanx style="verb">description</spanx>) the controlled lists of Term IDs have been provided with Canonical Values <spanx style="verb">term shortnames</spanx> to be used in the <spanx style="verb">type</spanx> sub-field in place of EBU numeric Term IDs.
            For example in <spanx style="verb">alternativeTitle</spanx> the <spanx style="verb">working_title</spanx> SHOULD BE used in place of numeric Term ID <spanx style="verb">6</spanx>.
            **
            Particularly, in order to express relationships between pieces of content and people, organisations or groups in a more natural and human-readable way, a few named relationships has been defined 
            picking a selection from the European Broadcasting Union Role Codes <xref target="EBU-ROLE-CODES"/> of common role names (e.g. director, actor, producer and so on).
            **
            Even with the term shortnames and spelling updates, the Term ID mappings remain equivalent, which it means that it SHOULD BE easy to convert the values to and from original vocabularies.
            See details the field definitions in <xref target="core-profile"/>.
        </t>
        -->
        <!--
        see/add story of enterprise metadata from Microsoft and merge the below eventually
        
        <t>
           It is important that for the sake of interoperability a common set of terms is used in a consistent manner throughout the description of Entries.
        </t>
        <t>
          Add about fact that lists are: 1) very long/wide (can count millions of items) 2) multilingual 3) different Service Providers might use different reference metadata - and it is handy to define a common set of types
        </t>
        <t>
          ...
          If necessary explain how other reference metadata could be plugged in / added (E.g. controlled list of titles etc.).
        </t>
        -->
        
        </section>

        <section title="Profile Identifier" anchor="profile-identifier">
            <t>
                The core profile is identified with the URI <spanx style="verb">http://portablelistings.net/profiles/core/1.0/</spanx> and it is a reserved string.
            </t>
        </section>
        
        <section title="Additional Link Relation Types" anchor="additional-link-relation-types">
            <t>
                This specification defines a number of additional link relation types that can used to further describe audiovisual content as defined in the EBU Metadata Reference Data and Classification Schemes <xref target="EBU-REFERENCEDATA"/>.
            </t>
            <section anchor="promotional-information" title="&quot;promotional-information&quot;">
                <t>
                    The "promotional-information" link relation can be used to refer to something devised to publicize or advertise a resource or associated product about the link's context.
                </t>
                <t>
                    Multiple products can be indicated through the use of multiple "promotional-information" link relations.
                </t>
            </section>
            <section anchor="supplemental-information" title="&quot;supplemental-information&quot;">
                <t>
                    The "supplemental-information" link relation can be used to refer to a resource containing supplemental information about the link's context.
                    Supplemental information broadly refers to any type of information, content, or service relating to the link's context.
                    For example supplemental information for a television programme may include related articles, close-ups, replays, outtakes, galleries, commercial tie-ins, games, sound clips, video clips, product information.
                </t>
                <t>
                    Multiple pieces of supplemental information can be indicated through the use of multiple "supplemental-information" link relations.
                </t>
            </section>
            <section anchor="review" title="&quot;review&quot;">
                <t>
                    The "review" link relation can be used to refer to a critical article or report concerning the link's context, e.g. a critique or an evaluation.
                </t>
                <t>
                    Multiple reviews can be indicated through the use of multiple "review" link relations.
                </t>
            </section>
            <section anchor="highlights" title="&quot;highlights&quot;">
                <t>
                    The "highlights" link relation can be used to refer to a resource that represents striking, noticeable aspects of the link's context.
                </t>
                <t>
                    Multiple highlights can be indicated through the use of multiple "highlights" link relations.
                </t>
            </section>
            <section anchor="screenplay" title="&quot;screenplay&quot;">
                <t>
                    The "screenplay" link relation can be used to refer to a resource that represents the text specifying content of a production or performance, used as a guide to the link's context.
                    A screenplay MAY include character and setting profiles, production directives (audio, lighting, scenery, camera moves), as well as dialogue to be recited by talent.
                </t>
                <t>
                    Multiple screenplays can be indicated through the use of multiple "screenplay" link relations.
                </t>
            </section>
            <section anchor="transcript" title="&quot;transcript&quot;">
                <t>
                    The "transcript" link relation can be used to refer to an exact copy or reproduction (e.g. of a dialog or interview) of the link's context.
                </t>
                <t>
                    Multiple transcripts can be indicated through the use of multiple "transcript" link relations.
                </t>
            </section>
            <section anchor="shot" title="&quot;shot&quot;">
                <t>
                    The "shot" link relation can be used to refer to a resource that represents a shot, for example indexed against time or frame count.
                    A shot MAY also be expressed using a Segment (see <xref target="segment-type"/>) and referenced from a Version or Segment Group with the <spanx style="verb">segments</spanx> relationship.
                </t>
                <t>
                    Multiple shots can be indicated through the use of multiple "shot" link relations.
                </t>
            </section>
            <section anchor="shot-list" title="&quot;shot-list&quot;">
                <t>
                    The "shot-list" link relation can be used to refer to a resource that represents freeform textual listing of shots, for example indexed against time or frame count.
                    A shot list MAY also be expressed using a Segment Group (see <xref target="segment-group-type"/>) and referenced from a Version with the <spanx style="verb">segments</spanx> relationship.
                </t>
                <t>
                    Multiple shot lists can be indicated through the use of multiple "shot-list" link relations.
                </t>
            </section>
            <section anchor="edit-decision-list" title="&quot;edit-decision-list&quot;">
                <t>
                    The "edit-decision-list" link relation can be used to refer to a resource that represents an Edit Decision List (EDL) expressed as handwritten or computer-generated compilation of all edits (marked by their time code in points and out points) to be executed in a video production.
                </t>
                <t>
                    Multiple edit decision lists can be indicated through the use of multiple "edit-decision-list" link relations.
                </t>
            </section>
            <section anchor="rundown" title="&quot;rundown&quot;">
                <t>
                    The "rundown" link relation can be used to refer to a resource that represents a rundown.
                    A rundown sheet is a simple review of the script for the with directions for the various crew members.
                    It can also be breaking the show into "blocks" split by commercial breaks and it lists all the different pieces of the show and what should happen during these pieces (e.g. a graphic will display, or a video tape will be played).
                    This is useful for the crew so that they do not have to read through an entire script during production, they have the show in a simplified form.
                    A rundown can be used for playout.
                </t>
                <t>
                    Multiple rundown can be indicated through the use of multiple "rundown" link relations.
                </t>
            </section>
            <section anchor="dopesheet" title="&quot;dopesheet&quot;">
                <t>
                    The "dopesheet" link relation can be used to refer to a resource that represents an exposure sheet which allows an animator to organize his thinking and give instructions to the cameraman on how the animation is to be shot.
                </t>
                <t>
                    Multiple expoure sheets can be indicated through the use of multiple "dopesheet" link relations.
                </t>
            </section>
            <section anchor="trailer" title="&quot;trailer&quot;">
                <t>
                    The "trailer" link relation can be used to refer to a trailer of the link's context.
                </t>
                <t>
                    Multiple trailers can be indicated through the use of multiple "trailer" link relations.
                </t>
            </section>
            <section anchor="simulcast" title="&quot;simulcast&quot;">
                <t>
                    The "simulcast" link relation can be used to refer to an alternative version of the link's context that is being shown simultaneously with the link's context.
                </t>
                <t>
                    Multiple simulcasts can be indicated through the use of multiple "simulcast" link relations.
                </t>
            </section>
            <section anchor="ondemand" title="&quot;ondemand&quot;">
                <t>
                    The "ondemand" link relation can be used to refer to an alternative version of the link's context that is available for consumption on demand, e.g. a link to a content
                    download descriptor, or a deep link to a page in a content provider's application.
                </t>
                <t>
                    Multiple ondemands can be indicated through the use of multiple "ondemand" link relations.
                </t>
            </section>
            <section anchor="catchup" title="&quot;catchup&quot;">
                <t>
                    The "catchup" link relation can be used to refer to an alternative version of the link's context that is available for consumption on demand from a catch-up TV service, e.g. a link to a content
                    download descriptor, or a deep link to a page in a content provider's application.
                </t>
                <t>
                    Multiple catchups can be indicated through the use of multiple "catchup" link relations.
                </t>
            </section>
            <section anchor="recommendation" title="&quot;recommendation&quot;">
                <t>
                    The "recommendation" link relation can be used to refer to a resource recommended by the provider of
                    the link's context. The service provider considers there to be similarities between
                    the link's context resource and the referenced resource. Example: This could
                    provide access to previous or next episodes or to all episodes (the parent series as a
                    whole). Suggestion to record a programme which the broadcaster recommends because of
                    what the user is watching. It could also point to a Web site proposing related programmes
                    &apos;recommended&apos; by the service provider. A recommendation can be used to
                    suggest content or services or services bundles with a similar subject.
                </t>
                <t>
                    Multiple recommendations can be indicated through the use of multiple "recommendation" link relations.
                </t>
            </section>
            <section anchor="insertion-points" title="&quot;insertion-points&quot;">
                <t>
                    The "insertion-points" link relation can be used to refer to a list of advert insertion points related to the link's context.
                </t>
                <t>
                    Multiple list of insertion-points can be indicated through the use of multiple "insertion-points" link relations.
                </t>
            </section>
            <section anchor="advert" title="&quot;advert&quot;">
                <t>
                    The "advert" link relation can be used to refer to an advert for a product or service featured in the link's context.
                </t>
                <t>
                    Multiple adverts can be indicated through the use of multiple "advert" link relations.
                </t>
            </section>
            <section anchor="telescoped-advert" title="&quot;telescoped-advert&quot;">
                <t>
                    The "telescoped-advert" link relation can be used to refer to a telescoped advert for a product or service featured in the link's context, e.g. target TV ads to individual households based on viewing and buying habits.
                </t>
                <t>
                    Multiple telescoped adverts can be indicated through the use of multiple "telescoped-advert" link relations.
                </t>
            </section>
            <section anchor="speedbump" title="&quot;speedbump&quot;">
                <t>
                    The "speedbump" link relation can be used to refer to superimposed related or unrelated content about a product or service featured in the link's context
                </t>
                <t>
                    Multiple speedbumps can be indicated through the use of multiple "speedbump" link relations.
                </t>
            </section>
            <section anchor="product-purchase" title="&quot;product-purchase&quot;">
                <t>
                    The "product-purchase" link relation can be used to refer to a product or service directly linked to the link's context, which can be purchased directly from this linked resource.
                    Example: The user is watching a film containing a desirable product or service (The
                    recipe book from a cookery series for instance). If the user indicates interest in that
                    product they are taken to a web page (or interactive application) which is able to
                    fulfil their purchasing requirement.
                </t>
                <t>
                    Multiple purchaseable products can be indicated through the use of multiple "product-purchase" link relations.
                </t>
            </section>
            <section anchor="recap" title="&quot;recap&quot;">
                <t>
                    The "recap" link relation can be used to refer to a text or AV recap of the link's context.
                    Example: The user can chose to read/watch a recap if they have missed a previous episode
                    or forgotten the thread of the series.
                </t>
                <t>
                    Multiple recaps can be indicated through the use of multiple "recap" link relations.
                </t>
            </section>
            <section anchor="making-of" title="&quot;making-of&quot;">
                <t>
                    The "making-of" link relation can be used to refer to the making-of of the link's context.
                    Example: &quot;The user, if interested can view the background to how the
                    programme was made&quot;.
                </t>
                <t>
                    Multiple pieces of background information can be indicated through the use of multiple "making-of" link relations.
                </t>
            </section>
            <!-- TODO - Add "Package Main Content" and rest of packaging model for wholesale of content -->
            <section anchor="content-package" title="&quot;content-package&quot;">
                <t>
                    The "content-package" link relation can be used to refer to a content package associated to the link's context.
                </t>
                <t>
                    Multiple content packages can be indicated through the use of multiple "content-package" link relations.
                </t>
            </section>
            <section anchor="best-of" title="&quot;best-of&quot;">
                <t>
                    The "best-of" link relation can be used to refer to a resource collecting best-of selections from the link's context.
                </t>
                <t>
                    Multiple resources collecting best-of selections can be indicated through the use of multiple "best-of" link relations.
                </t>
            </section>
            <section anchor="extract" title="&quot;extract&quot;">
                <t>
                    The "extract" link relation can be used to refer to a resource representing an extract of the link's context.
                </t>
                <t>
                    Multiple extracts can be indicated through the use of multiple "extract" link relations.
                </t>
            </section>
        </section>

        <section title="Object Types" anchor="object-types">
        <!-- TODO
                -> fix story about \r and \n escaping other unicode chars - take text from google json style guidelines - perhaps move this text to Person/Contact/PoCo legacy part
           -->
        <t>
            The following sections describe the object structure that can be used to represent a piece of audiovisual content metadata and any related piece of information.
            Each object is provided with a general description and definitions of its Singular and Plural fields as well as any Singular and Plural Relationships.
            Any additional requirement or restriction on the object, fields, values and relationships is also outlined.
            The object types defined within this profile are referenced in CAPITAL letters in the next sections (e.g. PROGRAMME_GROUP).
            While the actual object type specified in the <spanx style="verb">objectType</spanx> field MUST BE expressed in lowercase and multiple words have been separated by '_' (underscore) (e.g. ProgrammeGroup became programme_group).
        </t>
        <!--
        -> Entry vs. Content - EBU Core vocabulary mainly represents the metadata about the content (i.e. metadata about the content) rather than information about the Entry itself (i.e. meta-metadata)
        -> content / atom:content might be several "levels down" in the EBU COre model - that's why we do not put it into entry level bare bone set of properties
        -->
        <!--
            TODO - The following are more commissioning/pre-prod/production: Item, Shot, Element, Scene, Project, Framework, Pilot, Trailer
         --->
        <t>
          The following object types hierarchy has been defined as integral part of the core profile:
          <list style="empty">
            <t><xref target="entry-type">Entry</xref>
                <list style="empty">
                      <t><xref target="category-type">Category</xref>
                      </t>
                      <t><xref target="content-type">Content</xref>
                        <list style="empty">
                            <t><xref target="programme-type">Programme</xref>
                                <list style="empty">
                                    <t><xref target="programme-group-type">Programme Group</xref>
                                        <list style="empty">
                                            <t><xref target="brand-type">Brand</xref>
                                            </t>
                                            <t><xref target="series-type">Series</xref>
                                            </t>
                                        </list>
                                    </t>
                                    <t><xref target="programme-item-type">Programme Item</xref>
                                        <list style="empty">
                                            <t><xref target="episode-type">Episode</xref>
                                            </t>
                                            <t><xref target="clip-type">Clip</xref>
                                            </t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                            <t><xref target="version-type">Version</xref>
                            </t>
                            <t><xref target="service-type">Service</xref>
                            </t>
                            <t><xref target="programme-publication-type">Programme Publication</xref>
                                <list style="empty">
                                    <t><xref target="schedule-event-type">Schedule Event</xref>
                                    </t>
                                    <t><xref target="ondemand-type">Ondemand</xref>
                                    </t>
                                </list>
                            </t>
                            <t><xref target="schedule-type">Schedule</xref>
                            </t>
                            <t><xref target="catalogue-type">Catalogue</xref>
                            </t>
                            <t><xref target="application-type">Application</xref>
                            </t>
                            <t><xref target="application-build-type">Application Build</xref>
                            </t>
                            <t><xref target="application-publication-type">Application Publication</xref>
                            </t>
                            <t><xref target="application-gallery-type">Application Gallery</xref>
                            </t>
                            <t><xref target="mediaresource-type">Media Resource</xref>
                                <list style="empty">
                                    <t><xref target="mediagroup-type">Media Group</xref>
                                    </t>
                                </list>
                            </t>
                            <t><xref target="segment-type">Segment</xref>
                                <list style="empty">
                                    <t><xref target="segment-group-type">Segment Group</xref>
                                    </t>
                                </list>
                            </t>
                            <t><xref target="content-collection-type">Content Collection</xref>
                            </t>
                            <t><xref target="rights-type">Rights</xref>
                            </t>
                            <t><xref target="award-type">Award</xref>
                            </t>
                        </list>
                    </t>
                    <t><xref target="agent-type">Agent</xref>
                        <list style="empty">
                            <t><xref target="person-type">Person</xref>
                            </t>
                            <t><xref target="organisation-type">Organisation</xref>
                            </t>
                            <t><xref target="group-type">Group</xref>
                            </t>
                        </list>
                    </t>
                </list>
            </t>
          </list>
        </t>

        <!--
            TODO:
                -> perhaps add list/summary of all types "valid canonical values" for objectType defined by profile
        -->

        <section title="Entry" anchor="entry-type">
            <t>
                <!--
                 TODO
                 -> check atomic object type for real-world value chain if not 'programme' instead - and be ready to defend why not
                 -->
                Entry it is the atomic object type of this specification and it is at the top of the object hierarchy and it is container of a set of common fields and relationships applicable to other object types further defined.
                The fields list below is broad so that, for Service Providers that do support any of these fields, there is a standard field name or relationship available.
                It is recognised that not all Service Providers will be able to provide information for all supported fields.
            </t>
            
            <section title="Fields" anchor="entry-type-fields">
            
            <!-- TODO
             -> perhaps add clarification that by using "tags" field (i.e. folksonomies) and links combination a long way in descriptive relationship could be obtained
             -> clarify metadata about the resource described by the Entry or metadata about the Entry
             -->
                <t>
                    <list style="hanging">
                        <!-- Singular fields -->
                        <t hangText="id: (STRING)">
                            REQUIRED. Unique identifier for the Entry record.
                            Each Entry returned MUST include a non-empty <spanx style="verb">id</spanx> value.
                            If a metadata publishing party is defined as per a non-empty <spanx style="verb">metadataPublisher</spanx> relationship, this identifier MUST be unique across the metadata publishing party's entire metadata set.
                            Otherwise this identifier MUST be unique across the Service Provider entire metadata set (see <xref target="auth"/>), but MAY not be unique across multiple Provider metadata sets.
                            It MUST be a stable ID that does not change when the same Entry is returned in subsequent requests.
                            Usually, an internal database ID will be the right choice here, e.g. <spanx style="verb">"12345"</spanx>.
                            Care MUST be taken when a Service Provider aggregates metadata from several metadata publishing parties in order to make sure that identifiers from different parties do not clash.
                            It is RECOMMENDED to use a globally unique identifier formed with a unique string prefix representing the metadata publishing party (e.g. the registered Internet Domain Name of the party) with the suffix of the metadata publishing party database ID.
                        </t>
                        <t hangText="displayName: (STRING)">
                            REQUIRED. The short name of this Entry, suitable for display to end-users (e.g. short title).
                            Each Entry returned MUST include a non-empty <spanx style="verb">displayName</spanx> value.
                            The value provided SHOULD be the primary textual field by which the Entry is normally displayed by the Service Provider when presenting it to end-users.
                            Unless otherwise specified, the displayName value is used for the purposes of sorting and filtering.
                        </t>
                        <t hangText="objectType: (ENUM)">
                            The object type of the Entry record. A profile defines the possible allowed Canonical Values for the <spanx style="verb">objectType</spanx> field (see <xref target="listings-format" />).
                            Different Entries requested by a Consumer can have a different object type. This specification reserves the <spanx style="verb">entry</spanx> value for referring to object types of Entry, and by definition an Entry without a <spanx style="verb">objectType</spanx> field or with a <spanx style="verb">objectType</spanx> value equal to <spanx style="verb">null</spanx> it is assumed to be of object type Entry.
                            The list of valid Canonical Values for this field consists of the list of lowercased object type names defined in <xref target="object-types"/>.
                        </t>
                        <t hangText="published: (TIMESTAMP)">
                            The date the metadata Entry record was first added to the user's metadata set or database (i.e. the creation date of the Entry). This field MAY also be associated with the first availability of the Entry.
                            The value MUST be a valid TIMESTAMP (e.g. <spanx style="verb">2008-01-23T04:56:22Z</spanx>).
                        </t>
                        <t hangText="updated: (TIMESTAMP)">
                            The most recent date the details of the Entry record were updated (i.e. the modified date of the Entry).
                            The value MUST be a valid TIMESTAMP (e.g. <spanx style="verb">2008-01-23T04:56:22Z</spanx>).
                            If the Entry has never been modified since its initial creation, the value MUST be the same as the value of <spanx style="verb">updated</spanx>.
                            Note the <spanx style="verb">updatedSince</spanx> and the <spanx style="verb">updatedUntil</spanx> Query Parameters described in <xref target="query-params" /> can be used to select only Entries whose <spanx style="verb">updated</spanx> value is equal to or more recent than a given TIMESTAMP or equal to or older than a given TIMESTAMP respectively. This enables Consumers to repeatedly access a metadata Entry and only request newly added or updated Entries since the last access time.
                        </t>
                    </list>
                </t>
                
            </section>
            
            <section title="Links" anchor="entry-type-links">
                <t>
                    <list style="hanging">
                        <t hangText="metadataRights: (LINK)">
                            The copyright license terms under which the Entry content metadata is provided.
                            If the field is set, the <spanx style="verb">rel</spanx> sub-field SHALL be <spanx style="verb">license</spanx>.
                        </t>
                        <t hangText="metadataSource: (LINK)">
                            A standard source from which the Entry metadata record was generated from as defined by section 4.2.11 of <xref target="RFC4287" /> using the least minimum number of fields.
                            This enables Providers to simply represent aggregation of Entries.
                            The source field is expressed using the LINK construct with the following differences:
                            <list style="hanging">
                                <t hangText="href: (IRI)">
                                    REQUIRED. The IRI of the source MUST BE a valid Initial Identifier suitable for discovery of the source Portable Listings API Provider endpoint from where the metadata Entry was derived from as explained in <xref target="discovery"/>.
                                </t>
                                <t hangText="rel: (CONSTANT)">
                                    The rel value MUST BE the "via" relation type as defined in section 6.2.2. of <xref target="RFC5988" />.
                                    If this property is omitted or null it MUST BE processed as if the value was the string "via".
                                </t>
                                <t hangText="updated: (TIMESTAMP)">
                                    If available, the most recent date the details of the source was updated (i.e. the modified date of the source). The value MUST be a valid TIMESTAMP (e.g. <spanx style="verb">2010-01-12T07:56:22Z</spanx>).
                                </t>
                            </list>
                        </t>
                        <t hangText="aliases: [LINK]">
                            Additional or alternative identifiers for an Entry expressed as IRI.
                        </t>
                        <t hangText="links: [LINK]">
                            An Entry MAY have associated one ore more links to external Web resources.
                            A Provider SHOULD NOT use the links element to express relationships by-reference as this complicates processing by the Consumer.
                        </t>
                    </list>
                </t>
            </section>
                    
            <section title="Relationships" anchor="entry-type-reationships">
                <t>
                    <list style="hanging">
                        <t hangText="metadataPublisher: (AGENT)">
                            The metadata publishing party responsible for the metadata instances as served by a Service Provider.
                            If set, the <spanx style="verb">rel</spanx> sub-field SHALL be <spanx style="verb">author</spanx>.
                            If not set, the metadata publishing party is left undefined.
                        </t>
                        <t hangText="parent: (ENTRY)">
                            Relates a piece of content to another piece of content constituting it.
                            This relationship SHOULD BE used to access the parent Entries in Collections, Programme Groups, Series and so on.
                            The following fields are refined for the parent relationship:
                            <list style="hanging">
                                <t hangText="rel: (CONSTANT)">
                                    The rel value MUST BE the "up" relation type as defined in section 6.2.2. of <xref target="RFC5988" />.
                                    If this property is omitted or null it MUST BE processed as if the value was the string "up".
                                </t>
                            </list>
                        </t>
                        <t hangText="peers: [ENTRY]">
                            Relates a piece of content to other pieces of content which are peers within collection (predecessor/successor).
                            This relationship SHOULD BE used to access the previous and next Entries in Collections, Programme Groups, Series, Episodes (e.g. previous episode, next episode).
                            The following fields are refined for the parent relationship:
                            <list style="hanging">
                                <t hangText="rel: (CONSTANT)">
                                    The rel value MUST BE the "prev" relation type as defined in section 6.2.2. of <xref target="RFC5988" /> when referring to a previous Entry in a list or collection.
                                    The rel value MUST BE the "next" relation type as defined in section 6.2.2. of <xref target="RFC5988" /> when referring to a next Entry in a list or collection.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
                    
        </section>
            
        <section title="Category" anchor="category-type">
            <t>
                The Category object type extends the basic type ENTRY and it represents a user-facing category.
            </t>
            <section title="Fields" anchor="category-type-fields">
                <t>
                    <list style="hanging">
                        <t hangText="term: (ENUM OR IRI)">
                            A link or code to or within a classification scheme.
                            The value SHOULD BE selected from a standard list of values.
                        </t>
                        <t hangText="scheme: (IRI)">
                            An optional fully qualified IRI of the term scheme.
                        </t>
                        <t hangText="adult: (BOOLEAN)">
                            A flag to indicate contents of this category contain adult material.
                        </t>
                    </list>
                </t>
            </section>
            
            <section title="Relationships" anchor="category-type-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="subCategories: [CATEGORY]">
                            The list of sub-categories. Categories MAY be grouped hierarchically.
                            <list style="hanging">
                                <t hangText="rel: (CONSTANT)">
                                    The rel value MUST BE the "item" relation type as defined in <xref target="RFC6573" /> when referring to a Category part of a hierarchical collection of categories.
                                    The rel value MUST BE the "collection" relation type as defined in <xref target="RFC6573" /> when referring to a Category representing a hierarchical collection categories.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
        </section>
                    
        <section title="Content" anchor="content-type">
            <t>
                <!--
                    TODO
                    -> check atomic object type for real-world value chain if not 'programme' instead - and be ready to defend why not
                    -->
                The Content object type extends the basic type ENTRY and it represents an individual piece of audiovisual content metadata returned by a Service Provider.
                For example, the <spanx style="verb">content</spanx> object type MAY be used to describe an abstract programme idea or concept created during the planning process, a generic editorial object such as a dope sheet, a script, a report etc.
                More in general the type MAY be used to describe any other object which is not explicitly contemplated in the core profile (e.g. lenses, camera etc.).
            </t>
            <!--
                <t>
                For efficiency and readability, any sub-type of Content MUST use the <spanx style="verb">title</spanx>, <spanx style="verb">subtitle</spanx>,
                <spanx style="verb">summary</spanx>, <spanx style="verb">synopsis</spanx> and other fields and relationships inherited to specify the specific object type specific fields and relationships (e.g. Series title is represented with a <spanx style="verb">title</spanx> field inside a Series object type).
                 </t>
            -->
                
            <!-- TODO
                -> perhaps add clarification that by using "tags" field (i.e. folksonomies) and links combination a long way in descriptive relationship could be obtained
                -> clarify metadata about the resource described by the Entry or metadata about the Entry
            -->

            <section title="Fields" anchor="content-type-fields">
                <t>
                    <list style="hanging">
                        <t hangText="title: (STRING or HTML)">
                            The main name of this piece of content.
                            The title value provided SHALL differ from the <spanx style="verb">displayName</spanx>.
                        </t>
                        <t hangText="alternativeTitle: [COMPLEX]">
                            An alternative name of the piece of content other than the information provided with the <spanx style="verb">displayName</spanx>, <spanx style="verb">title</spanx> and <spanx style="verb">subtitle</spanx> fields.
                            <list style="hanging">
                                <t hangText="type: (ENUM)">
                                    The type of field SHOULD BE selected from the following list: <spanx style="verb">secondary</spanx>, <spanx style="verb">subtitle</spanx>, <spanx style="verb">alternativeSecondary</spanx>, <spanx style="verb">original</spanx>, <spanx style="verb">artWorkOriginal</spanx>, <spanx style="verb">pledged</spanx>, <spanx style="verb">working</spanx>, <spanx style="verb">alternativeWorking</spanx>, <spanx style="verb">long</spanx>, <spanx style="verb">full</spanx>, <spanx style="verb">abridged</spanx>, <spanx style="verb">transmission</spanx>, <spanx style="verb">international</spanx>, <spanx style="verb">translation</spanx>, <spanx style="verb">pseudo</spanx>, <spanx style="verb">ingest</spanx>.
                                    The <spanx style="verb">main</spanx>, <spanx style="verb">published</spanx>, <spanx style="verb">short</spanx> and <spanx style="verb">version</spanx> values SHOULD NOT be used as this complicates processing by the Consumer.
                                </t>
                                <t hangText="value: (STRING or HTML)">
                                    The alternative name text.
                                </t>
                            </list>
                        </t>
                        <t hangText="synopsis: (STRING or HTML)">
                            A brief or condensed statement giving a general view about the piece of content e.g. a brief summary of the plot of a novel, motion picture, play, etc.
                            This is being referred as short synopsis.
                        </t>
                        <t hangText="description: [COMPLEX]">
                            An extended textual description of the piece of content other than the information provided with the <spanx style="verb">synopsis</spanx> field.
                            The extended description MAY also consist of outlines, lists, bullet points, edit decision lists, indexes and have references to external media and graphical material.
                            <list style="hanging">
                                <t hangText="type: (ENUM)">
                                    The type of field SHOULD BE selected from the following list: <spanx style="verb">mediumSynopsis</spanx>, <spanx style="verb">longSynopsis</spanx>, <spanx style="verb">summary</spanx>, <spanx style="verb">annotation</spanx>, <spanx style="verb">annotationSynopsis</spanx>, <spanx style="verb">abstract</spanx>, <spanx style="verb">anecdotalCommentsAndReflections</spanx>, <spanx style="verb">theme</spanx>, <spanx style="verb">purpose</spanx>, <spanx style="verb">outline</spanx>, <spanx style="verb">cueWords</spanx>, <spanx style="verb">cueInWords</spanx>, <spanx style="verb">cueOutWords</spanx>, <spanx style="verb">process</spanx>, <spanx style="verb">assessment</spanx>, <spanx style="verb">editoralComments</spanx>, <spanx style="verb">keyPoints</spanx>, <spanx style="verb">shotDescription</spanx>, <spanx style="verb">creditLine</spanx>, <spanx style="verb">instructions</spanx>, <spanx style="verb">modelInformation</spanx>, <spanx style="verb">artwork</spanx>, <spanx style="verb">event</spanx>, <spanx style="verb">releaseInformation</spanx>, <spanx style="verb">intention</spanx>, <spanx style="verb">shotComment</spanx>, <spanx style="verb">citation</spanx>.
                                    The <spanx style="verb">synopsis</spanx> value SHOULD NOT be used as this complicates processing by the Consumer.
                                </t>
                                <t hangText="value: (STRING or HTML)">
                                    The extended description text.
                                </t>
                            </list>
                        </t>
                        <!-- add spatial coverage http://geojson.org/geojson-spec.html -->
                        <!-- add temporal coverage see DCMI Period -->
                        <t hangText="created: (TIMESTAMP or PERIOD)">
                            The creation date for a particular version or rendition of the piece of content across its life cycle.
                        </t>
                        <t hangText="issued: (TIMESTAMP or PERIOD)">
                            The date of formal issuance (e.g. publication) of the piece of content.
                        </t>
                        <t hangText="modified: (TIMESTAMP or PERIOD)">
                            The date when the piece of content was last modified.
                        </t>
                        <t hangText="digitised: (TIMESTAMP or PERIOD)">
                            The date when the piece of content was digitised.
                        </t>
                        <t hangText="released: (TIMESTAMP or PERIOD)">
                            The date when the piece of content was released.
                        </t>
                        <t hangText="copyrighted: (TIMESTAMP or PERIOD)">
                            The date when the piece of content was copyrighted.
                        </t>
                        <t hangText="productionDate: (YEAR or TIME)">
                            The date when the piece of content was produced. The year SHALL be specified; month and day number MAY optionally be provided additionally.
                            A time point SHALL NOT be specified.
                        </t>
                        <t hangText="alternativeDate: [COMPLEX]">
                            An alternative date of the piece of content.
                            <list style="hanging">
                                <t hangText="type: (ENUM)">
                                    The type of field SHOULD BE selected from a standard list of values (e.g. 'accepted', 'submitted').
                                    The <spanx style="verb">created</spanx>, <spanx style="verb">issued</spanx>,  <spanx style="verb">modified</spanx>, <spanx style="verb">digitised</spanx>,  <spanx style="verb">released</spanx>,  <spanx style="verb">copyrighted</spanx> and <spanx style="verb">production</spanx> values SHOULD NOT be used as this complicates processing by the Consumer.
                                    Note that value <spanx style="verb">updated</spanx> and <spanx style="verb">published</spanx> values when specified will always refer to the actual piece of content rather than the Entry metadata (see <xref target="entry-type"/>).
                                </t>
                                <t hangText="value: (TIMESTAMP or PERIOD)">
                                    The alternative date.
                                </t>
                            </list>
                        </t>
                        <t hangText="tags: [STRING]">
                            A user-defined category or label for the piece of content, e.g. "coolshow" or "web20".
                            These values SHOULD be case-insensitive, and there SHOULD NOT be multiple tags provided for a given Entry that differ only in case.
                            Note that this field is a Plural Simple Field, meaning each instance consists only of a string value.
                        </t>
                        <t hangText="keywords: [STRING]">
                            A list of keywords and phrases assigned by the Provider to the piece of content, e.g. "sports" or "live".
                            These values SHOULD be case-insensitive, and there SHOULD NOT be multiple keywords provided for a given Entry that differ only in case.
                            Note that this field is a Plural Simple Field, meaning each instance consists only of a string value.
                        </t>
                        <t hangText="genre: [COMPLEX]">
                            The genre categorising the piece of content other than <spanx style="verb">category</spanx> and <spanx style="verb">keywords</spanx>.
                            <list style="hanging">
                                <t hangText="value: (ENUM or IRI)">
                                    The value SHOULD BE selected from a standard list of values such as the EBU Content Genre, Intention or the TV-Anytime Content Commercial, Content Alert or Content Origination types.
                                </t>
                            </list>
                        </t>
                        <t hangText="targetAudience: [COMPLEX]">
                            The target audience (demographic or guidance) categorising the piece of content other than <spanx style="verb">category</spanx> and <spanx style="verb">keywords</spanx>.
                            <list style="hanging">
                                <t hangText="value: (ENUM or IRI)">
                                    The value SHOULD BE selected from a standard list of values such as the EBU Intended Audience or Parent Guidance types.
                                </t>
                                <t hangText="guidanceText: (STRING or HTML)">
                                    A short human-readable editorial guidance message.
                                </t>
                                <t hangText="longGuidanceText: (STRING or HTML)">
                                    A long human-readable editorial guidance message.
                                </t>
                            </list>
                        </t>
                        <t hangText="adultContent: (BOOLEAN)">
                            A flag to indicate this the piece of content contains adult content (if set to true).
                        </t>
                        <t hangText="childrenContent: (BOOLEAN)">
                            A flag to indicate this the piece of content is suitable for viewing by children (if set to true).
                        </t>
                        <t hangText="educationalContent: (BOOLEAN)">
                            A flag to indicate this the piece of content is primarly intended for educational purposes (if set to true).
                        </t>
                        <!-- target country - to add later with content packaing and publishing policies i.e. releases / packages -->
                        <t hangText="targetRegion: [COMPLEX]">
                            The geographic target audience categorising the piece of content other than <spanx style="verb">category</spanx> and <spanx style="verb">keywords</spanx>.
                            If no geographical targeting is provided, the piece of content is assumed to be applicable to all places, i.e. worldwide.
                            <list style="hanging">
                                <t hangText="value: (TERRITORY)">
                                    The target country and region for the rating.
                                </t>
                                <t hangText="exclusive: (BOOLEAN)">
                                    A flag to indicate that the piece of content is available only in the target place specified in the value sub-field.
                                    If the exclusive attribute is omitted or has the value false then the piece of content is editorially targeted at the target place specified in the value sub-field.
                                </t>
                            </list>
                        </t>
                        <t hangText="format: (ENUM or IRI)">
                            The editorial format categorising the piece of content other than <spanx style="verb">category</spanx> and <spanx style="verb">keywords</spanx>.
                            The value SHOULD BE selected from a standard list of values such as the EBU Editorial Format types.
                        </t>
                        <t hangText="source: [COMPLEX]">
                            Reference to the resources from which the piece of content is derived in whole or in part.
                            <list style="hanging">
                                <t hangText="type: (ENUM)">
                                    The type of field SHOULD BE selected from a standard list of values (e.g. 'sketches', 'book', 'novel').
                                </t>
                                <t hangText="value: (STRING or HTML)">
                                    The source textual description.
                                </t>
                            </list>
                        </t>
                        <t hangText="language: (LANGUAGE)">
                            The main production language of the piece of content. This is the language in which the content was originally created.
                        </t>
                        <t hangText="alternativeLanguage: [COMPLEX]">
                            Alternative languages of the content and their use.
                            <list style="hanging">
                                <t hangText="type: (ENUM)">
                                    The language purpose.
                                    The value SHOULD BE selected from the following list: <spanx style="verb">audio</spanx>, <spanx style="verb">mainDubbedLanguage</spanx>, <spanx style="verb">additionalOriginalLanguage</spanx>, <spanx style="verb">additionalDubbedLanguage</spanx>, <spanx style="verb">descriptiveVideoInformation</spanx>, <spanx style="verb">supplementalCommentary</spanx>, <spanx style="verb">directorCommentary</spanx>, <spanx style="verb">audioDescription</spanx>, <spanx style="verb">supplementaryAudioProgramme</spanx>, <spanx style="verb">educationalNotes</spanx>, <spanx style="verb">voiceOver</spanx>, <spanx style="verb">originalCommentary</spanx>, <spanx style="verb">dubbedCommentary</spanx>, <spanx style="verb">originalNarration</spanx>, <spanx style="verb">dubbedDialogue</spanx>, <spanx style="verb">dubbedNarration</spanx>, <spanx style="verb">interviewerLanguage</spanx>, <spanx style="verb">intervieweeLanguage</spanx>, <spanx style="verb">text</spanx>, <spanx style="verb">textDescription</spanx>, <spanx style="verb">transcript</spanx>, <spanx style="verb">caption</spanx>, <spanx style="verb">openCaption</spanx>, <spanx style="verb">closedCaption</spanx>, <spanx style="verb">supplemental</spanx>, <spanx style="verb">titles</spanx>, <spanx style="verb">subtitles</spanx>, <spanx style="verb">openSubtitles</spanx>, <spanx style="verb">closedSubtitles</spanx>, <spanx style="verb">songLyrics</spanx>, <spanx style="verb">signLanguage</spanx>, <spanx style="verb">dubbedSignLanguage</spanx>.
                                    The <spanx style="verb">main</spanx>, <spanx style="verb">production</spanx>, <spanx style="verb">original</spanx> and <spanx style="verb">mainOriginalLanguage</spanx> values SHOULD NOT be used as this complicates processing by the Consumer.
                                </t>
                                <t hangText="value: (LANGUAGE)">
                                    The alternative language value.
                                </t>
                            </list>
                        </t>
                        
                        <t hangText="productionCountry: [TERRITORY]">
                            The original country (or countries) where the piece of content was produced.
                            The values SHALL BE an <xref target="ISO3166"/> "alpha 2" country code.
                        </t>
                        <t hangText="location: [COMPLEX]">
                            Location information associated with the piece of content.
                            <list style="hanging">
                                <t hangText="type: (ENUM)">
                                    The type of field SHOULD BE selected from a standard list of values (e.g. 'filming', 'depicted').
                                    The <spanx style="verb">main</spanx> and <spanx style="verb">production</spanx> values SHOULD NOT be used as this complicates processing by the Consumer.
                                </t>
                                <t hangText="value: (PLACE or TERRITORY)">
                                    The actual geographical place or territory.
                                </t>
                                <t hangText="fictional: (BOOLEAN)">
                                    A Boolean value indicating whether the place is purely fictional.
                                </t>
                            </list>
                        </t>
                        
                        <t hangText="temporal: [COMPLEX]">
                            Temporal coverage information associated with the piece of content.
                            <list style="hanging">
                                <t hangText="type: (ENUM)">
                                    The type of field SHOULD BE selected from a standard list of values (e.g. 'filmingPeriod', 'depictedPeriod').
                                </t>
                                <t hangText="value: (PERIOD or YEAR)">
                                    The actual temporal coverage period or gregorian calendar year.
                                </t>
                                <t hangText="fictional: (BOOLEAN)">
                                    A Boolean value indicating whether the temporal period is purely fictional (e.g. 'year 2030').
                                </t>
                            </list>
                        </t>
                        
                        <!-- add policy here or to the version / location ?! -->
                        
                        <t hangText="contentVersion: (STRING or NUMBER)">
                            The version of the content.
                        </t>
                        
                        <t hangText="position: (NUMBER)">
                            The position of a particular piece of content within a container or collection (e.g. Collection, Programme, Programme Group, Series).
                        </t>
                    </list>
                </t>
            </section>
            
            <section title="Links" anchor="content-type-links">
                <t>
                    <list style="hanging">
                        <t hangText="thumbnails: [LINK]">
                            A list of thumbnail images or screen shots depicting the piece of content.
                        </t>
                    </list>
                </t>
                <t>
                    Any additional supporting material associated to the piece of content SHALL be specified using one more <spanx style="verb">links</spanx> link (see <xref target="entry-type-links"/>) with a relationship type of "supplemental-material".
                </t>
            </section>
            
            <section title="Relationships" anchor="content-type-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="creator: [AGENT]">
                            The creator of the piece of content.
                        </t>
                        <t hangText="publisher: [AGENT]">
                            The publisher of the piece of content.
                        </t>
                        <t hangText="contributor: [AGENT]">
                            Contributors to the piece of content.
                            The following fields are additionally defined for the contributor relationship:
                            <list style="hanging">
                                <t hangText="role: (ENUM or IRI)">
                                    REQUIRED. A Canonical Value representing the role played by the Target Entry as contributor (e.g. director, actor, producer).
                                    The value SHOULD BE selected from a standard list of values such as the European Broadcasting Union Role Codes <xref target="EBU-ROLE-CODES"/>.
                                </t>
                                <t hangText="roleLabel: (STRING)">
                                    A human-readable label or name associated to the <spanx style="verb">role</spanx> sub-field.
                                </t>
                                <t hangText="stageName: (STRING or HTML)">
                                    A human-readable label or name attributed to the person or organisation on stage (e.g. 'character name' or 'interviewer').
                                </t>
                            </list>
                        </t>
                        
                        <t hangText="category: [CATEGORY]">
                            One or more user-facing categories associated to the piece of content.
                        </t>
                        
                        <!-- rating person and vote/s from activity streams ? review too ? -->
                        
                        <t hangText="rights: [RIGHTS]">
                            Content rights information.
                            If the rights information is absent, no assumptions can be made about the status of these and other rights with respect to the piece of content.
                        </t>
                        
                        <t hangText="crossPromotions: [CONTENT]">
                            Relates a piece of content to other pieces of content which are cross-promotions (e.g. "if you liked this piece of content you may also like these other content items").
                            <list style="hanging">
                                <t hangText="rel: (ENUM)">
                                    The rel value SHALL BE the "recommendation" relation type as defined in <xref target="recommendation" />.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
        </section>


        <section title="Programme" anchor="programme-type">
            <t>
                The Programme object type extends the CONTENT object type and represents an editorially coherent piece of content.
                Defined as that which is created by a commissioning decision.
                For example, a TV/radio programme, movie or tune.
            </t>
            
            <section title="Fields" anchor="programme-type-fields">
                <t>
                    <list style="hanging">
                        <!-- possible additions: PID, clip -->
                        <t hangText="releaseCountry: [TERRITORY]">
                            The countries and regions where the programme has been released.
                        </t>
                        <t hangText="firstTransmissionDate: (TIMESTAMP)">
                            The first transmission or publication date and time.
                        </t>
                    </list>
                </t>
            </section>
            
            <section title="Relationships" anchor="programme-type-relationships">
                <t>
                    <list style="hanging">
                        <!-- possible additions: PID, clip -->
                        <!--
                         <t hangText="service: (SERVICE)">
                         Associate a Programme to a brand Service (e.g. regional service).
                         </t>
                         -->
                        <t hangText="ownership: (SERVICE)">
                            Associate a Programme to the owner Service (e.g. the commissioner, national broadcaster service, content owner).
                            In every metadata hierarchy only the top-level editorial object, whether a Brand, Series or Episode, must reference a owner Service.
                            Objects below the root node may override this, specifying a different owning Service.
                            <!--
                             In case there is not hierarchy of services defined, the service and ownership MAY refer to the same Service.
                             -->
                        </t>
                        <t hangText="clips: [CLIP]">
                            Associate a Programme to a clip (e.g. trailer, preview, interview).
                        </t>
                        <t hangText="awards: [AWARD]">
                            A list of awards or awards nominations for a programme.
                        </t>
                        <t hangText="firstTransmissionChannel: (SERVICE)">
                            The first transmission or publication service.
                        </t>
                        <t hangText="repeats: [SERVICE]">
                            Information about the publication history of the programme.
                            A repeated transmission or publication.
                            The following fields are additionally defined for the repeats relationship:
                            <list style="hanging">
                                <t hangText="date: (TIMESTAMP)">
                                    The repeat transmission or publication date and time.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
        </section>
     
                        
        <section title="Programme Group" anchor="programme-group-type">
            <t>
                The Programme Group object type extends the PROGRAMME object type and represents a collection of Programmes that are grouped together, which are not Series or Brand.
                A Programme Group can contain Programmes or other Programme Groups.
                The Programme Group object type is identified with the string PROGRAMME_GROUP.
                For example, a collection of programmes, mini-Series, compilation, serial, concept, show, theme etc.
            </t>
            <section title="Relationships" anchor="programme-group-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="programmes: [PROGRAMME]">
                            The list of Programmes inside the Programme Group (e.g. the list of Series part of a Brand or Episodes part of a Series).
                        </t>
                    </list>
                </t>
            </section>
        </section>
       
                            
        <section title="Brand" anchor="brand-type">
            <t>
                The Brand object type extends the PROGRAMME_GROUP object type and represents a collection of assets with a recognisable collective identity.
                A programme brand groups a collection of series and or episodes (e.g. 'American Idol').
            </t>
        </section>
            
        <section title="Series" anchor="series-type">
            <t>
                The Series object type extends the PROGRAMME_GROUP object type and represents a succession of programmes with a standard format.
                A series groups a collection of series and/or episodes (e.g. 'Rai Due X Factor 2010').
            </t>
        </section>

        <section title="Programme Item" anchor="programme-item-type">
            <t>
                The Programme Item object type extends the PROGRAMME object type and represents a programme that can have versions (e.g. an episode, a clip).
                The Programme Item object type is identified with the string PROGRAMME_ITEM.
            </t>
            <section title="Relationships" anchor="programme-item-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="versions: [VERSION]">
                            Different versions of a same episode or clip can exist.
                            The relationship type <spanx style="verb">canonical</spanx> SHALL be used to flag the so called "canonical" or preferred version.
                            No more than one version should be labelled as "canonical" because of the ambiguity this creates and this complicates processing by the Consumer.
                            
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Episode" anchor="episode-type">
            <t>
                The Episode object type extends the PROGRAMME_ITEM object type and represents an editorial concept which groups one or more versions.
                Often when talking about a television programme what it is really meant is an episode.
                An episode could be simply be part of a brand a so called pilot episode.
            </t>
        </section>
                        
        <section title="Clip" anchor="clip-type"><!-- -->
            <t>
                The Clip object type extends the PROGRAMME_ITEM object type and represents a short clip associated to a brand, a series or an episode.
                The Clip object type MAY also be used to represent online video clips generated by users.
            </t>
        </section>
      
        <section title="Version" anchor="version-type">
            <t>
                The Version object type extends the CONTENT object type and represents a specific edit or version of a programme item.
                While there could be different version types (e.g. different run length, different parental guidance, alternative viewing angles etc.) only one is marked as original.
            </t>
            <t>
                The addition of burned in accessibility features (e.g. hearing impaired, signed and dubbed audio described) to the video requires a separate editorial version from the original because these aspects of the presentation are generally not selectable by a user.
            </t>
            <t>
                However, when such accessibility features are expressed using multiple external tracks (audio, video, text etc) associated and syncronized to the main audio and video tracks (see <xref target="mediagroup-type"/>) such differences SHALL be represented by multiple publications of the same basic editorial version since the underlying editorial content is identical at scene level.
                The same applies to certain types of technical variation, such as video resolution. For example HD and SD variations SHALL be represented by separate publications of the same editorial Version.
            </t>
            
            <section title="Fields" anchor="version-fields">
                <t>
                    <list style="hanging">
                        <t hangText="duration: (NUMBER)">
                            The duration of a the Version in seconds. Please note that the published duration may be different (see <xref target="programme-publication-type"/>).
                        </t>
                        <t hangText="original: (BOOLEAN)">
                            A Boolean value indicating whether or not the Version is the original.
                            Service Providers MUST NOT mark more than one Version as original="true", and MAY choose not to mark any Version as original, if this information is not available.
                            For efficiency, Service Providers SHOULD NOT mark all non-original Versions with original="false", but should instead omit this sub-field for all non-original instances.
                        </t>
                    </list>
                </t>
            </section>
            
            <section title="Relationships" anchor="version-relationships">
                <t>
                    <list style="hanging">
                        <!-- add other EBU core format fields - see also TVA - aspect ratio, sound format etc. -->
                        <t hangText="events: [SCHEDULE_EVENT]">
                            The schedule events associated with a particular version.
                        </t>
                        <t hangText="availabilities: [ONDEMAND]">
                            The availabilities associated with a particular version when it is made available on-demand. <!-- or push to download -->
                        </t>
                        <t hangText="segments: [SEGMENT]">
                            The segments or segment groups associated with a particular version (e.g. bookmarks, highlights, preview, insertion points, shots, speech).
                        </t>
                    </list>
                </t>
            </section>
        </section>
        
        <section title="Service" anchor="service-type">
            <t>
                The Service object type extends the CONTENT object type and represents a publication outlet (e.g. a linear broadcast service, on-demand player service) or a content owning service (e.g. a service representing a commissioner or a service that manages any user-facing branding such as names, descriptive text and logos/images).
                A service is a collection of outlets which contain common material, but with some variations (e.g. by region).
                Hierarchies of services MAY be defined (e.g. radio, tv, online, mobile).
            </t>
            <section title="Fields" anchor="service-fields">
                <t>
                    <list style="hanging">
                        <!-- possible additions: geo coverage -->
                        <t hangText="serviceType: (ENUM)">
                            The service type SHOULD BE selected from the following list: <spanx style="verb">broadcast</spanx>, <spanx style="verb">virtual</spanx>, <spanx style="verb">iptv</spanx>, <spanx style="verb">ondemand</spanx>, <spanx style="verb">owning</spanx>.
                        </t>
                        <t hangText="entitlementType: (ENUM)">
                            The service entitlement type SHOULD BE selected from the following list: <spanx style="verb">free-to-view</spanx>, <spanx style="verb">subscription</spanx>, <spanx style="verb">rental</spanx>, <spanx style="verb">ownership</spanx>.
                        </t>
                        <t hangText="free: (BOOLEAN)">
                            A Boolean value indicating whether the access to the service is free. If the field is omitted it is assumed that the service is free-to-air (i.e. offered completely free of charge and without any access restrictions). For services that are not free-to-air this field shall be set to <spanx style="verb">false</spanx>.
                        </t>
                        <t hangText="locator: (IRI)">
                            A service locator per <xref target="DVB-URI"/> (e.g. dvb://233a.1041.10bf).
                        </t>
                        <t hangText="lcn: (NUMBER)">
                            The service Logical Channel Number (LCN).
                        </t>
                    </list>
                </t>
            </section>
            <section title="Links" anchor="service-links">
                <t>
                    <list style="hanging">
                        <t hangText="logo: (LINK)">
                            A logo or icon associated to the service.
                            <list style="hanging">
                                <t hangText="rel: (ENUM)">
                                    The rel value SHALL BE the "icon" relation type as defined in <xref target="RFC5988" />.
                                </t>
                            </list>
                        </t>
                        <t hangText="dog: (LINK)">
                            A Digital On screen Graphic (DOG) associated to the service.
                            <list style="hanging">
                                <t hangText="rel: (ENUM)">
                                    The rel value SHALL BE the "icon" relation type as defined in <xref target="RFC5988" />.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="service-relationship">
                <t>
                    <list style="hanging">
                        <t hangText="outlets: [SERVICE]">
                            Relates a Service to the Outlets that are contained within the Service.
                            An outlet represents a service which does not have variations.
                            For example, in the movie industry some movie publication or distribution ondemand outlets may be: on-air, online (payed, subscription, advertised), physical media (dvd, blu-ray, VHS), theatre (cinema), mobile.
                        </t>
                        <t hangText="ownership: (SERVICE)">
                            Relates a Service to the owner Service.
                        </t>
                        <t hangText="application: (APPLICATION)">
                            A reference to a media player or helper Application. A media player will be invoked to present all publications associated with an ondemand service.
                            An on-screen helper application MAY be used instead to help users to provision IPTV services and resolve issues.
                        </t>
                    </list>
                </t>
            </section>
        </section>
    
        <!-- potentially this class may be the base for contetn package too in supply chain/s e.g. itunes, sony bmg - see also DDEX -->
        <section title="Programme Publication" anchor="programme-publication-type">
            <t>
                The Programme Publication object type extends the CONTENT object type and represents an instance or publication event of a programm version.
                The Programme Publication object type is identified with the string PROGRAMME_PUBLICATION.
                A programme publication is associated with a service, and with a particular version of a programme.
                For example, a programme instance on a broadcast or on-demand service.
            </t>
            <t>
                Note that in order to guarantee the creation of a unqiue and disambiguating programme publication <spanx style="verb">id</spanx> field, the following information SHALL be combined:
                <list style="symbols">
                    <t>The metadata publishing party identifier (if defined).</t>
                    <t>The parent service identifier.</t>
                    <t>The programme version identifier.</t>
                    <t>The published start and end time values.</t>
                </list>
            </t>
            <section title="Fields" anchor="programme-publication-fields">
                <t>
                    <list style="hanging">
                        <t hangText="publishedDuration: (NUMBER)">
                            The published duration of the Programme version in seconds.
                            For schedule events, when all the time parameters are provided, the published duration MUST be equal to the difference between end time and start time.
                        </t>
                        <t hangText="entitlementType: [ENUM]">
                            The programme publication entitlement type SHOULD BE selected from the following list: <spanx style="verb">free-to-view</spanx>, <spanx style="verb">subscription</spanx>, <spanx style="verb">rental</spanx>, <spanx style="verb">ownership</spanx>.
                        </t>
                        <t hangText="free: (BOOLEAN)">
                            A Boolean value indicating whether the access to the programme version being broadcasted or made available on-demand is free. If the field is omitted it is assumed that the programme is free-to-air (i.e. offered completely free of charge and without any access restrictions). For programmes that are not free-to-air this field shall be set to <spanx style="verb">false</spanx>.
                        </t>
                        <!--
                        <t hangText="price: (COMPLEX)">
                            When the <spanx style="verb">free</spanx> flag is <spanx style="verb">false</spanx>, this field provides an indicative cost of a publication.
                            <list style="hanging">
                                <t hangText="currency: (ENUM or IRI)">
                                    The value SHOULD BE selected from a standard list of values such as the <xref target="ISO4217"/> currency code list.
                                </t>
                                <t hangText="amount: (NUMBER)">
                                    The indicative price.
                                </t>
                            </list>
                        </t>
                         -->
                        <t hangText="signed: (BOOLEAN)">
                            A Boolean value indicating whether the access to the programme version being broadcasted or made available on-demand has signing accessibility features.
                        </t>
                        <t hangText="subtitled: (BOOLEAN)">
                            A Boolean value indicating whether the access to the programme version being broadcasted or made available on-demand has subtitles.
                        </t>
                        <t hangText="subtitlesType: (ENUM)">
                            The subtitles type SHOULD BE selected from the following list: <spanx style="verb">closed</spanx> or <spanx style="verb">open</spanx>.
                            Closed subtitles can be displayed or hidden under the user's control.
                            Open subtitles are "burned in" to the video content.
                        </t>
                        <t hangText="audioDescribed: (BOOLEAN)">
                            A Boolean value indicating whether the access to the programme version being broadcasted or made available on-demand has audio description accessibility features.
                        </t>
                        <t hangText="hd: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted or made available on-demand is high definition.
                        </t>
                        <t hangText="3d: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted or made available on-demand is 3D.
                        </t>
                        <t hangText="uhd: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted or made available on-demand is ultra high definition.
                        </t>
                        <!-- audio-visual attributes - we denormalise some of the media resource attributes for convenience -->
                        <t hangText="audioConfiguration: (ENUM)">
                            The type of audio mix available in programme publication SHOULD BE selected from a standard list of values such as the EBU Audio Format Codes (e.g. 'no audio', 'mono', 'stereo', '2+1', 'surround', 'surround (7+1)').
                        </t>
                        <t hangText="audioBitrate: (NUMBER)">
                            The programme publication average audio bit rate.
                        </t>
                        <t hangText="minAudioBitrate: (NUMBER)">
                            The programme publication minimal audio bit rate.
                        </t>
                        <t hangText="maxAudioBitrate: (NUMBER)">
                            The programme publication maximum audio bit rate.
                        </t>
                        <t hangText="width: (NUMBER)">
                            This value is a hint about the programme publication video's intrinsic or ideal width in pixels.
                        </t>
                        <t hangText="height: (NUMBER)">
                            This value is a hint about the programme publication video's intrinsic or ideal height in pixels.
                        </t>
                        <t hangText="aspectRatio: (ENUM)">
                            The programme publication video aspect ratio SHOULD BE selected from a standard list of values such as the EBU Visual Aspect Ratio types.
                        </t>
                        <t hangText="colourMode: [ENUM]">
                            The programme publication video colour mode SHOULD BE selected from a standard list of values such as the EBU Colour Codes. Multiple video colours may be specified for the same publication (e.g. when film colorization is used to modernize or restore a video).
                        </t>
                        <t hangText="videoBitrate: (NUMBER)">
                            The programme publication average video bit rate.
                        </t>
                        <t hangText="minVideoBitrate: (NUMBER)">
                            The programme publication minimal video bit rate.
                        </t>
                        <t hangText="maxVideoBitrate: (NUMBER)">
                            The programme publication maximum video bit rate.
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="programme-publication-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="service: (SERVICE)">
                            A reference to the Service on which the programme instance will be broadcasted or made available on demand.
                        </t>
                        <t hangText="programme: (VERSION)">
                            A reference to the Programme version.
                        </t>
                        <t hangText="media: (MEDIA_RESOURCE)">
                            A reference to the programme version AudioVisual media resource.
                            <list style="hanging">
                                <t hangText="locator: (IRI or STRING)">
                                    The locator SHALL match the corresponding media resource locator field (see <xref target="mediaresource-type"/>).
                                    Note that this sub-field is solely provided as a shortcut reference to the underlying media asset.
                                </t>
                            </list>
                        </t>
                        <t hangText="alternativePublication: (PROGRAMME_PUBLICATION)">
                            A reference to one or more alternative publications (e.g. simulcast in HD, catchup, ondemand, recommendation etc.).
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Schedule Event" anchor="schedule-event-type">
            <t>
                The Schedule Event object type extends the PROGRAMME_PUBLICATION object type and represents a publication event of a single Programme version on a single service at particular time (e.g. news at 21:00 on specific service).
                Multiple schedule events can be grouped into a Schedule.
            </t>
            <section title="Fields" anchor="schedule-event-fields">
                <t>
                    <list style="hanging">
                        <t hangText="start: (TIMESTAMP)">
                            The published date and time at which the programme version broadcast will be starting.
                        </t>
                        <t hangText="end: (TIMESTAMP)">
                            The published date and time at which the programme version broadcast will be ending.
                        </t>
                        <t hangText="firstShowing: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted is a first showing.
                        </t>
                        <t hangText="lastShowing: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted is a last showing.
                        </t>
                        <t hangText="primaryShowing: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted is the primary or preferred showing.
                            Service Providers MUST NOT mark more than one schedule event as primaryShowing="true", and MAY choose not to mark any schedule event as primary, if this information is not available.
                            For efficiency, Service Providers SHOULD NOT mark all non-primary broadcast with primaryShowing="false", but should instead omit this sub-field for all non-primary broadcasts.
                        </t>
                        <t hangText="repeat: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted is a repeat.
                        </t>
                        <t hangText="live: (BOOLEAN)">
                            A Boolean value indicating whether the programme version being broadcasted is a live broadcast.
                        </t>
                        <t hangText="dummy: (BOOLEAN)">
                            A Boolean value indicating whether the broadcast represents a period of time when the service is off air.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Ondemand" anchor="ondemand-type">
            <t>
                The Ondemand object type extends the PROGRAMME_PUBLICATION object type and represents an on-demand publication event designating a window of availability of a single Programme version on a particular service between two dates (e.g. catch-up on yesterday night 20:00pm soap opera).
            </t>
            <section title="Fields" anchor="ondemand-fields">
                <t>
                    <list style="hanging">
                        <t hangText="startAvailability: (TIMESTAMP)">
                            The published date and time that the programme version will be available.
                            If not specified the programme version is assumed to be available.
                        </t>
                        <t hangText="endAvailability: (TIMESTAMP)">
                            The published date and time that the programme version will no longer be available.
                            If not specified the programme version is meant to be made available indefinitely.
                        </t>
                        <t hangText="firstAvailability: (BOOLEAN)">
                            A Boolean value indicating whether the programme version is made available for the first time.
                        </t>
                        <t hangText="lastAvailability: (BOOLEAN)">
                            A Boolean value indicating whether the programme version is made available for the last time.
                        </t>
                        <t hangText="expiryDate: (TIMESTAMP)">
                            The published date and time when the programme version expires or it is no longer available for viewing.
                        </t>
                        <t hangText="instantViewing: (BOOLEAN)">
                            A Boolean value indicating whether the programme version is for instant viewing.
                        </t>
                        <t hangText="deliveryMode: (ENUM)">
                            The on-demand publication delivery mode SHALL be selected from one of the following values: <spanx style="verb">unicastStream</spanx>, <spanx style="verb">download</spanx>, <spanx style="verb">progressiveDownload</spanx>.
                            A Provider MAY use any additional deliveryMode values as necessary.
                        </t>
                        <t hangText="catchup: (BOOLEAN)">
                            A Boolean value indicating whether the on-demand publication is catch-up.
                        </t>
                        <t hangText="archive: (BOOLEAN)">
                            A Boolean value indicating whether the on-demand publication is archive.
                        </t>
                    </list>
                </t>
            </section>
        </section>
            
        <section title="Schedule" anchor="schedule-type">
            <t>
                The Schedule object type extends the CONTENT object type and represents a group of schedule events from the same service (e.g. ZDF service schedule).
            </t>
            <t>
                Note that in order to guarantee the creation of a unqiue and disambiguating schedule <spanx style="verb">id</spanx> field, the following information SHALL be combined:
                <list style="symbols">
                    <t>The metadata publishing party identifier (if defined).</t>
                    <t>The parent service identifier.</t>
                    <t>The start and end period values.</t>
                </list>                
            </t>
            <section title="Fields" anchor="schedule-fields">
                <t>
                    <list style="hanging">
                        <t hangText="start: (TIMESTAMP)">
                            Start of the period covered by the schedule.
                        </t>
                        <t hangText="end: (TIMESTAMP)">
                            End of the period covered by the schedule.
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="schedule-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="service: (SERVICE)">
                            A reference to the Service on which the programmes will be broadcasted.
                        </t>
                        <t hangText="events: [SCHEDULE_EVENT]">
                            The list of schedule events inside the schedule.
                        </t>
                    </list>
                </t>
            </section>
        </section>
               
        <section title="Catalogue" anchor="catalogue-type">
            <t>
                The Catalogue object type extends the CONTENT object type and represents a group of on-demand publications from the same service (e.g. YouTube catalogue).
            </t>
            <t>
                Note that in order to guarantee the creation of a unqiue and disambiguating catalogue <spanx style="verb">id</spanx> field, the following information SHALL be combined:
                <list style="symbols">
                    <t>The metadata publishing party identifier (if defined).</t>
                    <t>The parent service identifier.</t>
                    <t>The catalogue type value.</t>
                </list>                
            </t>
            <section title="Fields" anchor="catalogue-fields">
                <t>
                    <list style="hanging">
                        <t hangText="catalogueType: (ENUM)">
                            The catalogue type SHOULD BE selected from a standard list of values (e.g. 'catchup tv', 'VOD', 'SVOD' etc.).
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="catalogue-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="service: (SERVICE)">
                            A reference to the Service on which the programmes will be made available on-demand.
                        </t>
                        <t hangText="titles: [ONDEMAND]">
                            The list of titles inside the catalogue.
                        </t>
                    </list>
                </t>
            </section>
        </section>
            
        <!-- TODO - add OpenSocial application model parts -->
        <section title="Application" anchor="application-type">
            <t>
                The Application object type extends the CONTENT object type and represents an abstract application (e.g. BBC iPlayer).
                The Application object type is identified with the string APPLICATION.
            </t>
            <section title="Fields" anchor="application-fields">
                <t>
                    <list style="hanging">
                        <t hangText="releaseCountry: [TERRITORY]">
                            The countries and regions where the application has been released.
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="application-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="ownership: (SERVICE)">
                            Associate an Application to the owner Service (e.g. BBC Applications).
                        </t>
                        <t hangText="builds: [APPLICATION_BUILD]">
                            Different builds of the same application can exist.
                            The relationship type <spanx style="verb">canonical</spanx> SHALL be used to flag the so called "canonical" or preferred build.
                            No more than one build should be labelled as "canonical" because of the ambiguity this creates and this complicates processing by the Consumer.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Application Build" anchor="application-build-type">
            <t>
                The Application Build object type extends the CONTENT object type and represents a specific build of an application (e.g. BBC iPlayer for iPad ver  2.0.4).
                For example a non-backwards-compatible change to the application would require modelling a different application build (e.g. BBC iPlayer for iPad with Retina).
                The Application object type is identified with the string APPLICATION_BUILD.
            </t>
            <section title="Fields" anchor="application-build-fields">
                <t>
                    <list style="hanging">
                        <t hangText="original: (BOOLEAN)">
                            A Boolean value indicating whether or not the application build is the original.
                            Service Providers MUST NOT mark more than one application build as original="true", and MAY choose not to mark any application build as original, if this information is not available.
                            For efficiency, Service Providers SHOULD NOT mark all non-original application builds with original="false", but should instead omit this sub-field for all non-original instances.
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="application-build-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="availabilities: [APPLICATION_PUBLICATION]">
                            The availabilities associated with a particular Application Build when it is made available for download and installation.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Application Publication" anchor="application-publication-type">
            <t>
                The Application object type extends the CONTENT object type and represents an instance or publication event of an Application.
                The application object type is identified with the string APPLICATION_PUBLICATION.
                An application is associated with a service, and with a particular application build.
            </t>
            <t>
                Note that in order to guarantee the creation of a unqiue and disambiguating application publication <spanx style="verb">id</spanx> field, the following information SHALL be combined:
                <list style="symbols">
                    <t>The metadata publishing party identifier (if defined).</t>
                    <t>The parent service identifier.</t>
                    <t>The application build identifier.</t>
                    <t>The published start and end time values.</t>
                </list>                
            </t>
            <section title="Fields" anchor="application-publication-fields">
                <t>
                    <list style="hanging">
                        <t hangText="startAvailability: (TIMESTAMP)">
                            The published date and time that the application build will be available.
                            If not specified the application build is assumed to be available.
                        </t>
                        <t hangText="endAvailability: (TIMESTAMP)">
                            The published date and time that the application build will no longer be available.
                            If not specified the application build is meant to be made available indefinitely.
                        </t>
                        <t hangText="entitlementType: [ENUM]">
                            The application build entitlement type SHOULD BE selected from the following list: <spanx style="verb">free-to-view</spanx>, <spanx style="verb">subscription</spanx>, <spanx style="verb">rental</spanx>, <spanx style="verb">ownership</spanx>.
                        </t>
                        <t hangText="free: (BOOLEAN)">
                            A Boolean value indicating whether the access to the application build is free. If the field is omitted it is assumed that the application build is free (i.e. offered completely free of charge and without any access restrictions). For application builds that are not free this field shall be set to <spanx style="verb">false</spanx>.
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="application-publication-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="service: (SERVICE)">
                            A reference to the Service on which the application instance will be made available to download and installation (e.g. Apple iTunes Store).
                        </t>
                        <t hangText="build: (APPLICATION_BUILD)">
                            A reference to the application build.
                        </t>
                        <t hangText="media: (MEDIA_RESOURCE)">
                            A reference to the media resource representing the application package.
                            <list style="hanging">
                                <t hangText="locator: (IRI or STRING)">
                                    The locator SHALL match the corresponding media resource locator field.
                                    Note that this sub-field is solely provided as a shortcut reference to the underlying media fragment.
                                </t>
                            </list>
                        </t>
                        <t hangText="alternativePublication: (APPLICATION_PUBLICATION)">
                            A reference to one or more alternative publications (e.g. Android version, recommendation etc.).
                        </t>
                    </list>
                </t>
            </section>
        </section>
             
        <section title="Application Gallery" anchor="application-gallery-type">
            <t>
                The Application Gallery object type extends the CONTENT object type and represents a group of application publications from the same service (e.g. iTunes AppStore).
            </t>
            <t>
                Note that in order to guarantee the creation of a unqiue and disambiguating application gallery <spanx style="verb">id</spanx> field, the following information SHALL be combined:
                <list style="symbols">
                    <t>The metadata publishing party identifier (if defined).</t>
                    <t>The parent service identifier.</t>
                </list>
            </t>
            <section title="Relationships" anchor="application-gallery-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="service: (SERVICE)">
                            A reference to the Service on which the applications will be made available to download and install.
                        </t>
                        <t hangText="applications: [APPLICATION_PUBLICATION]">
                            The list of applications inside the application gallery.
                        </t>
                    </list>
                </t>
            </section>
        </section>
                  
        <section title="Media Resource" anchor="mediaresource-type">
            <t>
                The Media Resource type extends the CONTENT object type and represents a digital or physical manifestation of a version.
                For an organisation or producer acting as caretaker for a media resource, it MAY contain a string formatted piece of information about a specific e.g. tape name, shelf location for an asset, including an organisation's name, departmental name, shelf id. and contact information.
                Differently for a data file or web video it MAY contain a IRI reference to the media resource and an optional type (e.g. for an HTML5 audio or video it would refer to the URL of the source and its type).
                The Media Resource type is identified with the string MEDIA_RESOURCE.
            </t>
            <section title="Fields" anchor="mediaresource-fields">
                <t>
                    <list style="hanging">
                        <t hangText="locator: (IRI or STRING)">
                            An identifier of the digital media resource or a string description where to find a physical source (e.g. dvb://scifi@2009-10-20T03:39:00Z/PT51M per <xref target="DVB-URI"/> or a URI reference to a CDN streaming service, or a string like 'Archives building A, Row J, Shelf 2').
                            <!--
                             Please note this is a Plural Field, and there MAY be multiple source files associated to a media object (e.g. when alternative source files using different encodings/codecs are available to a web browser).
                             The primary sub-field SHOULD BE used to flag a particular instance as the primary piece of content.
                             -->
                        </t>
                        <t hangText="mediaType: (ENUM)">
                            The media type of the media resource. The value is a hint about the type of the representation that is expected to be returned when the value field is dereferenced.
                            Note that the type field does not override the actual media type returned with the representation.
                            When specified the value MUST conform to the syntax of a MIME media type defined in <xref target="MIMEREG"/>.
                            Unless otherwise specified, the type value field MUST be a valid Canonical Value as defined by the IANA MIME Media Types registry <xref target="IANA-MIMEREG"/> includind any media type paramters, such as the "codecs" parameter <xref target="RFC4281"/>.
                            Note that the same Media Resource MAY be used to represent different versions when the media type is a container file or format.
                        </t>
                        <t hangText="medium: (ENUM or IRI)">
                            The material or physical carrier of the resource. If a file, it should be the carrier format.
                            The type of media resource SHOULD BE selected from a standard list of values such as the EBU Storage Media types (e.g. '1BM', 'BMX', 'video', 'audio').
                        </t>
                        <t hangText="length: (NUMBER)">
                            The media resource size or length in octets.
                            The value is a hint about the content length of the media resource representing the media resource and it does not override the actual content length of the representation as reported by the underlying protocol.
                        </t>
                        <t hangText="duration: (TIMECODE or DURATION or NUMBER)">
                            The duration of a the media resource.
                        </t>
                        <t hangText="start: (TIMECODE or TIME or NUMBER)">
                            The beginning point for playback of the media resource (e.g. 'seeking position').
                        </t>
                        
                        <!-- audio format -->
                        <t hangText="audioEncoding: (ENUM)">
                            The audio encoding parameters SHOULD BE selected from a standard list of values such as the EBU Audio Compression Codes.
                        </t>
                        <t hangText="audioConfiguration: (ENUM)">
                            The audio configuration parameters SHOULD BE selected from a standard list of values such as the EBU Audio Format Codes (e.g. 'no audio', 'mono', 'stereo', '2+1', 'surround', 'surround (7+1)').
                        </t>
                        <t hangText="audioBitrate: (NUMBER)">
                            The average audio bit rate.
                        </t>
                        <t hangText="minAudioBitrate: (NUMBER)">
                            The minimal audio bit rate.
                        </t>
                        <t hangText="maxAudioBitrate: (NUMBER)">
                            The maximum audio bit rate.
                        </t>
                        <t hangText="audioSamplingRate: (NUMBER)">
                            The audio sampling rate.
                        </t>
                        <t hangText="audioLoudnessLevel: (ENUM)">
                            The media resource loudness level in dB.
                        </t>
                        
                        <!-- video format -->
                        <t hangText="width: (NUMBER)">
                            This value is a hint about the video's intrinsic or ideal width in pixels.
                        </t>
                        <t hangText="height: (NUMBER)">
                            This value is a hint about the video's intrinsic or ideal height in pixels.
                        </t>
                        <t hangText="frameSize: (STRING)">
                            The video frames size.
                        </t>
                        <t hangText="frameRate: (ENUM)">
                            The video frames per second rate SHOULD BE selected from a standard list of values such as the EBU Video Frame Rate types.
                        </t>
                        <t hangText="aspectRatio: (ENUM)">
                            The video aspect ratio SHOULD BE selected from a standard list of values such as the EBU Visual Aspect Ratio types.
                        </t>
                        <t hangText="colourMode: [ENUM]">
                            The video colour mode SHOULD BE selected from a standard list of values such as the EBU Colour Codes. Multiple video colours may be specified for the media resource (e.g. when film colorization is used to modernize or restore a video).
                        </t>
                        <t hangText="videoEncoding: (ENUM)">
                            The video encoding parameters.
                            The value SHOULD BE selected from a standard list of values such as the EBU Video Compression Codes.
                        </t>
                        <t hangText="videoBitrate: (NUMBER)">
                            The average video bit rate.
                        </t>
                        <t hangText="minVideoBitrate: (NUMBER)">
                            The minimal video bit rate.
                        </t>
                        <t hangText="maxVideoBitrate: (NUMBER)">
                            The maximum video bit rate.
                        </t>
                        <t hangText="videoSamplingRate: (NUMBER)">
                            The video sampling rate.
                        </t>
                        
                        <t hangText="embedCode: (HTML)">
                            An HTML fragment that, when embedded in an HTML page, will provide an interactive player UI for the media resource.
                        </t>
                    </list>
                </t>
            </section>
        </section>
                            
        <section title="Media Group" anchor="mediagroup-type">
            <t>
                The Media Group object type extends the MEDIA_RESOURCE object type and represents a group of related media resources containing one or more versions.
                For example, a Media Group MAY BE used to express alternative representations for the same media resource or it MAY BE used to represent multiple external tracks (audio, video, text etc) associated and syncronized to the main audio and video tracks.
                The Media Group object type is identified with the string MEDIA_GROUP.
            </t>
            <t>
                Note that a MEDIA_GROUP locator field MAY BE empty and instead one or more alternative media sources MAY specified.
                A Consumer MUST BE able to select the main alternative media source by stepping through each of the specified sources in the given order.
            </t>
            <section title="Relationships" anchor="mediagroup-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="sources: [MEDIA_RESOURCE]">
                            A list of alternative representations for the same media resource (e.g. alternative source files using different encodings/codecs made available to a web browser to play the same content).
                        </t>
                        <t hangText="tracks: [MEDIA_GROUP]">
                            Used to describe alternative audio, video or text tracks syncronized with the main the media resource.
                            <list style="hanging">
                                <t hangText="kind: (ENUM)">
                                    The type of track SHOULD BE selected from a standard list of values such as the HTML5 video track kind attribute, the EBU Audio Channel Purpose  or Language Purpose codes (e.g. 'subtitles', 'captions', 'descriptions', 'signing', 'dubbing').
                                </t>
                                <t hangText="lang: (LANGUAGE)">
                                    The language of the track.
                                </t>
                                <t hangText="label: (STRING)">
                                    A human-readable label or name associated to the type sub-field.
                                    This is the Primary Sub-Field for the purposes of sorting and filtering.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Segment" anchor="segment-type">
            <t>
                The Segment object type extends the CONTENT object type and represents a continuous portion of a piece of a programme version with a defined start and optional end point, defined relative to the start of the programme. For example a single topic in a news programme or the highlights of a soccer match.
            </t>
            <t>
                A particular segment can belong to a single programme version only, but it can be a member of multiple segment groups.
                A programme can contain multiple segments.
                Segments are reusable, editorially distinct items.
            </t>
            <section title="Fields" anchor="segment-fields">
                <t>
                    <list style="hanging">
                        <t hangText="segmentType: (ENUM)">
                            The type of segment SHALL be selected from one of the following values: <spanx style="verb">static-segmentation</spanx>, <spanx style="verb">live-segmentation</spanx>, <spanx style="verb">live-post-segmentation</spanx>, <spanx style="verb">post-segmentation</spanx>.
                        </t>
                        <t hangText="start: (TIMECODE or TIME or NUMBER)">
                            The beginning point for playback of the programme segment.
                        </t>
                        <t hangText="end: (TIMECODE or TIME or NUMBER)">
                            An optional ending point for playback of the programme segment.
                        </t>
                        <t hangText="duration: (TIMECODE or DURATION)">
                            The duration of a the programme the segement.
                        </t>
                        <t hangText="chapter: (BOOLEAN)">
                            A Boolean value indicating whether the programme segment is a chapter.
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="segment-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="programme: (VERSION)">
                            A reference to the programme version this segment belongs to.
                            If the segment is part of a segment group, this field MAY be left empty and the segment is assumed to belong to the programme as referenced by the parent segment group.
                        </t>
                        <t hangText="media: (MEDIA_RESOURCE)">
                            A reference to the media resource representing the segment.
                            <list style="hanging">
                                <t hangText="locator: (IRI or STRING)">
                                    The locator SHALL match the corresponding media resource locator field or contain a URI Media Fragment with a Normal Play Time (NPT) or SMPTE time code as defined in section 4.2.1 of <xref target="MEDIA-FRAGMENTS-URI"/>.
                                    Note that this sub-field is solely provided as a shortcut reference to the underlying media fragment.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
        </section>          
                    
        <section title="Segment Group" anchor="segment-group-type">
            <t>
                The Segment Group object type extends the SEGMENT object type and represents collection of segments that are grouped together.
                A segment group can contain segments or segment groups.
                The Segment Group object type is identified with the string SEGMENT_GROUP.
            </t>
            <section title="Relationships" anchor="segment-group-relationships">    
                <t>
                    <list style="hanging">
                        <t hangText="segments: [SEGMENT]">
                            The list of segments that are contained within the segment group.
                            The order of the references to segments determines the temporal playback order of segments in this group.
                        </t>
                        <!--
                         <t hangText="ordered: (BOOLEAN)">
                         A Boolean value indicating whether the programme segment group is ordered.
                         </t>
                         -->
                        <!-- eventually add top-level boolean to flag if the group is root or not -->
                    </list>
                </t>
            </section>
        </section>

        <section title="Content Collection" anchor="content-collection-type">
            <t>
                The Content Collection object type extends the CONTENT object type and represents a group or list of related pieces of content, and it has the following fields and relationships:
            </t>
            <section title="Relationships" anchor="content-collection-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="contents: [CONTENT]">
                            The list of pieces of content that are contained within the collection.
                            <list style="hanging">
                                <t hangText="rel: (ENUM)">
                                    The rel value SHALL BE the "item" relation type as defined in <xref target="RFC6573" /> when referring to a piece of Content part of a hierarchical collection of content.
                                    The rel value SHALL BE the "collection" relation type as defined in <xref target="RFC6573" /> when referring to a piece of Content representing a hierarchical collection of content.
                                </t>
                            </list>
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Rights" anchor="rights-type">
            <t>
                The Rights object type extends the basic object type CONTENT and represents information (rights management statement or reference to a service providing such information e.g. via a URL) about copyright, intellectual property rights or other property rights held in and over a piece of content, stating whether access is open or restricted in some way.
            </t>
            <section title="Fields" anchor="rights-fields">
                <t>
                    <list style="hanging">
                        <t hangText="rightsType: (ENUM)">
                            The type of rights expressed (e.g. 'merchandising', 'derivation', 'publication').
                            The value SHOULD BE selected from a standard list of values such as the EBU Rights Type codes.
                        </t>
                        <t hangText="exploitationIssues: (STRING)">
                            Use to state any other restrictions, such as non-rights ones (e.g. legal).
                        </t>
                        <t hangText="rightsTemporal: (PERIOD)">
                            The temporal coverage.
                        </t>
                        <t hangText="inclusionCountries: [TERRITORY or STRING]">
                            An inclusion list of countries for whom the content is intended or useful.
                            The special value 'all' is reserved to indicate all or any country.
                        </t>
                        <t hangText="exclusionCountries: [TERRITORY or STRING]">
                            An exclusion list of countries for whom the content is intended or useful.
                            The special value 'all' is reserved to indicate all or any country.
                        </t>
                        <t hangText="coverageType: (ENUM)">
                            The coverage type (e.g. broadcast locally, regionally, nationally or internationally).
                            The value SHOULD BE selected from a standard list of values such as the EBU Rights Type codes.
                        </t>
                    </list>            
                </t>
            </section>
            <section title="Relationships" anchor="rights-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="rightsHolder: (AGENT)">
                            The person or organisation holding or managing the rights related to the piece of content.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Award" anchor="award-type">
            <t>
                The Award object type extends the basic object type CONTENT and represents an award or an award nominations for a programme.
            </t>
            <section title="Fields" anchor="award-fields">
                <t>
                    <list style="hanging">
                        <t hangText="year: (YEAR)">
                            Specify the year when the programme won or has been nominated.
                        </t>
                        <t hangText="awardCategory: (ENUM)">
                            Specify the category in which the programme won the awards or the nomination.
                            The value SHOULD BE selected from a standard list of values.
                        </t>
                    </list>            
                </t>
            </section>
            <section title="Relationships" anchor="award-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="nominee: [AGENT]">
                            A reference to the person or organisation who won the nomination.
                        </t>
                        <t hangText="recipient: [AGENT]">
                            A reference to the person or organisation who won the award.
                        </t>
                    </list>
                </t>
            </section>
        </section>
            
        <section title="Agent" anchor="agent-type">
            <t>
                The Agent object type extends the basic object type ENTRY and represents a person, organisation or group.
            </t>
        </section>
      
        <section title="Person" anchor="person-type">
            <t>
                The Person object type extends the basic object type AGENT and represents a contact as defined in <xref target="PortableContacts"/>.
                This effectively means that a valid Portable Listings Person is a valid Portable Contacts Contact (see section 7.2 of <xref target="PortableContacts"/>).
                The only difference is that the <spanx style="verb">organization</spanx> field is defined to be a plural relationship to one or more ORGANISATION.
            </t>
        </section>
            
        <section title="Organisation" anchor="organisation-type">
            <t>
                The Organisation object type extends the AGENT object type and represents an organisation or institution as defined in <xref target="PortableContacts"/>.
                A valid Portable Listings Organisation is defined to be a Portable Contacts Organization (see section 7.5 of <xref target="PortableContacts"/>) with only the <spanx style="verb">name</spanx>, <spanx style="verb">field</spanx>, <spanx style="verb">subfield</spanx>, <spanx style="verb">location</spanx> and <spanx style="verb">webpage</spanx> fields specified.
                The <spanx style="verb">department</spanx>, <spanx style="verb">title</spanx>, <spanx style="verb">type</spanx>, <spanx style="verb">startDate</spanx>, <spanx style="verb">endDate</spanx>, <spanx style="verb">description</spanx> and <spanx style="verb">salary</spanx> fields SHALL be specified as sub-fields of the PERSON <spanx style="verb">organization</spanx> relationship due they are specific to the contact.
            </t>
            <section title="Relationships" anchor="organisation-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="members: [AGENT]">
                            The list of contacts inside the organisation.
                        </t>
                    </list>
                </t>
            </section>
        </section>
        
        <section title="Group" anchor="group-type">
            <t>
                The Group object type extends the AGENT object type and represents a group of people or organisations.
            </t>
            <section title="Fields" anchor="group-fields">
                <t>
                    <list style="hanging">
                        <t hangText="name: (STRING)">
                            The name of the group.
                        </t>
                    </list>
                </t>
            </section>
            <section title="Relationships" anchor="group-relationships">
                <t>
                    <list style="hanging">
                        <t hangText="members: [AGENT]">
                            The members of the group.
                        </t>
                    </list>
                </t>
            </section>
        </section>
                  
      </section>

       <!--
            Possible list of additional field:
                - Location/Space:
                    -> filming location
                - Temporal:
                    -> history period of content
                - Ratings
                - Fanart (E.g. background image on movie card)
                - Charts
                - Wiki (??)
                -  Cinema listings (E.g. in Berlin next week)
                - Extra:
                    -> Trailers
                    -> Critiques
                    -> eBooks, Games inspired to (E.g. Avatar movie, book, game)
                    -> Reviews
                - GeoIP/Rights
                - Note / Comments ( not summary already ? )
                - Ads related
                    -> insertion points
       -->
      
      </section> <!-- end core profile -->
        
    <section anchor="IANA" title="IANA Considerations">
      <t>A Entry object, when serialised to a byte stream using the JSON grammar, can be identified with the following media type:
          <list style="hanging">
              <t hangText="MIME Media Type Name">application</t>

              <t hangText="MIME Subtype Name">listings+json</t>

              <t hangText="Required Parameters">none</t>

              <t hangText="Optional parameters:">
                  <list style="hanging">
                      <t hangText='"profile":'> This parameter contains a whitespace-separated list
                          of profile URIs used to express the Entries metadata as defined in Section 3.1 of <xref target="RFC6906"/>. If this attribute is omitted implementations
                          MUST process the media type as if the value was the string "http://portablelistings.net/profiles/core/1.0/".
                      </t>
                  </list>
              </t>

              <t hangText="Encoding Considerations">As defined for
                  application/json in <xref target="RFC4627"></xref>.</t>

              <t hangText="Security Considerations">As defined for
                  application/json in <xref target="RFC4627"></xref>.</t>

              <t hangText="Published Specification">This specification.</t>

              <t hangText="Applications that use this media type">No applications
                  are currently known to use this media type.</t>
          </list>
      </t>
      <t>
        The "Link Relation Types" registry has been updated with the following entries:
      </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: promotional-information</t>
                  <t>
                      Description: Refers to a resource devised to publicize or advertise a resource or associated product about the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="promotional-information"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: supplemental-information</t>
                  <t>
                      Description: Refers to a resource containing supplemental information about the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="supplemental-information"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: review</t>
                  <t>
                      Description: Refers to a resource containings a critical article or report concerning the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="review"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: highlights</t>
                  <t>
                      Description: Refers to a resource that represents striking, noticeable aspects of the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="highlights"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: screenplay</t>
                  <t>
                      Description: Refers to a resource that represents the text specifying content of a production or performance, used as a guide to the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="screenplay"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: transcript</t>
                  <t>
                      Description: Refers to an exact copy or reproduction of the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="transcript"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: shot</t>
                  <t>
                      Description: Refers to a resource that represents a shot.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="shot"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: shot-list</t>
                  <t>
                      Description: Refers to a resource that represents a list of shots.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="shot-list"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: edit-decision-list</t>
                  <t>
                      Description: Refers to a resource that represents an Edit Decision List (EDL) expressed as handwritten or computer-generated compilation of all edits (marked by their time code in points and out points) to be executed in a video production.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="edit-decision-list"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: rundown</t>
                  <t>
                      Description: Refers to a resource containing a simple review of the script for the with directions for the various crew members.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="rundown"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: dopesheet</t>
                  <t>
                      Description: Refers to a resource that represents an exposure sheet which allows an animator to organize his thinking and give instructions to the cameraman on how the animation is to be shot.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="dopesheet"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: trailer</t>
                  <t>
                      Description: Refers to trailer of the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="trailer"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: simulcast</t>
                  <t>
                      Description: Refers to an alternative version of the link's context that is being shown simultaneously with the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="simulcast"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: ondemand</t>
                  <t>
                      Description: Refers to an alternative version of link's context that is available for consumption on demand.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="ondemand"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: catchup</t>
                  <t>
                      Description: Refers to an alternative version of link's context that is available for consumption on demand from a catch-up TV service.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="catchup"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: recommendation</t>
                  <t>
                      Description: Refers to a resource recommended by the provider of the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="recommendation"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: insertion-points</t>
                  <t>
                      Description: Refers to a resource containing a list of insertion-points related to the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="insertion-points"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: advert</t>
                  <t>
                      Description: Refers to an advert for a product or service featured in the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="advert"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: telescoped-advert</t>
                  <t>
                      Description: Refers to a telescoped advert for a product or service featured in the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="telescoped-advert"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: speedbump</t>
                  <t>
                      Description: Refers to superimposed related or unrelated content about a product or service featured in the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="speedbump"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: product-purchase</t>
                  <t>
                      Description: Refers to a product or service directly linked to the link's context, which can be purchased directly from this linked resource.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="product-purchase"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: recap</t>
                  <t>
                      Description: Refers to a text or AV recap of the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="recap"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: making-of</t>
                  <t>
                      Description: Refers to the making-of of the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="making-of"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: content-package</t>
                  <t>
                      Description: Refers to a content package associated to the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="content-package"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: best-of</t>
                  <t>
                      Description: Refers to a resource collecting best-of selections from the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="best-of"/>.
                  </t>
              </list>
          </t>
          <t>
              <list style="symbols">
                  <t>Relation Name: extract</t>
                  <t>
                      Description: Refers to a resource representing an extract of the link's context.
                  </t>
                  <t>
                      Reference: This specification,
                      <xref target="extract"/>.
                  </t>
              </list>
          </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        This memo abides by the security considerations of HTTP Basic Auth <xref target="RFC2617" /> and the OAuth protocol <xref target="OAuth 2.0" />.
      </t>
    </section>
    
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
        This document would not be possible without the inspiring and seminal work of Joseph Smarr and other Open Stack community fellows and their Portable Contacts <xref target="PortableContacts" /> specification.
        Either the document structure, design principles, the pragmatism and simplicity used to present the Portable Contacts specification has been key inspiration for the author to start designing a similar specification for a fairly different domain.
        Credits go also to the Atom community long standing work, especially their inspiring <xref target="ATOM-PROFILES"/> and the JSON Syndication Format <xref target="JSON-SYN"/> proposals.
        Other credits go to other past and present people which have collaborated with the author either in informal chats, brainstorming sessions and email discussions.
        <!-- add thanks to Jean-Pierre Evian eventually -->
        <!--
        The author gratefully acknowledges the feedback from the members of
   the Atom Publishing Format and Protocol for ideas and material for the development of this specification.
   -->
      </t>
    </section>
      
    <section title="Change Log" anchor="changes">
        <t>Changes from -03 version (Draft C)
            <list style="symbols">
                <t>Updated profile definitions per RFC6906.</t>
                <t>Moved "links" to Entry level.</t>
                <t>Dropped "profile" from Entry.</t>
                <t>Removed "lang" and "profile" from response format</t>
                <t>Removed Defining New Profiles section</t>
                <t>Added "attributionDate", "note" and "lang" sub-fileds to Complex fields.</t>
                <t>Corrected "lang" sub-filed definition for relationships.</t>
                <t>Simplified "alternativeTitle" definition.</t>
                <t>Added "Additional Link Relation Types" section.</t>
                <t>Updated "contributor" sub-filed "role" as ENUM or IRI.</t>
                <t>Added "label" sub-field to default Complex Type definition."</t>
                <t>Updated "genre", "targetAudience" and "format" definitions so that "value" is primary sub-field as ENUM or IRI.</t>
                <t>Added "targetRegion", "notRated" and "adultContent" to Content.</t>
                <t>Added "released" and "copyrighted" dates.</t>
                <t>Added "reason", "linkToLogo", "notRated", "adultContent" and "targetRegion" to "targetAudience".</t>
                <t>Moved "firstTransmissionDate", "firstTransmissionChannel" and "repeats" to Programme level.</t>
                <t>Removed "episodes" and "series" from Programme.</t>
                <t>Renamed simple type COUNTRY to TERRITORY.</t>
                <t>Updated Media Resource "locator" field definition.</t>
                <t>Corrected Media Resource "medium" field and renamed "type" to "mediaType".</t>
                <t>Flattened audo and video paraementers in Media Resource.</t>
                <t>Simplified Service hierarchy removing Channel and Outlet types.</t>
                <t>Renamed Title to Ondemand and Catalog to Catalogue.</t>
                <t>Renamed Catalogue "type" to "catalogueType".</t>
                <t>Added "logo", "dog", "lcn", "application" and "locator" to Service.</t>
                <t>Removed "subType" from Service and renamed "type" to "serviceType".</t>
                <t>Renamed Rights "type" to "rightsType".</t>
                <t>Removed Rights "link". The links HTML5 "license" Lynk Type can be used instead.</t>
                <t>Added Application type.</t>
                <t>Renamed Segment "type" to "segmentType".</t>
                <t>Removed "media" sub-field from "source" in Content.</t>
                <t>Removed "type" from Version.</t>
                <t>Added Application types hierarchy and referred from "application" in Service.</t>
                <t>Made Programme "country" plural.</t>
                <t>Added TERRITORY type to "location" possible list of value types."</t>
                <t>Added YEAR type to "temporal" possible list of value types.</t>
                <t>Added "minAudioBitrate", "maxAudioBitrate", "minVideoBitrate" and "maxVideoBitrate" to Media Resource.</t>
                <t>Added "guidanceText" and "longGuidanceText" to "targetAudience" on Content.</t>
                <t>Added "mediumSynopsis" and "mediumSynopsis" to "description" on Content.</t>
                <t>Added "childrenContent" and "educationalContent" to Content.</t>
                <t>Updated "language" to be main production language.</t>
                <t>Added "alternativeLanguage".</t>
                <t>Moved "parent" and "peers" to Entry.</t>
                <t>Dropped "related" from Content.</t>
                <t>Added "crossPromotions" to Content.</t>
                <t>Added "productionDate" and "productionCountry" to Content.</t>
                <t>Updated "aliases" structure and added "authority" sub-field.</t>
                <t>Defined "duration" at Content level.</t>
                <t>Added "listFields", "listWeblinks" and "listRelationships" presentation fileters.</t>
                <t>Removed "service" field from Programme.</t>
                <t>Made Media Resource "locator" optional and changed reference from link to relationship in Programm Publication and Segment.</t>
                <t>Added Category type and renamed "categories" to "category" in Entry.</t>
                <t>Renamed "category" to "awardCategory" in Award.</t>
                <t>Removed "subtitle" and moved to "alternativeTitle".</t>
                <t>Removed "summary" and moved to "description".</t>
                <t>Renamed "Collection" to "Content Collection".</t>
                <t>Renamed "Programme Location" to "Programme Publication".</t>
                <t>Renamed Rights "temporal" to "rightsTemporal".</t>
                <t>Added Agent type and renamed Contact to Person.</t>
                <t>Renamed "metadataProvider" to "metadataPublisher".</t>
                <t>Added "filterDateBy", "filterDateOp" and "filterDateValue".</t>
                <t>Added "filterLinksBy", "filterLinksType" and "filterLinksValue".</t>
                <t>Added "filterRelationshipsBy", "filterRelationshipsType" and "filterRelationshipsValue".</t>
                <t>Added "filterPublisher".</t>
                <t>Added "supportingMaterial".</t>
                <t>Added "links" and "relationships" presentation paramenters.</t>
            </list>
        </t>
        <t>Changes from -04 version
            <list style="symbols">
                <t>Added "alternativePublication" to Programme Publication and Application Publication.</t>
                <t>Added "trailer", "simulcast", "ondemand", "catchup", "recommendation", "advert", "telescoped-advert", "speedbump", "product-purchase", "recap", "making-of", "content-package", "supplemental-information", "best-of" and "extract" link relation types.</t>
                <t>Removed "supportingMaterial" from Content and mandate use links of type "supplemental-material" instead.</t>
                <t>Added "segments" to Version.</t>
                <t>Updated "segmentType" definition.</t>
                <t>Redefined "aliases" as links and moved to Entry.</t>
                <t>Added "id" query paramter to request specific information via "aliases".</t>
                <t>Added "end" to Segment.</t>
                <t>Added "insertion-points" and "shot" link relation types.</t>
                <t>Moved "duration" from Content to Programme Item and Segment.</t>
                <t>Moved "free" from Broadcast to Programme Publication.</t>
                <t>Added "signed", "hasSubtitles" and "audioDescribed" to Programme Publication.</t>
                <t>Moved "hd", "3d" and "uhd" to Programme Publication.</t>
                <t>Added "dummy" and "primaryShowing" to Broadcast.</t>
                <t>Added "catchup" and "archive" to Ondemand.</t>
                <t>Added "role" to reltionships definition.</t>
                <t>Added CONSTANT to Simple field definition.</t>
                <t>Renamed "country" to "releaseCountry" in Programme and Application.</t>
                <t>Use "canonical" relationship type for "versions" in Programme Item and "builds" in Application.</t>
                <t>Simplified Content "format" and Media Resource "medium definitions.</t>
                <t>Redefined Organisation following Portable Contacts.</t>
                <t>Added "name" to Group.</t>
                <t>Fixed "applications" to refer to Application Publication.</t>
                <t>Renamed "hasSubtitles" to "subtitled".</t>
                <t>Renamed "Broadcast" to "Schedule Event".</t>
                <t>Renamed Version and Schedule "broadcasts" to "events".</t>
                <t>Renamed "organisation" to "ownership" in Service.</t>
                <t>Added "entitlementType" and "free" to Service.</t>
                <t>Changed crossPromotions "related" relation type to "recommendation".</t>
                <t>Added "entitlementType" to Programme Publication.</t>
                <t>Added "entitlementType" to Application Publication.</t>
                <t>Added "audioBitrate", "minAudioBitrate", "maxAudioBitrate", "width", "height", "aspectRatio", "colourMode", "videoBitrate", "minVideoBitrate" and "maxVideoBitrate" to Programme Publication</t>
                <t>Removed "notRated" from Content.</t>
                <t>Moved "duration" to Version level.</t>
                <t>Renamed "type" to "mediaType" on Link and relationship by reference.</t>
                <t>Added "subtitlesType".</t>
            </list>
        </t>
    </section>
  </middle>
    
  <back>
      <references title="Normative References">
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
          <!--<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2425.xml"?>-->
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5646.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3987.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4287.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4281.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6906.xml"?>
          <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6573.xml"?>
      </references>
      
      <references title="Informative References">
          <reference anchor="OAuth 2.0">
              <front>
                  <title>The OAuth 2.0 Authorization Protocol</title>
                  <author fullname="Eran Hammer-Lahav">
                      <organization/>
                  </author>
                  <author fullname="D. Recordon">
                      <organization/>
                  </author>
                  <author fullname="D. Hardt">
                      <organization/>
                  </author>
              </front>
              <format type="HTML" target="http://tools.ietf.org/html/draft-ietf-oauth-v2" />
          </reference>
          
          <reference anchor="XRD">
              <front>
                  <title>Extensible Resource Descriptor (XRD) Version 1.0 - Committee Draft 02</title>
                  <author fullname="Peter Davis">
                      <organization />
                  </author>
                  <author fullname="Eran Hammer-Lahav">
                      <organization />
                  </author>
              </front>
              <format type="HTML" target="http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html" />
          </reference>
          
          <reference anchor="OpenSearch">
              <front>
                  <title>OpenSearch 1.1</title>
                  <author initials="D.C." surname="Clinton" fullname="DeWitt Clinton">
                      <organization>A9</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.opensearch.org/Specifications/OpenSearch/1.1/Draft_3" />
          </reference>
          
          <reference anchor="PortableContacts">
              <front>
                  <title>Portable Contacts 1.0 Draft C</title>
                  <author initials="J" surname="Smarr" fullname="Joseph Smarr">
                      <organization />
                  </author>
              </front>
              <format type="HTML" target="http://portablecontacts.net/draft-spec.html" />
          </reference>
          
          <!--
           <reference anchor="Atom-Activity-Base-Schema">
           <front>
           <title>Atom Activity Base Schema (Draft)</title>
           <author fullname="M. Atkins">
           <organization>SAY Media</organization>
           </author>
           <author fullname="D. Recordon">
           <organization>Six Apart, Facebook</organization>
           </author>
           <author fullname="C. Messina">
           <organization>Citizen Agency, Google</organization>
           </author>
           <author fullname="M. Keller">
           <organization>MySpace, Facebook</organization>
           </author>
           <author fullname="A. Steinberg">
           <organization>Facebook</organization>
           </author>
           <author fullname="R. Dolin">
           <organization>Microsoft</organization>
           </author>
           </front>
           <format type="HTML" target="http://activitystrea.ms/head/activity-schema.html" />
           </reference>
           
           <reference anchor="JSON-Activity-Streams">
           <front>
           <title>JSON Activity Streams (Draft)</title>
           <author fullname="J. Snell">
           <organization>IBM</organization>
           </author>
           <author fullname="M. Atkins">
           <organization>SAY Media</organization>
           </author>
           <author fullname="W. Norris">
           <organization>Google</organization>
           </author>
           <author fullname="C. Messina">
           <organization>Citizen Agency, Google</organization>
           </author>
           <author fullname="M. Wilkinson">
           <organization>MySpace, Facebook, Socialcast</organization>
           </author>
           <author fullname="R. Dolin">
           <organization>Microsoft</organization>
           </author>
           </front>
           <format type="HTML" target="http://activitystrea.ms/head/json-activity.html" />
           </reference>
           -->
          
          <reference anchor="OpenSocial">
              <front>
                  <title>OpenSocial Social API Server Specification 2.0 DRAFT</title>
                  <author>
                      <organization />
                  </author>
              </front>
              <format type="HTML" target="http://opensocial-resources.googlecode.com/svn/spec/2.0/Social-API-Server.xml" />
          </reference>
          
          <reference anchor="HTML5">
              <front>
                  <title>HTML5 - A vocabulary and associated APIs for HTML and XHTML</title>
                  <author>
                      <organization>W3C</organization>
                  </author>
              </front>
              <format type="HTML" target="http://dev.w3.org/html5/spec/Overview.html" />
          </reference>
          
          <reference anchor="EBUCORE">
              <front>
                  <title>EBU – TECH 3293 - EBU Core Metadata Set (EBU Core) v.1.4</title>
                  <author fullname="PMC">
                      <organization>EBU</organization>
                  </author>
              </front>
              <format type="PDF" target="http://tech.ebu.ch/docs/tech/tech3293v1_4.pdf" />
          </reference>
          
          <reference anchor="EBU-OBJECTMODEL">
              <front>
                  <title>EBU Object Model</title>
                  <author fullname="MAG">
                      <organization>EBU</organization>
                  </author>
              </front>
              <format type="PDF" target="http://www.slideshare.net/EUscreen/evain-ebu-metadata-euscreen-mykonos" />
          </reference>
          
          <reference anchor="TV-ANYTIME">
              <front>
                  <title>TV Anytime</title>
                  <author>
                      <organization>ETSI</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.etsi.org/website/technologies/tvanytime.aspx" />
          </reference>
          
          <reference anchor="BBC-PROGRAMMES">
              <front>
                  <title>Programmes ontology</title>
                  <author>
                      <organization>BBC</organization>
                  </author>
              </front>
              <format type="HTML" target="http://purl.org/ontology/po/" />
          </reference>
          
          <reference anchor="ATOM-MEDIA">
              <front>
                  <title>Atom Media Extensions</title>
                  <author initials="M." surname="Atkins" fullname="M. Atkins">
                      <organization>Six Apart Ltd</organization>
                  </author>
              </front>
              <format type="HTML" target="http://martin.atkins.me.uk/specs/atommedia" />
          </reference>
          
          <reference anchor="MEDIA-RSS">
              <front>
                  <title>Media RSS Specification</title>
                  <author>
                      <organization>Yahoo! Inc.</organization>
                  </author>
                  <author>
                      <organization>RSS Advisory Board</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.rssboard.org/media-rss" />
          </reference>
          
          <reference anchor="HTML5-MM">
              <front>
                  <title>Media Multitrack API</title>
                  <author>
                      <organization>W3C</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.w3.org/WAI/PF/HTML/wiki/Media_Multitrack_Media_API" />
          </reference>
          
          <reference anchor="HOSTMETA">
              <front>
                  <title>Web Host Metadata</title>
                  <author initials="E.H.-L." surname="Eran Hammer-Lahav" fullname="Eran Hammer-Lahav">
                      <organization>Yahoo!</organization>
                  </author>
              </front>
              <format type="HTML" target="http://tools.ietf.org/html/draft-hammer-hostmeta" />
          </reference>
          
          <!--
           <reference anchor="GRAPHAPI">
           <front>
           <title>Graph API</title>
           <author>
           <organization>Facebook</organization>
           </author>
           </front>
           <format type="HTML" target="http://developers.facebook.com/docs/api" />
           </reference>
           -->
          
          <reference anchor="EBU-REFERENCEDATA">
              <front>
                  <title>European Broadcasting Union - Metadata Reference Data</title>
                  <author>
                      <organization>EBU</organization>
                  </author>
              </front>
              <format type="HTML" target="http://tech.ebu.ch/lang/en/MetadataReferenceData" />
          </reference>
          
          <reference anchor="EBU-ROLE-CODES">
              <front>
                  <title>European Broadcasting Union - Role Codes</title>
                  <author>
                      <organization>EBU</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.ebu.ch/metadata/cs/web/ebu_RoleCodeCS_p.xml.htm" />
          </reference>
          
          <reference anchor="ATOM-PROFILES">
              <front>
                  <title>Atom Profiles Proposal</title>
                  <author fullname="M. Nottingham">
                      <organization />
                  </author>
              </front>
              <format type="HTML" target="http://intertwingly.net/wiki/pie/PaceProfileAttribute" />
          </reference>
          
          <reference anchor="JSON-SYN">
              <front>
                  <title>JSON Syndication Format</title>
                  <author fullname="M. Atkins">
                      <organization />
                  </author>
              </front>
              <format type="HTML" target="http://martin.atkins.me.uk/specs/jsonsyn" />
          </reference>
          
          <reference anchor="WEBFINGER">
              <front>
                  <title>The Webfinger Protocol</title>
                  <author fullname="Eran Hammer-Lahav">
                      <organization/>
                  </author>
                  <author fullname="Fitzpatrick, B.">
                      <organization/>
                  </author>
                  <author fullname="Cook, B.">
                      <organization/>
                  </author>
                  <author fullname="Panzer, J.">
                      <organization/>
                  </author>
                  <author fullname="J. Gregorio">
                      <organization/>
                  </author>
              </front>
              <format type="HTML" target="http://code.google.com/p/webfinger/wiki/WebFingerProtocol" />
          </reference>
          
          <reference anchor="XSD-DATATYPES" target="http://www.w3.org/TR/xmlschema-2/">
              <front>
                  <title>XML Schema Part 2: Datatypes Second Edition</title>
                  <author initials='P.V.'
                      surname='Biron'
                      fullname='Paul V. Biron'>
                      <organization>Kaiser Permanente, for Health Level Seven</organization>
                  </author>
                  <author initials='A.'
                      surname='Malhotra'
                      fullname='Ashok Malhotra'>
                      <organization>Microsoft</organization>
                  </author>
                  <date month='October' year='2004' />
              </front>
          </reference>
          
          <reference anchor="MIMEREG">
              <front>
                  <title>Media Type Specifications and Registration Procedures</title>
                  <author initials="N." surname="Freed" fullname="N. Freed">
                      <organization/></author>
                  <author initials="J." surname="Klensin" fullname="J. Klensin">
                      <organization/></author>
                  <date year="2005" month="December"/>
              </front>
              <seriesInfo name="BCP" value="13"/>
              <seriesInfo name="RFC" value="4288"/>
          </reference>
          
          <reference anchor="IANA-MIMEREG">
              <front>
                  <title>MIME Media Types</title>
                  <author>
                      <organization>IANA</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.iana.org/assignments/media-types/" />
          </reference>
          <reference anchor="IANA-RELREG">
              <front>
                  <title>Link Relation Types</title>
                  <author>
                      <organization>IANA</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.iana.org/assignments/link-relations/link-relations.xml" />
          </reference>
          <!--
           <reference anchor="JSONPath" target="http://goessner.net/articles/JsonPath/">
           <front>
           <title>JSONPath - XPath for JSON</title>
           <author initials="S." surname="Gössner" fullname="Stefan Gössner">
           <organization/></author>
           <date year="2007" month="February" day="21"/>
           </front>
           </reference>
           -->
          
          <reference anchor="ISO8601-duration">
              <front>
                  <title>ISO 8601</title>
                  <author>
                      <organization>ISO</organization>
                  </author>
              </front>
              <format type="HTML" target="http://en.wikipedia.org/wiki/ISO_8601#Durations" />
          </reference>
          
          <reference anchor="DCMI-PERIOD">
              <front>
                  <title>DCMI Period Encoding Scheme</title>
                  <author fullname="Simon Cox">
                      <organization/>
                  </author>
                  <author fullname="Andy Powell">
                      <organization/>
                  </author>
                  <author fullname="Andrew Wilson">
                      <organization/>
                  </author>
              </front>
              <format type="HTML" target="http://dublincore.org/documents/dcmi-period/" />
          </reference>
          
          <reference anchor="ANSI-SMPTE-12M-1986">
              <front>
                  <title>SMPTE time code</title>
                  <author>
                      <organization>SMPTE</organization>
                  </author>
              </front>
              <format type="HTML" target="http://en.wikipedia.org/wiki/SMPTE_time_code" />
          </reference>
          
          <reference anchor="ISO3166">
              <front>
                  <title>ISO 3166</title>
                  <author>
                      <organization>ISO</organization>
                  </author>
              </front>
              <format type="HTML" target="http://en.wikipedia.org/wiki/ISO_3166" />
          </reference>
          
          <!--
          <reference anchor="ISO4217">
              <front>
                  <title>ISO 4217</title>
                  <author>
                      <organization>ISO</organization>
                  </author>
              </front>
              <format type="HTML" target="http://en.wikipedia.org/wiki/ISO_4217" />
          </reference>
           -->
          
          <reference anchor="GEO-JSON">
              <front>
                  <title>The GeoJSON Format Specification</title>
                  <author fullname="Howard Butler">
                      <organization/>
                  </author>
                  <author fullname="Martin Daly">
                      <organization/>
                  </author>
                  <author fullname="Allan Doyle">
                      <organization/>
                  </author>
                  <author fullname="Sean Gillies">
                      <organization/>
                  </author>
                  <author fullname="Tim Schaub">
                      <organization/>
                  </author>
                  <author fullname="Christopher Schmidt">
                      <organization/>
                  </author>
              </front>
              <format type="HTML" target="http://geojson.org/geojson-spec.html" />
          </reference>
          
          <reference anchor="MEDIA-FRAGMENTS-URI">
              <front>
                  <title>Media Fragments URI 1.0</title>
                  <author>
                      <organization>W3C</organization>
                  </author>
              </front>
              <format type="HTML" target="http://www.w3.org/2008/WebVideo/Fragments/WD-media-fragments-spec/" />
          </reference>
          <reference anchor="DVB-URI">
              <front>
                  <title>Uniform Resource Identifier (URI) Scheme for Digital Video Broadcasting (DVB) Programme Resources</title>
                  <author fullname='M. McRoberts, Ed.'>
                      <organization>British Broadcasting Corportation</organization>
                  </author>
                  <author fullname='A. Adolf'>
                      <organization>Condition-ALPHA</organization>
                  </author>
                  <date month='March' day ='23' year='2013' />
              </front>
              <format type="HTML" target="http://tools.ietf.org/html/draft-mcroberts-uri-dvb"/>
          </reference>
              
      </references>
      
    <!-- add proper and more examples based, episodes, series, brands, collections, movies, subtitles/accessibility etc. -->
    <section title="Examples">
      <t>
        Here is a sample request and response that illustrates much of Portable Listings. For simplicity, authorization information is not shown in the request.
      </t>
      <t>Sample request (via HTTP GET):</t>
      <t>
        <figure>
          <artwork>
GET /api/listings?startIndex=1&amp;count=10&amp;sortBy=displayName HTTP/1.1
Host: sample.site.org
          </artwork>
        </figure>
      </t>
      <t>Sample response (JSON):</t>
      <t>
        <figure>
          <artwork>
HTTP/1.1 200 OK
Content-Length: ...
Content-Language: en
Content-Type: application/listings+json;
             profile="http://portablelistings.net/profiles/core/1.0/"

{
  "startIndex": 1,
  "itemsPerPage": 10,
  "totalResults": 8,
  "lang": "en",
  "entry": [
    {
      "id": "5E5EEBED3173",
      "objectType": "episode",
      "displayName": "Episode 1",
      "title": "Pilot",
      "alternativeTitle": [
            {
            "type": "original",
            "value": "Northwest Passage"
            }
        ],
      "summary": "The small northwest town of Twin Peaks,
                  Washington is shaken when the body of Laura Palmer,
                  is discovered...",
      "alternativeDate": {
        "type": "originalAirDate",
        "value": "1990-04-08T00:00:00Z"
      },
      "tags": [
        "FBI", "murder", "twinpeaks"
      ],
      "genre": [
        {
          "value": "3.4.6.4",
          "label": "Crime"
        },
        {
          "value": "3.4",
          "label": "Drama"
        },
        {
          "value": "3.4.6.10",
          "label": "Thriller"
        }
      ],
      "language": "en",
      "alternativeLanguage": [
        {
          "type": "additionalOriginalLanguage",
          "value": "no",
          "label": "Norwegian"
        }
      ],
      "contributor": [
        {
          "href": "C675EDD23A2D",
          "role": "director",
          "label": "David Lynch",
          "primary": true
        },
        {
          "href": "C675EDD23A2D",
          "role": "writer",
          "label": "David Lynch"
        },
        {
          "href": "2F050A9AF481",
          "role": "writer",
          "label": "Mark Frost"
        },
        {
          "href": "94423F9D5AC7",
          "role": "actor",
          "label": "Kyle MacLachlan",
          "stageName": "Special Agent Dale Cooper"
        }
      ],
      "position": 1,
      "parent": {
        "href": "55835B5213C7",
        "label": "Series 1"
      },
      "peers": [
        {
          "href": "8881860D6F31",
          "label": "Episode 2",
          "rel": "next"
        }
      ],
      "aliases": [
          {
            "href": "http://en.wikipedia.org/wiki/Pilot_(Twin_Peaks)"
          },
          {
            "href": "http://www.imdb.com/title/tt0278784/"
          }
      ]
    },
    {
      "id": "8881860D6F31",
      "objectType": "episode",
      "displayName": "Episode 2",
      "title": "Traces to Nowhere",
      "summary": "Cooper's investigation into the murder of
                  Laura Palmer continues, as her secret
                  boyfriend James Hurley is interrogated...",
      "contributor": [
        {
          "href": "3C67E1038205",
          "role": "director",
          "label": "Duwayne Dunham",
          "primary": true
        },
        {
          "href": "C675EDD23A2D",
          "role": "writer",
          "label": "David Lynch"
        },
        {
          "href": "2F050A9AF481",
          "role": "writer",
          "label": "Mark Frost"
        }
      ],
      "position": 2,
      "parent": {
        "href": "55835B5213C7",
        "label": "Series 1"
      },
      "peers": [
        {
          "href": "5E5EEBED3173",
          "label": "Episode 1",
          "rel": "prev"
        },
        {
          "href": "33D1096625D0",
          "label": "Episode 3",
          "rel": "next"
        }
      ]
    }
  ]
}
          </artwork>
        </figure>
      </t>
      
    </section>
    <section title="Compatibility with EBUCore and other standards">
    <!--
        DIFFERENCES:
            -> some/most objectTypes not mapped to core profile due to missing documentation
            -> "relation" dropped - using explicit relationships
            -> added "delivery" (TVA) object types
    -->
      <t>
        This version of the Portable Listings specification is currently wire-compatible with the EBUCore standard.
        Additionally the specification is aligned and compatible with other Open Standards such as TV-Anytime, the BBC Programme ontology and HTML5 Video and Multitrack related specifications.
        The Person object type syntax and definitions is currenly wire-compatible with Portable Contacts, and consequently with the overlapping portion of the OpenSocial RESTful Protocol version 2.0 format <xref target="OpenSocial"/>.
        Note though that the API interfaces are not compatible and differ.
      </t>
      <t>
        It is our intention to maintain this compatibility going forward, so long as it is feasible, and so long as the changes required are compatible with the Goals and Approach of this spec.
        Although Portable Listings is an independent spec, with a more limited scope than other broadcast and television industry and Web standards, any proposed changes to the Portable Listings spec SHOULD BE considered in the context of other communities, and we should strive not to break compatibility unless it is truly necessary, e.g. if the goals of different standard communities diverge significantly in the future.
      </t>
    </section>
    
    <!--
        SPEC TODO / ISSUES
        
            -> Represent Organisations with PoCo
            -> in PoCo Contacts are assumed to belong to a user - so also "id" is defined to be unqiue across user-contacts, rather than whole Provider / database - needs clarification, also in light of PoCo / Agent / Contact intergation for creator and contributors.
            -> formalise grammar for API and profile - prob will need to split up spec in multiple ones: framework, API, data model, profile/s etc...
            -> clarify PBCore standard relationship
    -->
      
  </back>

</rfc>

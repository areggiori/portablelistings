


Working Draft                                                A. Reggiori
                                                           Derrick Media
                                                               June 2011


                           Portable Listings

Abstract

   This document specifies Portable Listings, a JSON document format and
   API for accessing audiovisual content metadata over HTTP.


Table of Contents

   1.  Notational Conventions . . . . . . . . . . . . . . . . . . . .  3
   2.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .  3
   3.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  5
     3.1.  Goals  . . . . . . . . . . . . . . . . . . . . . . . . . .  5
     3.2.  Approach . . . . . . . . . . . . . . . . . . . . . . . . .  6
     3.3.  Feedback . . . . . . . . . . . . . . . . . . . . . . . . .  6
   4.  Workflow Overview  . . . . . . . . . . . . . . . . . . . . . .  6
   5.  Discovery  . . . . . . . . . . . . . . . . . . . . . . . . . .  7
   6.  Listings API . . . . . . . . . . . . . . . . . . . . . . . . .  8
     6.1.  Requesting Specific Information  . . . . . . . . . . . . .  9
     6.2.  Query Parameters . . . . . . . . . . . . . . . . . . . . . 11
       6.2.1.  Filtering  . . . . . . . . . . . . . . . . . . . . . . 11
       6.2.2.  Sorting  . . . . . . . . . . . . . . . . . . . . . . . 13
       6.2.3.  Pagination . . . . . . . . . . . . . . . . . . . . . . 14
       6.2.4.  Presentation . . . . . . . . . . . . . . . . . . . . . 14
       6.2.5.  Declining to honor query parameters  . . . . . . . . . 17
     6.3.  Response Format  . . . . . . . . . . . . . . . . . . . . . 18
     6.4.  Error Codes  . . . . . . . . . . . . . . . . . . . . . . . 19
     6.5.  Authentication and Authorization . . . . . . . . . . . . . 20
       6.5.1.  Delegated Authorization  . . . . . . . . . . . . . . . 20
       6.5.2.  Direct Authorization . . . . . . . . . . . . . . . . . 21
       6.5.3.  Available Authorization Methods  . . . . . . . . . . . 21
   7.  Listings Format  . . . . . . . . . . . . . . . . . . . . . . . 22
     7.1.  Basic Structure  . . . . . . . . . . . . . . . . . . . . . 22
       7.1.1.  Fields . . . . . . . . . . . . . . . . . . . . . . . . 22
       7.1.2.  Relationships  . . . . . . . . . . . . . . . . . . . . 26
       7.1.3.  Predefined Complex Fields  . . . . . . . . . . . . . . 28
         7.1.3.1.  Link . . . . . . . . . . . . . . . . . . . . . . . 28
     7.2.  Multilingual Fields  . . . . . . . . . . . . . . . . . . . 30
     7.3.  Interoperability Considerations  . . . . . . . . . . . . . 30
     7.4.  Defining New Profiles  . . . . . . . . . . . . . . . . . . 31
     7.5.  Referencing Profiles . . . . . . . . . . . . . . . . . . . 31
   8.  Core Profile . . . . . . . . . . . . . . . . . . . . . . . . . 31



Reggiori                                                        [Page 1]

                            Portable Listings                  June 2011


     8.1.  Reference Data . . . . . . . . . . . . . . . . . . . . . . 32
     8.2.  Profile Identifier . . . . . . . . . . . . . . . . . . . . 33
     8.3.  Object Types . . . . . . . . . . . . . . . . . . . . . . . 33
       8.3.1.  Entry  . . . . . . . . . . . . . . . . . . . . . . . . 34
       8.3.2.  Content  . . . . . . . . . . . . . . . . . . . . . . . 36
       8.3.3.  Collection . . . . . . . . . . . . . . . . . . . . . . 41
       8.3.4.  Programme  . . . . . . . . . . . . . . . . . . . . . . 41
       8.3.5.  Programme Group  . . . . . . . . . . . . . . . . . . . 41
       8.3.6.  Brand  . . . . . . . . . . . . . . . . . . . . . . . . 42
       8.3.7.  Series . . . . . . . . . . . . . . . . . . . . . . . . 42
       8.3.8.  Programme Item . . . . . . . . . . . . . . . . . . . . 42
       8.3.9.  Episode  . . . . . . . . . . . . . . . . . . . . . . . 42
       8.3.10. Clip . . . . . . . . . . . . . . . . . . . . . . . . . 42
       8.3.11. Version  . . . . . . . . . . . . . . . . . . . . . . . 42
       8.3.12. Media Resource . . . . . . . . . . . . . . . . . . . . 43
       8.3.13. Media Group  . . . . . . . . . . . . . . . . . . . . . 45
       8.3.14. Segment  . . . . . . . . . . . . . . . . . . . . . . . 45
       8.3.15. Segment Group  . . . . . . . . . . . . . . . . . . . . 46
       8.3.16. Service  . . . . . . . . . . . . . . . . . . . . . . . 46
       8.3.17. Outlet . . . . . . . . . . . . . . . . . . . . . . . . 47
       8.3.18. Channel  . . . . . . . . . . . . . . . . . . . . . . . 47
       8.3.19. Programme Location . . . . . . . . . . . . . . . . . . 47
       8.3.20. Broadcast  . . . . . . . . . . . . . . . . . . . . . . 47
       8.3.21. Title  . . . . . . . . . . . . . . . . . . . . . . . . 48
       8.3.22. Schedule . . . . . . . . . . . . . . . . . . . . . . . 49
       8.3.23. Catalog  . . . . . . . . . . . . . . . . . . . . . . . 49
       8.3.24. Rights . . . . . . . . . . . . . . . . . . . . . . . . 49
       8.3.25. Award  . . . . . . . . . . . . . . . . . . . . . . . . 50
       8.3.26. Contact  . . . . . . . . . . . . . . . . . . . . . . . 50
       8.3.27. Organisation . . . . . . . . . . . . . . . . . . . . . 50
       8.3.28. Group  . . . . . . . . . . . . . . . . . . . . . . . . 50
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 51
   10. Security Considerations  . . . . . . . . . . . . . . . . . . . 51
   11. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 51
   12. Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
   13. Compatibility with EBUCore and other standards . . . . . . . . 55
   14. References . . . . . . . . . . . . . . . . . . . . . . . . . . 55
     14.1. Normative References . . . . . . . . . . . . . . . . . . . 55
     14.2. Informative References . . . . . . . . . . . . . . . . . . 56
   Appendix A.  Changes . . . . . . . . . . . . . . . . . . . . . . . 58
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 58










Reggiori                                                        [Page 2]

                            Portable Listings                  June 2011


1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


2.  Definitions

   Audiovisual Content:  Or more simply Content throughout the scope of
      this document, it refers to the actual intellectual or artistic
      piece of material such as a Television Programme, Feature Film,
      Music Video, Advert etc.
   Content Metadata:  It is structured information that describes,
      explains, locates, or makes it easier to retrieve, use, or manage
      a piece of audiovisual content.  Examples of metadata records
      include detailed information about a television show episode
      (title, synopsis, series, brand, creator, contributor, release
      date, etc.), a film (title, synopsis, genre, year, duration,
      etc.), an advert on television (title, advert brand, advert
      product, advert code, product code etc.), a broadcast event on a
      television schedule (broadcast channel name, start/end time,
      country, language, etc.) and so on.  More specifically a piece of
      Content Metadata is being represented with the "Content" object
      type throughout the scope of this document (see Section 8.3.2).
   Entry Metadata:  Or meta-metadata, it is system information which is
      used to support the storage and retrieval of actual Content
      Metadata itself.  For example, the "Entry" object type fields id,
      updated, published and metadataRights are examples of information
      about the metadata record itself.  Throughout this document we
      will clearly distinguish the "Entry" and "Content" object types
      and we will provide additional text to clarify the context of a
      specific piece of metadata, where and if necessary.
   Listings:  Or listings information, it is a term used in this
      document as a more colloquial and less technical synonym for the
      information being stored and search by a Provider.  More
      specifically the term listings might refer to a specific list of
      results (result set) returned by a Service Provider, which
      includes both the Content Metadata and any Entry Metadata.  For
      example, one could talk about television listings information,
      listings of people contributing to a film, a listings of showing
      times of a film, a listings of upcoming DVDs releases, a listings
      of scenes of a film and so on.
   Content Language/Length/Type:  These terms they are generally used to
      refer to the language, length in bytes and the type of the
      metadata Entry, as returned in an HTTP request header.  Where and
      if necessary we will clarify when the term language, type or
      length will refer to the actual piece of Audiovisual Content.



Reggiori                                                        [Page 3]

                            Portable Listings                  June 2011


   Service Provider:  A Web application that provides listings
      information via the Portable Listings protocol.
   Consumer:  A Web site or application that uses the Portable Listings
      protocol to request listings information managed by the Service
      Provider.
   Base URL:  The root endpoint URL specified by the Service Provider
      during Discovery and used to make requests.  Consumers MAY append
      additional path information and query string parameters to this
      URL as part of the request.
   Entry:  An individual item object (or result) part of a result set
      (listings) returned by a Service Provider.  Entries are
      represented in a result set with the "entry" element.  An entry
      has one or more fields and relationships associated to it.
   Singular Field:  An Entry field that can appear at most once per
      Entry, e.g. "displayName" or "id".
   Plural Field:  An Entry field that can appear multiple times per
      Entry, e.g. "categories" or "tags".
   Simple Field  A Singular Field or Plural Field whose value is a
      single string attribute (see Section 7.1).
   Complex Field  A Singular Field or Plural Field whose value is an
      object containing multiple sub-field attributes (see Section 7.1).
   Canonical Value:  Specified string values for string-valued Entry
      fields that represent common values in a canonical form.  For
      example "alternativeTitle" field MAY have a "type" of "Original
      Title", "Main Title", "Working Title" etc.  Service Providers
      SHOULD conform to Canonical Values if appropriate, but MAY deviate
      if they need to represent additional values (see Section 8.1).
   Primary Sub-Value:  The sub-field in a Complex Field that should be
      used when sorting or filtering by that field.  Unless otherwise
      specified, the "value" sub-field is always the Primary Sub-Field.
   Singular Relationship:  An Entry relationship which link to another
      Entry via a well-known named relationship and that can have at
      most one value, e.g. a programme "service".
   Plural Relationship:  An Entry relationship which link to another
      Entry via a well-known named relationship and that can have
      multiple values, e.g. a series "episodes".
   Sub-Entry:  An Entry which is related to another entry via a well-
      known relationship.
   Source Entry  Or Relationship Context, it is the Entry from which a
      named and directed Relationship is created to a Target Entry.
   Target Entry  A Target Entry is the Sub-Entry target of a
      Relationship from a Source Entry.  A Target Entry can play one or
      more Roles with a given Source Entry.
   Sub-Entry Role  The role played by the Target Entry in a Relationship
      with a given Source Entry is defined to be the name or label of
      the relationship itself.





Reggiori                                                        [Page 4]

                            Portable Listings                  June 2011


   Profile:  A profile identifies a particular format (or schema) for
      the various Entries, their respective object types, the definition
      of their fields and allowed values (including canonical values)
      for the Entry being described.  Definitions of valid relationships
      between Entries are also identified in a profile.  A profile is
      expressed using an atomic set of data modelling rules as defined
      in Section 7.1.  The "core" profile is integral part of this
      specification and is being specified in Section 8.


3.  Introduction

   This document specifies Portable Listings, a document format and API
   to easily provide secure access to audiovisual content metadata and
   related information over the Web.

   The specification defines a general framework, access patterns and
   portable format for holding and retrieving a variety of audiovisual
   content metadata using simple entity types, containers, attributes
   and relationships.  For example, using Portable Listing a Consumer
   can request information from a Service Provider about television
   series and episodes information, music videos, film reviews, showing
   times, casts, crews, video technical details, subtitles, trailers
   etc.  Mechanisms are defined to specify alternative languages and
   refer to related metadata and resources.  This document also defines
   the procedure by which particular audiovisual content metadata
   formats, called profiles, for carrying application-specific
   information can be defined and referenced, and the conventions such
   formats must follow.  It is expected that other specifications will
   be produced that define such formats for various applications.

3.1.  Goals

   The goal of Portable Listings is to make it easier for developers to
   give their users a secure way to access audiovisual content metadata
   and related information over the web.  Specifically, we seek to
   create:
   o  A common access pattern and listings schema that any Service
      Provider can implement.
   o  Well-specified authorization and access rules.
   o  Free and open source libraries in many languages for most popular
      platforms.
   o  Community-sourced support, documentation, and collaborative tools.
   o  And absolutely minimal complexity, with the lightest possible
      toolchain requirements for developers.






Reggiori                                                        [Page 5]

                            Portable Listings                  June 2011


3.2.  Approach

   Our design is focused around ease of adoption, which means a few
   things:
   1.  First, our emphasis is on simplicity of design and targeted use
       cases, keeping our scope intentionally narrow at the outset.  For
       example, this document is simply about access, and defers for now
       on the more complex issues around update and sync.
   2.  Second, we're taking a modern approach to audiovisual content
       metadata description by unifying traditional and more Web
       oriented data, in order to properly represent the current
       diversity of television, brodcasting and Web ecosystems.
   3.  Third, we're leveraging and reusing existing broadcast and
       television industry standards and semantics wherever possible,
       including the EBUCore Metadata Set [EBUCORE], TV-Anytime
       [TV-ANYTIME], the BBC Programmes Ontology [BBC-PROGRAMMES] and
       [HTML5] Video and Media Multitrack [HTML5-MM].  This document is
       heavily grounded on previous work done on the Portable Contacts
       [PortableContacts] and related specifications.
   4.  Fourth, we designed the specification to be extensible and
       pluggable where additional information and functionality can be
       easily added by Service Providers as needed.
   5.  And lastly, we're designing something that should be easy for
       current service providers to adopt.  We started with a review of
       all the major existing television, broadcast, Web and Social
       media standards and APIs and targeted common capabilities that
       they all share and provide.  We believe this pragmatic balance is
       the best and quickest way to achieve our intended goal of
       widespread adoption.

3.3.  Feedback

   The Portable Listing specification is currently being developed on
   the http://groups.google.com/group/portablelistings mailing list.
   Feedback can be posted to the Portable Listings list or directly to
   the author.  If you encounter any problems with joining the list,
   please contact the author.  If you refer or discuss any further about
   Portable Listings on Twitter or Facebook the hash tag "#poli" or
   "#portablelistings" MAY be used.


4.  Workflow Overview

   A Consumer wishing to access a Provider's metadata via Portable
   Listings must start with an Initial Identifier for the Service
   Provider containing the Provider's metadata.  In many cases, this may
   be the domain name of the Service Provider's web site, such as
   sample.site.org, but may be a more specific URL.  Consumers then



Reggiori                                                        [Page 6]

                            Portable Listings                  June 2011


   perform Discovery on the Initial Identifier to determine where the
   Portable Contacts endpoint for this Service Provider resides.  If
   successful, the Consumer may then attempt to request information from
   that endpoint.  If the endpoint contains private metadata, the
   Service Provider will return an authorization challenge, and the
   Consumer must then guide the user through an appropriate
   authorization flow to obtain the credentials necessary to access this
   private metadata.  Upon successful authorization, the Consumer may
   request metadata from the Portable Listings endpoint using these
   authorization credentials.  Whether accessing public or private
   metadata, Consumers may request a specific subset of the Provider's
   metadata using standard Query Parameters.  Upon a successful request,
   the metadata is returned in the response, and the Consumer may then
   parse the response metadata and use it as desired.  The following
   sections detail each of these steps.


5.  Discovery

   Discovery serves both to signal that a Service provider is Portable
   Listings enabled and provide the Portable Listings API endpoint(s) to
   which requestes may be sent.  It relies on link endpoint discovery
   per [RFC5988] for feeds and HTML pages, and discoverable URIs per
   LRDD [HOSTMETA], [WEBFINGER], and [XRD].

   The API is identified by the Service Type
   http://portablelistings.net/spec/1.0 and the corresponding URI is the
   Base URL for the API.  The Base URL MUST NOT contain any query
   string, as additional path information and query string variables MAY
   be appended by Consumers as part of forming the request (as described
   in detail below).

   An example XRD document describing the availability and location of a
   Portable Listings endpoint might look like this:

   <XRDS xmlns="xri://$xrds">
     <XRD xmlns:simple="http://xrds-simple.net/core/1.0"
                 xmlns="xri://$XRD*($v*2.0)" version="2.0">
       <Type>xri://$xrds*simple</Type>    <Service>
         <Type>http://portablelistings.net/spec/1.0</Type>
         <URI>http://sample.site.org/path/to/api/</URI>
       </Service>  </XRD>
   </XRDS>








Reggiori                                                        [Page 7]

                            Portable Listings                  June 2011


6.  Listings API

   This first version of the specification excludes updates and focus on
   simple read-only invocation.  All requests to the Service Provider
   are made as HTTP GET operations on a URL deriving from the Base URL
   specified in Section 5.

   A request using the Base URL alone MUST return all content metadata
   Entries.

   For example, by issuing this request:

   GET /api/listings HTTP/1.1
   Host: api.example.org

   The following two Entries would be returned:

   HTTP/1.1 200 OK
   Content-Length: ...
   Content-Language: en
   Content-Type: application/listings+json

   {
     "entry": [
       {
         "id": "5E5EEBED3173",
         "displayName": "Episode 1",
         "title": "Pilot",
         "alternativeTitle": {
           "type": "original_title",
           "value": "Northwest Passage"
         },
         "objectType": "episode",
         "summary": "The small northwest town of
                     Twin Peaks, Washington
                     is shaken when the body of
                     Laura Palmer, is discovered...",
         "contributor": [
           {
             "href": "C675EDD23A2D",
             "role": "director",
             "label": "David Lynch",
             "primary": true
           },
           {
             "href": "C675EDD23A2D",
             "role": "writer",
             "label": "David Lynch"



Reggiori                                                        [Page 8]

                            Portable Listings                  June 2011


           },
           {
             "href": "2F050A9AF481",
             "role": "writer",
             "label": "Mark Frost"
           }
         ]
       },
       {
         "id": "8881860D6F31",
         "displayName": "Episode 2",
         "title": "Traces to Nowhere",
         "objectType": "episode",
         "summary": "Cooper's investigation into the
                     murder of Laura Palmer continues,
                     as her secret boyfriend James Hurley
                     is interrogated...",
         "contributor": [
           {
             "href": "3C67E1038205",
             "role": "director",
             "label": "Duwayne Dunham",
             "primary": true
           }
         ]
       }
     ]
   }

6.1.  Requesting Specific Information

   In addition to simple requests, Service Providers MUST recognize the
   following additional path information when appended to the Base URL:
   o  "/{id}" -- Only return content metadata for the Entry whose "id"
      field value is equal to the provided "{id}", if such an Entry
      exists.  In this case any Entry not matching the requested ID MUST
      be filtered out of the result list by the Service Provider.
   o  "/{id}/{relationship}" -- Return content metadata of any sub-
      entries related to the Entry whose "id" field value is equal to
      the provided "{id}" (if such an Entry exists) via a "named
      relationship" as provided in the "{relationship}" value.  The
      provided "{relationship}" MUST be a valid relationship name for
      the selected Entry type.  Also in this case any Entry not matching
      the requested ID MUST be filtered out of the result list by the
      Service Provider.

   For example, assuming the Service Provider has the information as
   listed in the previous example by issuing this request:



Reggiori                                                        [Page 9]

                            Portable Listings                  June 2011


   GET /api/listings/5E5EEBED3173 HTTP/1.1
   Host: api.example.org

   The following Entry would be returned:

   HTTP/1.1 200 OK
   Content-Length: ...
   Content-Language: en
   Content-Type: application/listings+json

   {
       "entry": {
         "id": "5E5EEBED3173",
         "displayName": "Episode 1",
         "title": "Pilot",
         "alternativeTitle": {
           "type": "original_title",
           "value": "Northwest Passage"
         },
         "objectType": "episode",
         "summary": "The small northwest town of Twin Peaks,
                     Washington is shaken when the body of
                     Laura Palmer, is discovered...",
         "contributor": [
           {
             "href": "C675EDD23A2D",
             "role": "director",
             "label": "David Lynch",
             "primary": true
           },
           {
             "href": "C675EDD23A2D",
             "role": "writer",
             "label": "David Lynch"
           },
           {
             "href": "2F050A9AF481",
             "role": "writer",
             "label": "Mark Frost"
           }
         ]
       }
   }

   While instead by issuing this request:

   GET /api/listings/5E5EEBED3173/contributor HTTP/1.1
   Host: api.example.org



Reggiori                                                       [Page 10]

                            Portable Listings                  June 2011


   The following Entries would be returned:

   HTTP/1.1 200 OK
   Content-Length: ...
   Content-Language: en
   Content-Type: application/listings+json

   {
       "entry": [
         {
           "id": "C675EDD23A2D",
           "displayName": "David Lynch",
           "name": {
             "middleName": "Keith"
           },
           "birthday": "1946-01-20"
         },
         {
           "id": "2F050A9AF481",
           "displayName": "Mark Frost"
         }
       ]
   }

6.2.  Query Parameters

   Portable Listings defines a standard set of operations that can be
   used to filter, sort, and paginate response results.  The operations
   are specified by adding query parameter to the Base URL, either in
   the query string or as HTTP POST data.  Providers MAY support
   additional query parameters not specified here, and Providers SHOULD
   ignore any query parameters they don't recognize.

6.2.1.  Filtering

   Filtering is used to limit the request results to Entries that match
   given criteria.  Results filtering is accomplished by combining the
   following request parameters:
   filterBy:  Specifies the field name to filter by.  If the specified
      field is a Plural Field, the Entry SHALL match if any of the
      instances of the given field match the specified criterion (e.g.
      if an Entry has multiple "alternativeTitle" values, only one has
      to match for the entire Entry to match).  If a Simple Field is
      specified, its value must match the specified "filterValue"
      according to the specified "filterOp".  If a Complex Field is
      specified, its Primary Sub-Field must match.  If the specified
      field is not a direct child of the "entry" element, the full path
      MUST be specified using the '.' character as separator.  For



Reggiori                                                       [Page 11]

                            Portable Listings                  June 2011


      example, to filter by genre the parameter value is "genre" and to
      filter by awards "title", the parameter value is "awards.title".
      The parameter MUST be used only to filter Entry fields and sub-
      fields, or relationships fields and sub-fields (i.e. an attribute
      of a relationship MAY be filtered, for example "contributor.role",
      see Section 7.1.2).  The parameter MUST NOT be used to indirectly
      filter Sub-Entries fields and sub-fields (i.e. an attribute of a
      Sub-Entry connected to the Entry being filtered via a named
      relationship, for example it MUST NOT be possible to filter by the
      middleName field of a contributor from a programme Entry).
      Instead specific sub-entries can be selected and accessed using
      additional path information (see Section 6.1) and Sub-Entries
      fields and sub-fields MAY be filtered accordingly.
   filterOp:  Specifies the comparison method used to evaluate the field
      value with the value of the filter criterion.  Providers SHOULD
      support the following values:
      *  "equals": the two values must be identical strings.
      *  "contains": the entire "filterValue" must be a substring of the
         Entry field value.
      *  "startswith": the entire "filterValue" must be a substring of
         the Entry field value, starting at the beginning of the field
         value.  This criterion is satisfied if the two strings are
         equal.
      *  "present": an Entry matches the criterion if the field
         specified by "filterBy" has a non-empty value, or if it
         contains a non-empty node for complex fields.
      Providers MAY support additional filter operations if they choose.
      Providers MUST decline to filter results if the specified filter
      operation is not recognized (as per Section 6.2.5).
   filterValue:  Specifies the value to filter by, using the comparison
      method defined by "filterOp".
   filterObjectType:  Specifies the value of the Entry "objectType"
      field value (object-type) to filter by, and the two values must be
      identical strings.  In this case any Entry not matching the
      requested "objectType" MUST be filtered out of the result list by
      the Service Provider.  If the provided "{objectType}" is equal to
      the "entry" value, all content metadata Entries MUST be returned.
      This is also equivalent to providing no additional path info or
      query parameters on the Base URL.

   In addition, requests can filter results based on their "update"
   timestamp:
   updatedSince:  Returns only Entries that have been modified on or
      after the given time, specified as an TIMESTAMP (see [RFC3339]).
      The filter is based on the value of the "updated" field, and can
      be used independently of other filters or combined.  It enables a
      basic syndication pattern when accessing the same metadata over
      time.  The first API call returns all metadata, which can be



Reggiori                                                       [Page 12]

                            Portable Listings                  June 2011


      stored locally.  Subsequent API calls can specify "updatedSince"
      with the time of the last API call, so that only Entries that have
      been added or modified since the last API call will be returned.
   updatedUntil:  Returns only Entries that have been modified on or
      before the given time, specified as an TIMESTAMP (see [RFC3339]).
      Like for "updatedSince" the filter is based on the value of the
      "updated" field, and can be used independently of other filters or
      combined.

   For example, given the content metadata of the sample request above
   and the parameters
   "filterBy=title&filterOp=startswith&filterValue=Trac", only the
   second Entry (with id=8881860D6F31) would match and be returned.
   However, with parameters "filterBy=title&filterOp=present", both
   Entries would be returned.  Given the parameters
   "filterBy=title&filterOp=contains&filterValue=lot", only the first
   Entry (with id=5E5EEBED3173) would match, as would it be the only
   Entry to match given the parameters
   "filterBy=alternativeTitle.value&filterOp=present".

   If a request specifies a "filterValue" but no "filterBy" or
   "filterOp", it is up to the Service Provider how to interpret this
   filter request.  Service Providers MAY choose to default to filtering
   by a given field (e.g. "displayName"); they MAY choose to implement a
   custom, Provider-specific query syntax for "filterValue" in this
   case; or they MAY choose to reject requests of this type.

   In general, if Consumers want to request specific behavior from
   Service Providers, they should do so by being explicit in their use
   of query parameters.

6.2.2.  Sorting

   Sorting allows requests to specify the order in which Entries are
   returned.
   sortBy  Specifies the field name whose value SHALL be used to order
      the returned Entries.  The sort order is determine by the
      "sortOrder" parameter.  If "sortBy" is a Singular Field, Entries
      are sorted according to that field's value; if it's a Plural
      Field, Entries are sorted by the Value (or Major Value, if it's a
      Complex Field, see Section 7.1) of the field marked with
      "primary": "true", if any, or else the first value in the list, if
      any, or else they are sorted last if the given Entry has no
      metadata for the given field.







Reggiori                                                       [Page 13]

                            Portable Listings                  June 2011


   sortOrder  The order in which the "sortBy" parameter is applied.
      Allowed values are "ascending" and "descending".  If a value for
      "sortBy" is provided and no "sortOrder" is specifies, the
      "sortOrder" SHALL default to "ascending".  Sort order is expected
      to be case-insensitive Unicode alphabetic sort order, with no
      specific locale implied.

6.2.3.  Pagination

   The pagination parameters can be used together to "page through" a
   large number of results in manageable chunks:
   startIndex:  Specifies the offset of the first result to be returned
      with respect to the list of Entries that would be returned if no
      "startIndex" were provided.  For instance, if in a given request
      10 Entries would normally be provided, if "startIndex" is 7 and no
      "count" is specified, then only the last 3 Entries in that list
      would be returned (Entries are zero-indexed).  If "startIndex" is
      greater than or equal to the total number of results that would be
      returned, no Entries are returned.  Value MUST be a non-negative
      integer and defaults to 0 if no value is specified.
   count:  If non-zero, specifies the maximum number of Entries the
      Consumer would like the Provider to return at a time.  Value MUST
      be a non-negative integer and defaults to 0 if no value is
      specified.  A "count" of 0 means that is up to the Provider to
      determine how many Entries to return by default (some Providers
      may return all Entries by default; others may return a fixed
      default number like 10).  Providers SHOULD honor a very large
      "count" value, and SHOULD support returning all Entries at once
      when presented with a "count" request that is larger than the
      number of Entries the user has, but Providers MAY choose to never
      return more than a Provider-determined maximum number of Entries
      per request, if returning all Entries is too burdensome.  In all
      cases, at most "count" Entries SHALL be returned, starting at
      "startIndex" and counting up from there.  In each of these cases,
      Providers MUST indicate the total number of Entries they chose to
      return in the response using the "itemsPerPage" response element
      (see Section 6.3).
   For instance, on an initial query, specifying "startIndex=0&count=10"
   will return only the first 10 results.  The total number of possible
   results is indicated by the "totalResults" field of results, so the
   client knows how many "pages" of results exist.  A subsequent query
   of "startIndex=10&count=10" will return the next 10 results, and so
   on.

6.2.4.  Presentation

   Presentation controls the format, makeup, and delivery mechanism for
   returning the requested result set:



Reggiori                                                       [Page 14]

                            Portable Listings                  June 2011


   fields:  If non-empty, each Entry returned SHALL contain only the
      fields or relationships explicitly requested.  A Service Provider
      MAY return a subset of the requested fields or relationships if
      they are not supported.  A Provider SHOULD return at least the
      "id" and "displayName" fields for an Entry, and the "href" and
      "entry" fields for relationships included "by-reference" and
      "by-value" respectively (see Section 7.1.2).  This parameter is
      used for efficiency when a Consumer wishes to access only a subset
      of the fields or relationships.  Value is a comma separated list
      of top level field or relationship names, and it defaults to an
      empty list which means it's up to the Provider which fields or
      relationships to return.  If the specified fields are not a direct
      child of the "entry" element, the full path MUST be specified
      using the '.' character as separator (e.g.
      "id,title,alternative_title.type, contributor.role").  Consumers
      MAY request all available fields or relationships to be returned
      by using the special value "@all" (i.e. any field or
      relationship).  Consumers MAY request only all available fields by
      using the special value "@all_fields" (i.e. any field).  Consumers
      MAY request only all available relationships by using the special
      value "@all_relationships" (i.e. any relationship).  Providers
      MUST return the requested relationships information using a LINK
      structure as explained in Section 7.1.2.  Alternatively a Provider
      MAY support the "includeRelationships" parameter (see below).
      Providers MUST decline to present results if the specified fields
      format is not recognized (as per Section 6.2.5).
   includeRelationships:  This is an optional parameter and it MUST be
      used in combination with the "fields" parameter.  If non-empty, it
      MUST specifies a valid boolean value of 'true' or 'false'.  If the
      value is 'true' a Provider SHOULD include relationships
      information using an inline "entry" structure as explained in
      Section 7.1.2 and Section 6.3.  A Provider SHOULD expand only the
      immediate Sub-Entries, one level only.  Providers MAY support the
      expansion of an arbitrary number of levels of Sub-Entries.  A
      Provider SHOULD NOT expand the same Sub-Entry multiple times in
      the scope of the same Entry (e.g. a Programme Entry which is
      connected to a Contact Entry multiple times via the contributor
      relationship as 'director' or 'writer').  For efficiency a
      Provider MAY NOT expand the same Sub-Entry multiple times in the
      scope of the same request.  A Consumer SHOULD BE able to process
      at least one level of inclusion of Sub-Entries, and MAY ignore any
      sub-levels of inclusion if not supported or understood.  A
      Provider SHOULD NOT filter an inline "entry" structure using the
      "fields" parameter as it complicates the processing of the
      request.






Reggiori                                                       [Page 15]

                            Portable Listings                  June 2011


   format:  Specifies the format in which the response content metadata
      is returned.  Service Providers MUST support the values "json" for
      JSON (http://json.org) and MAY support additional formats if
      desired.  The format defaults to "json" if no format is specified.
      Singular Fields are encoded as string key/value pairs in JSON,
      e.g. ""field": "value"".  Plural Fields and Plural Bundles are
      encoded as arrays in JSON, e.g. ""fields": [ "value1", "value2"
      ]".  Nodes with multiple sub-nodes are represented as objects in
      JSON, e.g. ""field": { "subfield1": "value1", "subfield2":
      "value2" }".

   For example, assuming the Service Provider has the information as
   listed in the previous example by issuing this request:

   GET /api/listings/5E5EEBED3173?fields=title,alternativeTitle.value,
                   contributor.role&includeRelationships=true HTTP/1.1
   Host: api.example.org

   The following Entry would be returned:
































Reggiori                                                       [Page 16]

                            Portable Listings                  June 2011


   HTTP/1.1 200 OK
   Content-Length: ...
   Content-Language: en
   Content-Type: application/listings+json

   {
       "entry": {
         "id": "5E5EEBED3173",
         "displayName": "Episode 1",
         "title": "Pilot",
         "alternativeTitle": {
           "value": "Northwest Passage"
         },
         "contributor": [
           {
             "entry": {
               "id": "C675EDD23A2D",
               "displayName": "David Lynch",
               "name": {
                 "middleName": "Keith"
               },
               "birthday": "1946-01-20"
             },
             "role": "director"
           },
           {
             "href": "C675EDD23A2D",
             "role": "writer",
             "label": "David Lynch"
           },
           {
             "entry": {
               "id": "2F050A9AF481",
               "displayName": "Mark Frost"
             }
             "role": "writer"
           }
         ]
       }
   }

6.2.5.  Declining to honor query parameters

   Providers SHOULD honor all filtering, sorting and pagination values
   requests specified via Query Parameters.  However, in some instances
   it may be too burdensome to comply with a particular request, e.g.
   because the Provider does not have an efficient database index set up
   for a given field that is requested for filtering or sorting, and is



Reggiori                                                       [Page 17]

                            Portable Listings                  June 2011


   unable to efficiently fetch all metadata and post-process the results
   to honor the request before returning the response.  In such cases,
   Providers MAY decline to honor the request (or specific pieces of the
   request).  If any part of the request is declined, Providers MUST
   specify which part(s) of the request were declined in the response,
   using ""sorted": false", ""filtered": false", ""updatedSince": false"
   and/or ""updatedUntil": false" as appropriate.  For efficiency,
   Providers SHOULD omit these response fields if that part of the
   request was successfully performed, or if no such Query Parameter was
   specified in the request.

   Note that since all of the filtering, sorting and pagination
   operations are designed to reduce the amount of metadata returned, it
   is possible for Consumers to emulate these operations client-side
   when a Provider declines to perform them server-side.  For instance,
   filtering can be accomplished by iterating through each entry
   returned and deleting those that do not match the filtering criteria.
   Thus Consumers can request these operations to be performed server-
   side, and Providers will honor them if possible, and otherwise
   indicate to Consumers that they need to be performed client-side,
   effectively "splitting the workload" while maintaining consistent
   semantics.

6.3.  Response Format

   The structure of the response object returned from a successful
   request is as follows.

   The root element is an anonymous JSON object.  The root node MUST
   contain the following child nodes, and MAY contain additional nodes
   that the Service Provider wishes to add to expose additional
   information.  Note that "startIndex", "itemsPerPage", and
   "totalResults" are based on [OpenSearch].  See the Appendix for a
   full example.
   o  "lang": the content language of the metadata Entries if not
      specified otherwise (see Section 7.2).
   o  "profile": an array of strings containing the identifiers for the
      profiles used to describe their metadata Entries.  This represent
      the default profiles if not specified otherwise (see also
      Section 7.5).
   o  "startIndex": the index of the first result returned in this
      response, relative to the starting index of all results that would
      be returned if no "startIndex" had been requested.  In general,
      this will be equal to the value requested by the "startIndex", or
      0 if no specific "startIndex" was requested.
   o  "itemsPerPage": the number of results returned per page in this
      response.  In general, this will be equal to the "count" Query
      Parameter, but MAY be less if the Service Provider is unwilling to



Reggiori                                                       [Page 18]

                            Portable Listings                  June 2011


      return as many results per page as requested, or if there are less
      than the requested number of results left to return when starting
      at the current "startIndex".  This field MUST be present if and
      only if a value for "count" is specified in the request.
   o  "totalResults": the total number of Entries that would be returned
      if there were no "startIndex" or "count" specified.  This value
      tells the Consumer how many total results to expect, regardless of
      the current pagination being used, but taking into account the
      current filtering options in the request.
   o  "entry": an array of Entry objects, one for each Entry matching
      the request, as defined in Section 8.  For consistency of parsing,
      if the request could possibly return multiple Entries (as is
      normally the case), this value MUST always be an array of results,
      even if there happens to be 0 or 1 matching results.  If the
      request is specifically for a single Entry (e.g. because the
      request contains Additional Path Information like "/id"), then
      "entry" MUST be an object containing the single Entry returned
      (i.e. ""entry": [ { /* first Entry */ }, ... ]" and ""entry": { /*
      only Entry */ }" respectively).  When Sub-Entries are requested
      "by-value" to be included inline (see Section 7.1.2), then the
      same "entry" construct MUST be used to express any Sub-Entries as
      value of the RELATIONSHIP Complex Field its sub-field "entry"
      (i.e. ""entry": [ { /* Entry fields */ ... ,
      "pluralRelationship_label": [ { "entry": { /* first Sub-Entry */
      }, "rel": "first" }, ... ] } ]" for Plural Relationships, and
      ""entry": [ { /* Entry fields */ ... ,
      "singularRelationship_label": { "entry": { /* only Sub-Entry */ },
      "rel": "next" } } ]" for Singular Relationships respectively).

6.4.  Error Codes

   The Service Provider MUST return a response code with every response.
   Response codes are numeric and conform to existing HTTP response
   codes where possible, as defined below.  In addition to the response
   code, Service Providers SHOULD also provide a human-readable reason
   that explains the reason for the response code.  This message SHOULD
   be intelligible to developers, but MAY be unsuitable for display to
   end-users.  Clients SHOULD provide their own appropriate error
   message to users when encountering an error response.

   Service Providers SHOULD conform to the following response codes to
   indicate the following situations.  Service Providers MAY return
   additional codes to indicate additional information, but are
   discouraged from doing so and should instead augment the reason text
   with existing codes, if possible.






Reggiori                                                       [Page 19]

                            Portable Listings                  June 2011


   200:  OK (response returned successfully)
   400:  Bad Request (request was malformed or illegal and cannot be
      completed)
   401:  Unauthorized (authentication headers / parameters were invalid
      or missing)
   404:  Not Found (the request points to an object that does not exist,
      e.g. to an unknown Entry id; note that Service Providers MUST
      return a 200 with an empty array of Entries if the request has
      filtering parameters that are valid but have no matches)
   500:  Internal Server Error (un unexpected error occurred during
      processing)
   503:  Service Unavailable (service is temporarily unavailable; this
      may be because the Consumer has exceeded their rate-limit of
      requests)

6.5.  Authentication and Authorization

   The content metadata returned by a Portable Listings endpoint MAY
   contain public metadata, or it MAY contain private metadata.  If the
   metadata returned is public, no authentication or authorization is
   required.  Often however, the metadata returned is not public, and
   Service Providers SHOULD ensure that the user or the metadata
   provider (or user) has given prior consent, either explicitly or
   implicitly, for their information to be released by this API.
   Typically this is done by Consumers obtaining either Direct
   Authorization (with raw credentials, for example the user's username
   and password) or Delegated Authorization (with an access token
   obtained out-of-band by the user, and given to the Consumer to
   present as part of the request).  Portable Listings specifies
   standard mechanisms for both types of authorization, so that
   Consumers may be able to obtain private metadata on a metadata
   provider's or user's behalf from Service Providers in an automated
   and consistent fashion.  Regardless of the Authorization method used,
   the context of the request (i.e. the metadata service or user for
   whom metadata is being requested) MUST be inferred by Service
   Providers from the Base URL and the authorization credentials
   provided.  If public data is being accessed (and no authorization is
   provided), the Base URL MUST contain enough information for Service
   Providers to know which metadata to return, but if private metadata
   is being accessed (and authorization is provided), the same Base URL
   MAY return information for different metadata services or users
   depending on the authorization credentials provided.

6.5.1.  Delegated Authorization

   Service Providers wishing to provide Delegated Authorization MUST
   support [OAuth 2.0] as an OAuth Service Provider, and MAY also
   support additional Delegated Authorization mechanisms, if they



Reggiori                                                       [Page 20]

                            Portable Listings                  June 2011


   choose.  Service Providers supporting OAuth SHOULD provide a
   mechanism for Consumers to automatically obtain an access token, but
   MAY require this to be done out-of-band.

6.5.2.  Direct Authorization

   Service Providers wishing to provide Direct Authorization MUST
   support HTTP Basic Access Authentication [RFC2617], and MAY also
   support additional Direct Authorization mechanisms, if they choose.
   In addition to being a well-established mechanism for Direct
   Authorization, HTTP Basic has the added benefit of being understood
   by most Web Browsers, and can prompt users to enter their credentials
   as part of accessing a resource protected in this manner.  There are
   also convenient ways of providing and parsing HTTP Basic credentials
   in popular tools and libraries.

6.5.3.  Available Authorization Methods

   Service Providers that provide access to private metadata MAY choose
   not to support either Direct Authorization or Delegated
   Authorization, depending on their security requirements, but they
   MUST support either OAuth or HTTP Basic auth if they require any
   Authorization.  When accessing a Portable Listings endpoint, if
   sufficient authorization credentials are not provided, the Service
   Provider SHOULD return a 401 Unauthorized response, and SHOULD
   provide the available Authorization mechanisms available by including
   WWW-Authenticate headers in the response for each type of
   Authorization method supported (as defined in [RFC2616], section
   14.47).  Consumers will then be able to recognize that the API is a
   protected resource and initiate the proper Authorization process
   needed to obtain the appropriate credentials.  An example set of WWW-
   Authenticate headers returned by a Service Provider that supports
   both OAuth and HTTP Basic might look like this.  Note that the realm
   value is intended to be an opaque string that merely defines a shared
   label for resources that share the same authorization requirements.

   WWW-Authenticate: OAuth realm="sample.site.org"
   WWW-Authenticate: Basic realm="sample.site.org"

   If Service Providers wish to make some response metadata publicly
   available and also provide additional info given the proper
   authorization credentials, they SHOULD provide a 200 OK response to
   requests without authorization with a WWW-Authenticate header in the
   response indicating that additional info is available via the
   specified authorization mechanisms.






Reggiori                                                       [Page 21]

                            Portable Listings                  June 2011


7.  Listings Format

   The Portable Listings format defines the constructs necessary to
   express an individual audiovisual content metadata Entry or a list of
   Entries as requested by the Consumer.  The format specification and
   conformance is expressed in terms of "profiles".

   A profile is a specification using the basic structure in Section 7.1
   to define and identify the named object types, fields, values and
   relationships required to be present in an Entry.  A profile MAY also
   define addition requirements and guidelines for a Consumer
   application.  Each profile is identified with a URI.  An Entry is
   defined to be "compliant" with a profile if and only if it adheres to
   all of the requirements set forth in a profile description.  A Entry
   MAY be compliant with multiple profiles (see Section 7.5).  A profile
   it is intended only as an informative guide to Consumer applications
   interpreting the information contained within an Entry and it does
   not impose any behavioral requirements on implementations.  Unless
   specifically forbidden by a particular profile definition, a Entry
   can contain arbitrary fields and relationships.  Consumer MAY choose
   to ignore any unknown information and continue processing.

   The "core profile" is integral part of this document and it is the
   only profile that a Portable Listings implementation is required to
   support (see Section 8).  Support for other profiles is optional.  If
   a Consumer is presented with an Entry expressed using a profile
   unknown to the Consumer, the Consumer MAY choose to ignore that
   profile and continue processing.

7.1.  Basic Structure

   Each Entry is defined as a set of fields and relationships.  Each
   Entry MUST have a unique identifier and an object type.  The order in
   which Entry fields and relationships are defined is not significant.
   By definition an Entry has object type of "entry".  Objects are
   represented in a result set with the "entry" element (see
   Section 6.3) and the object type is specified using lowercased object
   type name as value of the "objectType" field.  Unless specified
   otherwise and as general rule, all fields and relationships applying
   to a specific Entry type SHOULD BE also applicable to any Entry sub-
   type (e.g. fields and relationships for "programme" they also apply
   to "series").

7.1.1.  Fields

   Each field is defined as either a Singular Field, in which case there
   MUST NOT be more than one instance of that field per Entry, or as a
   Plural Field, in which case any number of instances of that field MAY



Reggiori                                                       [Page 22]

                            Portable Listings                  June 2011


   be present per Entry.  By definition, each Entry returned to a
   Consumer MUST include the "id" and "displayName" fields with non-
   empty or no null values, but all other fields are optional.

   Entry fields information is formatted using labeled attributes with
   either structured or unstructured values.  Each attribute value
   consists of one of the following types:
   Simple:  A single value attribute.  Unless otherwise specified, a
      Simple field is by definition a STRING.  A Simple Field value can
      be any of the following datatypes:
      STRING:  A string value as defined in section 2.5 in [RFC4627].  A
         string attribute MAY be used to specify a REQUIRED data type
         format (e.g.  URI, DATE) or allow any string.
      NUMBER  An interger or floating point numeric value as defined in
         section 2.4 in [RFC4627].
      BOOLEAN:  A boolean value as defined in section 2.1 in [RFC4627].
         Values are case-sensitive.
      NULL:  An null value as defined in section 2.1 in [RFC4627].  The
         value is case-sensitive.  A field with value null is considered
         to be the same as if the field value was omitted.  This value
         is a valid value for any field which is not specified as
         REQUIRED.
      HTML:  The special value type HTML is used to describe a STRING
         which contains a string of characters that would be valid if
         used within a DIV container element in an HTML document, as
         defined by [HTML5].  Since strings as defined in section 2.5 in
         [RFC4627] are strings of unicode characters rather than octets,
         care may be required in some implementations to ensure that the
         default character encoding of an HTML parser used to parse the
         content of such a string is correctly configured to match the
         encoding of the string in that implementation's internal string
         representation.
      IRI:  The special value type IRI is used to describe a string
         which contains an IRI as defined in [RFC3987].  Note that the
         definition of "IRI" excludes relative references.  Though the
         IRI might use a dereferencable scheme, Consumers MUST NOT
         assume it can be dereferenced.  Because of the risk of
         confusion between IRIs that would be equivalent if they were
         mapped to URIs and dereferenced, the following normalization
         strategy SHOULD be applied when generating values for fields of
         type IRI:
         +  Provide the scheme in lowercase characters.
         +  Provide the host, if any, in lowercase characters.
         +  Only perform percent-encoding where it is essential.
         +  Use uppercase A through F characters when percent-encoding.
         +  Prevent dot-segments from appearing in paths.





Reggiori                                                       [Page 23]

                            Portable Listings                  June 2011


         +  For schemes that define a default authority, use an empty
            authority if the default is desired.
         +  For schemes that define an empty path to be equivalent to a
            path of "/", use "/".
         +  For schemes that define a port, use an empty port if the
            default is desired.
         +  Preserve empty fragment identifiers and queries.
         +  Ensure that all components of the IRI are appropriately
            character normalized, e.g., by using NFC or NFKC.
      LANGUAGE:  The special value type LANGUAGE is used to describe a
         valid language code value as defined in [RFC5646].
      TIMESTAMP:  The special value type TIMESTAMP is used to describe a
         string which contains a valid timestamp as defined in
         [RFC3339].
      TIME:  The special value type TIME is used to describe a string
         which represents an instant of time that recurs every day as
         defined in section 3.2.8 of [XSD-DATATYPES].
      YEAR:  The special value type YEAR is used to describe a string
         which represents a gregorian calendar year as defined in
         section 3.2.11 of [XSD-DATATYPES].
      DURATION:  The special value type DURATION is used to describe a
         string which represents a duration of time as defined in
         section 3.2.6 of [XSD-DATATYPES] and ISO 8601
         [ISO8601-duration].
      TIMECODE:  The special value type TIMECODE is used to describe a
         string which represents a duration expressed in timecode using
         the ANSI/SMPTE 12M-1986 (Timecode) format
         [ANSI-SMPTE-12M-1986].
      PERIOD:  The special value type PERIOD is used to describe a
         string which represents a time interval as defined in
         [DCMI-PERIOD].
      COUNTRY:  The special value type COUNTRY is used to describe a
         string which represents a country or territory as defined in
         ISO 3166 [ISO3166-country].
      PLACE:  The special value type PLACE is used to describe a string
         which represents a geographical Point as defined in GeoJSON
         [GEO-JSON].
      ENUM:  A simple field MAY contain Canonical Values specified as an
         enumerated list of valids to represent specific Reference Data
         values (see for example the "core profile" Section 8.1).  In
         this case Service Providers SHOULD try to conform to those
         values if appropriate, but MAY provide alternate values to
         represent additional values.
      Providers MAY support additional Simple field string type values
      if they choose.  Consumer MAY choose to ignore any unknown
      information or process those values as STRING.





Reggiori                                                       [Page 24]

                            Portable Listings                  June 2011


   Complex:  A multi-value attribute containing any combination of other
      attributes.  Complex attributes are defined by listing the child
      attributes and their types.  For most Complex Fields, the "value"
      sub-field contains the Major Value of that field (i.e. the primary
      piece of listings information described by that field) and the
      other fields provide additional information about the field
      itself.  A Complex Field is marked with the COMPLEX keyword in the
      rest of this document.


      Unless specified otherwise, and except for the structures defined
      in Section 7.1.3.1 and Section 7.1.2, all Plural Complex Fields
      (i.e. plural fields which instances are not a simple value) have
      the same four standard sub-fields:
      value: (SIMPLE)  The primary value of this field, e.g. an
         alternative title, URL or e-mail address.  When specifying a
         "sortBy" field in the Query Parameters for a Plural Field, the
         default meaning is to sort based on this "value" sub-field.
         Each non-empty Plural Field value MUST contain at least the
         value sub-field, but all other sub-fields are optional.
      type: (ENUM)  The type of field for this instance, usually used to
         identify the preferred function of the given listings
         information.  This string generally is specified to contain a
         valid Canonical Value picked from a pre-defined list.  For
         example in an "alternativeTitle" the "type" sub-field string
         value could be "original" or "working" (see Section 8.1).
      primary: (BOOLEAN)  A Boolean value indicating whether this
         instance of the Plural Field is the primary or preferred value
         of for this field, e.g. the preferred mailing address or
         primary e-mail address.  Service Providers MUST NOT mark more
         than one instance of the same Plural Field as primary="true",
         and MAY choose not to mark any fields as primary, if this
         information is not available.  For efficiency, Service
         Providers SHOULD NOT mark all non-primary fields with
         primary="false", but should instead omit this sub-field for all
         non-primary instances.
      Also unless specified otherwise, when returning Plural Fields,
      Service Providers SHOULD canonicalize the value returned, if
      appropriate (e.g. for URLs and e-mail addresses).  Providers MAY
      return the same value more than once with different types , but
      SHOULD NOT return the same (type, value) combination more than
      once per Plural Field, as this complicates processing by the
      Consumer.

   In the rest of this document, a required field (or sub-field) is
   marked with the REQUIRED keyword.  A Simple Field is marked with the
   SIMPLE keyword or the uppercase identifier of its datatype (e.g.
   STRING, DATE).  A Complex Field is marked with the COMPLEX keyword or



Reggiori                                                       [Page 25]

                            Portable Listings                  June 2011


   the uppercase identifier of its complex datatype (e.g.  LINK,
   SOURCE).  Some fields MAY be defined as accepting multiple datatypes
   using the "or" combinator.  For example, the type "STRING or NUMBER"
   indicates that a Simple Field may accept either a string or a numeric
   value.

   Field structures will be described as follow:
   singularField: (DATATYPE)  A Singular Field with a SIMPLE or COMPLEX
      value with datatype DATATYPE.
   pluralField: [DATATYPE]  A Plural Field with an Array of SIMPLE of
      COMPLEX values with datatype DATATYPE.

7.1.2.  Relationships

   A relationship expresses a directed labeled and typed connection from
   a Source Entry (or relationship Context Entry) to a Target Entry.
   Each relationship MUST have a label and a type.  Each relationship
   between two Entries is defined as either a Singular Relationship, in
   which case there MUST be one and only one Sub-Entry associated, or as
   a Plural Relationship, in which case any number of Sub-Entries MAY be
   associated to the source Entry being described.  When a relationship
   is defined as REQUIRED its minimal cardinality is set to one Sub-
   Entry.  A Provider MAY express multiple relationships between two
   given Entries, either with the same or different labels and types.
   For example, a Programme Entry could be connected to a Contact Entry
   either via the "creator", "publisher" or "contributor" relationship.
   The Core profile (see Section 8) defines a pre-defined set of
   relationship names, based on existing industrial standards and
   vocabularies aiming to provide a standard list of named
   relationships.

   Entry relationships information is formatted using a Singular Complex
   Field for a Singular Relationship, and a Plural Complex Field for a
   Plural Relationship.  The Complex Field name is defined to be the
   relationship "label" (e.g. "creator", "publisher" or "contributor").
   The relationship Complex Field MUST BE a direct child of the "entry"
   element representing the Source Entry (i.e. a sub-field can not be
   used to express a relationship).  A relationship Complex Field MAY
   have additional Simple or Complex sub-fields, but MUST NOT contain
   Complex Fields representing other relationships.

   The structure of the Complex Field varies depending whether the
   relationship information is requested "by-reference" or "by-value" as
   follow:







Reggiori                                                       [Page 26]

                            Portable Listings                  June 2011


   by-reference  The relationship is formatted using a LINK structure as
      defined in Section 7.1.3.1 with the following differences:
      href: (IRI)  REQUIRED.  The value MUST BE a valid URL reference to
         a Service Provider Portable Listings API endpoint including
         path information and other query parameters which can be used
         to request a single Target Entry connected with the Source
         Entry via the named relationship (see Section 6.1).  Note that
         this definition also covers the scenario of relationships
         expressed between Entries across Service Providers.  Although a
         Provider SHOULD NOT reference Entries on another Provider as
         this complicates processing by the Consumer.
      type: (ENUM)  If non-empty or null, the media type is defined to
         be "application/listings+json".  Eventually the "profile" mime-
         type parameter MAY be used on the media type as specified in
         Section 7.5.
      rel: (ENUM or IRI)  The value must be a valid relation type as
         defined by section 4 of [RFC5988].  If this attribute is
         omitted it MUST BE processed as if the value were the string
         "related".
      hreflang: (ENUM)  The content language of the metadata Entry
         referenced if not specified otherwise (see Section 7.2).
      label: (STRING)  If non-empty or null, the label SHOULD match the
         main "displayName" field of the Sub-Entry.
      A Provider MAY define additional fields if necessary.  The link
      structure fields "metadataRightsHref" and "metadataProviderId"
      SHOULD NOT be used to convey information about the provider and
      rights of the Entry metadata, but the Entry specific fields SHOULD
      BE used, see Section 8.3.1.
   by-value  The relationship is formatted using an "inline entry"
      Complex Field structure defined as follows:
      entry:  REQUIRED.  It MUST contain the exact content of the
         "entry" element representing the Target Entry structure
         connected with the Source Entry via the named relationship.
      rel: (ENUM or IRI)  The link relation type.  The value must be a
         valid relation type as defined by section 4 of [RFC5988].  If
         this attribute is omitted it MUST BE processed as if the value
         were the string "related".
      lang: (ENUM)  The content language of the metadata Entry included
         if not specified otherwise (see Section 7.2).
      label: (STRING)  The label SHOULD match the main "displayName"
         field of the Sub-Entry.
      primary: (BOOLEAN)  If the inline entry construct is used in a
         Plural Field, this is a boolean value indicating whether this
         instance of the link is the primary or preferred value of for
         the field, e.g. the preferred link.  Service Providers MUST NOT
         mark more than one instance of the same link as primary="true",
         and MAY choose not to mark any fields as primary, if this
         information is not available.  For efficiency, Service



Reggiori                                                       [Page 27]

                            Portable Listings                  June 2011


         Providers SHOULD NOT mark all non-primary fields with
         primary="false", but should instead omit this sub-field for all
         non-primary instances.
      A Provider MAY define additional fields if necessary.
   Note that the above definitions effectively require a Provider to
   represent each individual member of a relationship using one Complex
   Field (either a link or an entry structure) for each individual
   associated Sub-Entry.  For efficiency, Service Providers SHOULD
   return relationships information "by-reference".  A Consumer MAY
   explicitly request to include relationships information "by-value" as
   explained in Section 6.2.4.  Again for efficiency, Service Providers
   MAY return only a sub-set of all the connected Sub-Entries inside a
   Source Entry.  A Consumer MUST BE able to retrieve the complete list
   of Sub-Entries wrapped into one single "entry" element (single object
   or array) using additional path information (e.g.
   "http://api.example.org/api/listings/5E5EEBED3173/contributor" - see
   Section 6.1).

   In the rest of this document, a required relationship is marked with
   the REQUIRED keyword.  A relationship (either to be included
   "by-reference" or "by-value") is marked with the RELATIONSHIP keyword
   or with the uppercase identifier of the object type of the Target
   Entry (e.g.  CONTACT, ENTRY, PROGRAMME etc).  Some relationships may
   be defined as accepting multiple object types using the "or"
   combinator.  For example, the type "GROUP or ORGANISATION" indicates
   that a relationship may accept as Target Entry a Group or an
   Organisation.

   Relationships structures will be described as follow:
   singularRelationshipLabel: (OBJECTYPE)  A Singular Relationship with
      a lablel of "singular_relationship_label" connecting the Source
      Entry containing the named relationship attriubute with a Target
      Entry of type OBJECTYPE.  The relationship type is expressed using
      the "rel" sub-field.
   pluralRelationshipLabel: [OBJECTYPE]  A Plural Relationship with a
      lablel of "plural_relationship_label" connecting the Source Entry
      containing the named relationship attriubute with a Target Entry
      of type OBJECTYPE.  The relationship type is expressed using the
      "rel" sub-field.

7.1.3.  Predefined Complex Fields

7.1.3.1.  Link

   The components of a Complex Field to represent a standard LINK as
   defined by section 3 of [RFC5988].  This enables Providers to create
   generic standard links between an Entry and other resources,
   including other Entries (see Section 7.1.2), using the registry of



Reggiori                                                       [Page 28]

                            Portable Listings                  June 2011


   links relations defined by the Web Linking specification and HTML5
   Link types [HTML5].  The Context of the LINK is the Entry which has a
   field using the LINK construct as value.

   href: (IRI)  REQUIRED.  The IRI of the link.  This IRI MAY be
      relative or absolute.  If the URI is relative it is resolved
      against the Service Provider root API endpoint URL.  Unless
      otherwise specified, this is the Primary Sub-Field for the field
      having this construct as value, for the purposes of sorting and
      filtering.
   rel: (ENUM or IRI)  The link relation type.  Unless otherwise
      specified, the rel value MUST be a valid Canonical Value as
      defined by section 4 of [RFC5988].  If this property is omitted or
      null it MUST BE processed as if the value was the string
      "alternate".
   type: (ENUM)  The media type of the representation identified by the
      IRI of the link.  The value is a hint about the type of the
      representation that is expected to be returned when the value of
      the href field is dereferenced.  Note that the type field does not
      override the actual media type returned with the representation.
      A link construct MAY have a type sub-field, whose value MUST
      conform to the syntax of a MIME media type defined in [MIMEREG].
      Unless otherwise specified, the type value field MUST be a valid
      Canonical Value as defined by the IANA MIME Media Types registry
      [IANA-MIMEREG].
   hreflang: (LANGUAGE)  The content language of the representation
      identified by the IRI of the link.  When used together with the
      rel sub-field with value "alternate", it implies a translated
      version of the Context of the link.  A link construct MAY have an
      hreflang sub-field, whose value MUST be a valid LANGUAGE Canonical
      Value.
   label: (STRING)  A human readable label about the link.
   length: (NUMBER)  The content length in octets of the representation
      identified by the IRI of the link.  The value is a hint about the
      content length of the representation returned when the IRI in the
      href sub-field is mapped to a URI and dereferenced.  Note that the
      length sub-field does not override the actual content length of
      the representation as reported by the underlying protocol.
   width: (NUMBER)  When the target resource is a visual media item, for
      example if the media type is image/* or video/*, this value is a
      hint about the item's intrinsic or ideal width in pixels.
   height: (NUMBER)  When the target resource is a visual media item,
      for example if the media type is image/* or video/*, this value is
      a hint about the item's intrinsic or ideal height in pixels.







Reggiori                                                       [Page 29]

                            Portable Listings                  June 2011


   duration: (NUMBER)  When the target resource is a time-based media
      item, for example if the media type is video/* or audio/*, this
      value is a hint about the item's approximate duration in seconds.
   primary: (BOOLEAN)  If the link construct is used in a Plural Field,
      this is a boolean value indicating whether this instance of the
      link is the primary or preferred value of for the field, e.g. the
      preferred link.  Service Providers MUST NOT mark more than one
      instance of the same link as primary="true", and MAY choose not to
      mark any fields as primary, if this information is not available.
      For efficiency, Service Providers SHOULD NOT mark all non-primary
      fields with primary="false", but should instead omit this sub-
      field for all non-primary instances.
   Unless otherwise specified, when the link construct is used in a
   Plural Field, Providers MAY return the link construct with the same
   href and rel values combination more than once with different type,
   hreflang, label, length, width, height or duration, but MUST NOT
   return more than once the same type and hreflang combination for a
   given href with rel field of value "alternate".

   In addition, a link construct may contain information about the
   provider and rights of the link metadata using the following optional
   fields:
   metadataRightsHref: (IRI)  The IRI of the copyright license terms
      under which the LINK structure metadata is provided.
   metadataProviderId: (STRING)  The unique idenfieir of the CONTACT
      creating and publishing the LINK structure metadata.  See also
      Section 8.3.26.

7.2.  Multilingual Fields

   The "Content-Language" HTTP header SHOUDL BE used by a Service
   Provider to signal a Consumer that the fields returned are expressed
   in a specific language.  Alternatively the "lang" attribute in the
   response format header MAY be used by a Service Provider to signal a
   Consumer about the default language used to express the field values
   (see Section 6.3).  Any language information in the responde header
   overrides the value of the HTTP header.  If the language is not
   specified, the field language is left undefined.

   A Provider MAY return fields in multiple languages using the MIME
   multipart/alternative Content-Type in combination with the Content-
   Language header (see section 4.2 in [RFC5646]).

7.3.  Interoperability Considerations

   Interoperability between Portable Listings implementations relies on
   the ability to for those implementations to rely on a consistent
   collection of required metadata elements.  The "core profile"



Reggiori                                                       [Page 30]

                            Portable Listings                  June 2011


   described in Section 8 is intended to provide a foundation upon which
   such interoperability MAY be based.  New profiles MAY choose to
   either extend or modify the requirements specified by the core.
   Profiles that seek only to extend the core without changing any of
   those core requirements will have a much greater chance of ensuring
   appropriate levels of interoperability.  Profiles that modify the
   core requirements run the risk of breaking interoperability in
   Portable Listings implementations.  Because of this, for the sake of
   protecting interoperability, it is highly recommended that new
   profiles seek to extend the core rather than modify it.

7.4.  Defining New Profiles

   A profile identifies a particular format (or schema) for the various
   Entries, their respective object types, the definition of their
   fields and allowed values (including canonical values) for the Entry
   being described.  Definitions of valid relationships between Entries
   are also identified in a profile.  A profile is expressed using an
   atomic set of data modelling rules as defined in Section 7.1.  The
   "core" profile is integral part of this specification and is being
   specified in Section 8.

   By leveraging on the basic structures defined in Section 7.1
   alternative profiles MAY be defined and referenced to express
   application-specific information.

7.5.  Referencing Profiles

   The "Content-Type" HTTP header with the "profile" parameter SHOUDL BE
   used by a Service Provider to signal a Consumer that the Entries
   returned are expressed using specific profiles.  Alternatively
   profiles can be referenced once from a result set (see Section 6.3)
   or from individual listed Entries using the Simple Plural Field
   "profile".  A Provider SHOULD return a profile identifier with each
   Consumer request.  The "core profile" is the default profile for all
   Entries returned by a Service Provider unless otherwise specified.
   Consumer SHOULD ignore any Entry object types, fields or relationship
   they do not understand.  Note that the profile Content-type parament
   and field are intended only as a hint.  A Consumer application MAY
   use it to help make decisions about an Entry but the presence of a
   particular profile identifier in the media type does not place any
   obligations on the application.


8.  Core Profile

   The "core profile" aims to provide a minimal metadata set to identify
   and describe a piece of audiovisual content through the whole content



Reggiori                                                       [Page 31]

                            Portable Listings                  June 2011


   value chain.  It is expected that other specifications will be
   produced that to define formats specific to various broadcasting and
   audiovisual applications.

   Where possible the structure and semantics were directly taken
   directly from industry and open standards such as [EBUCORE],
   [EBU-OBJECTMODEL], [TV-ANYTIME] and [BBC-PROGRAMMES], trying also to
   align as much as possible with existing work done with
   [PortableContacts], [MEDIA-RSS], [ATOM-MEDIA], [HTML5] Video and
   Media Multitrack definitions [HTML5-MM] and related specifications.

   The following guidelines were followed to transform the input
   standard scheme into the core profile:
   o  Object types, field names and relationships have been renamed in
      camelCase where not already so.
   o  Object types have been mapped to Entry objectType field.
   o  EBUCore type groups were compacted into field names where
      possible, also resulting in more flattened data structures.
   o  More modern naming and human-readable labels have been used to
      express field names and relationships where necessary
   o  Where possible and making sense, structured hierarchies has been
      simplified and "flattened" making access to objects and fields
      more efficiently and less cumbersome for Consumers.
   o  Even with the spelling updates and structure updates, the field
      and structure mappings remain equivalent, which it means that it
      SHOULD BE easy to convert Portable Listings metadata to and from
      original vocabualries
   o  Last, aiming for simplicity and pragmatism and even if the list of
      structrues and fields is broad, this first version of the core
      profile specification left out some of the concepts defined into
      input vocabularies.

8.1.  Reference Data

   Well-defined Canonical Values MAY BE used for string-valued fields as
   reference data.  For example, a Canonical Value can be used to
   express the "type" sub-field in a Complex Field.  Where possible and
   useful the Reference Data and Canonical Values SHOULD BE selected
   from a standard list of values such as the EBU Metadata Reference
   Data and Classification Schemes [EBU-REFERENCEDATA] or TV-Anytime
   Content Commercial or Alert [TV-ANYTIME] registries.  A Provider MAY
   either use the well-defined and standardised lists of Canonical
   Values or it MAY define application specific values which a Consumer
   can reference.







Reggiori                                                       [Page 32]

                            Portable Listings                  June 2011


8.2.  Profile Identifier

   The core profile is identified with the URI
   "http://portablelistings.net/profiles/core/1.0/" and it is a reserved
   string.

8.3.  Object Types

   The following sections describe the object structure that can be used
   to represent a piece of audiovisual content metadata and any related
   piece of information.  Each object is provided with a general
   description and definitions of its Singular and Plural fields as well
   as any Singular and Plural Relationships.  Any additional requirement
   or restriction on the object, fields, values and relationships is
   also outlined.  The object types defined within this profile are
   referenced in CAPITAL letters in the next sections (e.g.
   PROGRAMME_GROUP).  While the actual object type specified in the
   "objectType" field MUST BE expressed in lowercase and multiple words
   have been separated by '_' (underscore) (e.g.  ProgrammeGroup became
   programme_group).

   The following object types hierarchy has been defined as integral
   part of the core profile:
      Entry (Section 8.3.1)
         Content (Section 8.3.2)
            Collection (Section 8.3.3)
            Programme (Section 8.3.4)
               Programme Group (Section 8.3.5)
                  Brand (Section 8.3.6)
                  Series (Section 8.3.7)
               Programme Item (Section 8.3.8)
                  Episode (Section 8.3.9)
                  Clip (Section 8.3.10)
            Version (Section 8.3.11)
            Media Resource (Section 8.3.12)
               Media Group (Section 8.3.13)
            Segment (Section 8.3.14)
               Segment Group (Section 8.3.15)
            Service (Section 8.3.16)
               Outlet (Section 8.3.17)
            Channel (Section 8.3.18)
            Programme Location (Section 8.3.19)
               Broadcast (Section 8.3.20)
               Title (Section 8.3.21)
            Schedule (Section 8.3.22)
            Catalog (Section 8.3.23)





Reggiori                                                       [Page 33]

                            Portable Listings                  June 2011


            Rights (Section 8.3.24)
            Award (Section 8.3.25)
         Contact (Section 8.3.26)
            Group (Section 8.3.28)
            Organisation (Section 8.3.27)

8.3.1.  Entry

   Entry it is the atomic object type of this specification and it is at
   the top of the object hierarchy and it is container of a set of
   common fields and relationships applicable to other object types
   further defined.  The fields list below is broad so that, for Service
   Providers that do support any of these fields, there is a standard
   field name or relationship available.  It is recognised that not all
   Service Providers will be able to provide information for all
   supported fields.

   The Entry object type has the following fields and relationships:

   id: (STRING)  REQUIRED.  Unique identifier for the Entry record.
      Each Entry returned MUST include a non-empty "id" value.  This
      identifier MUST be unique across the user's entire metadata set
      (see Section 6.5), but MAY not be unique across multiple users'
      metadata sets.  It MUST be a stable ID that does not change when
      the same Entry is returned in subsequent requests.  Usually, an
      internal database ID will be the right choice here, e.g.
      ""12345"".
   displayName: (STRING)  REQUIRED.  The name of this Entry, suitable
      for display to end-users.  Each Entry returned MUST include a non-
      empty "displayName" value.  The value provided SHOULD be the
      primary textual field by which the Entry is normally displayed by
      the Service Provider when presenting it to end-users.  Unless
      otherwise specified, the displayName value is used for the
      purposes of sorting and filtering.
   objectType: (ENUM)  The object type of the Entry record.  A profile
      defines the possible allowed Canonical Values for the "objectType"
      field (see Section 7.4).  Different Entries requested by a
      Consumer can have a different object type.  This specification
      reserves the "entry" value for referring to object types of Entry,
      and by definition an Entry without a "objectType" field or with a
      "objectType" value equal to "null" it is assumed to be of object
      type Entry.  The list of valid Canonical Values for this field
      consists of the list of lowercased object type names defined in
      Section 8.3.







Reggiori                                                       [Page 34]

                            Portable Listings                  June 2011


   published: (TIMESTAMP)  The date the metadata Entry record was first
      added to the user's metadata set or database (i.e. the creation
      date of the Entry).  This field MAY also be associated with the
      first availability of the Entry.  The value MUST be a valid
      TIMESTAMP (e.g. "2008-01-23T04:56:22Z").
   updated: (TIMESTAMP)  The most recent date the details of the Entry
      record were updated (i.e. the modified date of the Entry).  The
      value MUST be a valid TIMESTAMP (e.g. "2008-01-23T04:56:22Z").  If
      the Entry has never been modified since its initial creation, the
      value MUST be the same as the value of "published".  Note the
      "updatedSince" and the "updatedUntil" Query Parameters described
      in Section 6.2 can be used to select only Entries whose "updated"
      value is equal to or more recent than a given TIMESTAMP or equal
      to or older than a given TIMESTAMP respectively.  This enables
      Consumers to repeatedly access a metadata Entry and only request
      newly added or updated Entries since the last access time.
   metadataSource: (LINK)  A standard source from which the Entry
      metadata record was generated from as defined by section 4.2.11 of
      [RFC4287] using the least minimum number of fields.  This enables
      Providers to simply represent aggregation of Entries.  The source
      field is expressed using the LINK construct with the following
      differences:
      href: (IRI)  REQUIRED.  The IRI of the source MUST BE a valid
         Initial Identifier suitable for discovery of the source
         Portable Listings API Provider endpoint from where the metadata
         Entry was derived from as explained in Section 5.  Unless
         otherwise specified, this is the Primary Sub-Field for the
         purposes of sorting and filtering.
      rel: (ENUM)  The rel value MUST BE the "via" relation type as
         defined in section 6.2.2. of [RFC5988].  If this property is
         omitted or null it MUST BE processed as if the value was the
         string "via".
      updated: (TIMESTAMP)  If available, the most recent date the
         details of the source was updated (i.e. the modified date of
         the source).  The value MUST be a valid TIMESTAMP (e.g.
         "2010-01-12T07:56:22Z").
   metadataRights: (LINK)  The copyright license terms under which the
      Entry content metadata is provided.  If the field is set, the
      "rel" sub-field MUST have the "license" value.
   metadataProvider: (CONTACT)  The CONTACT creating and publishing the
      metadata instances as served by a Service Provider.  The creator
      of the resource described by the metadata Entry.  The relationship
      associates an ENTRY to zero or one CONTACT.
   profile: [IRI]  An array of IRI containing the identifiers for the
      profiles used to describe the metadata Entry.  This represent the
      default profile if not specified otherwise (see also Section 7.5)
      If an Entry does not explicitly specify any value for the profile
      field it MUST conform to the "core profile".



Reggiori                                                       [Page 35]

                            Portable Listings                  June 2011


8.3.2.  Content

   The Content object type extends the basic type ENTRY and it
   represents an individual piece of audiovisual content metadata
   returned by a Service Provider.  For example, the "content" object
   type MAY be used to describe an abstract programme idea or concept
   created during the planning process, a generic editorial object such
   as a dope sheet, a script, a report etc.  More in general the type
   MAY be used to describe any other object which is not explicitly
   contemplated in the core profile (e.g. lenses, camera etc.).

   For efficiency and readability, any sub-type of Content MUST use the
   "title", "subtitle", "summary", "synopsis" and other fields and
   relationships inherited from the Entry object type to specify the
   specific object type title, subtitle, summary, synopsis or other
   fields and relationships (e.g.  Series title is represented with a
   "title" field inside a Series object type).

   The Content object type has the following fields and relationships:

   title: (STRING or HTML)  The main name of the piece of content.  The
      title value provided MAY differ from the Entry "displayName".
   subtitle: (STRING or HTML)  The subtitle of the piece of content.
   summary: (STRING or HTML)  A short summary about the piece of
      content.
   synopsis: (STRING or HTML)  A short synopsis about the piece of
      content.
   categories: [COMPLEX]  A category from a taxonomy or controlled
      vocabulary scheme associated to the piece of content.
      type: (ENUM)  A link or code to or within a classification scheme.
         The value SHOULD BE selected from a standard list of values.  A
         Provider SHOULD use any type values as necessary.
      value: (STRING)  A human readable label or name associated to the
         "type" sub-field.  This is the Primary Sub-Field for the
         purposes of sorting and filtering.
   tags: [STRING]  A user-defined category or label for the piece of
      content, e.g. "coolshow" or "web20".  These values SHOULD be case-
      insensitive, and there SHOULD NOT be multiple tags provided for a
      given Entry that differ only in case.  Note that this field is a
      Plural Simple Field, meaning each instance consists only of a
      string value.
   links: [LINK]  A piece of content MAY have associated one ore more
      links to external Web resources.  A Provider SHOULD NOT use the
      links element to express relationships by-reference as this
      complicates processing by the Consumer.






Reggiori                                                       [Page 36]

                            Portable Listings                  June 2011


   creator: [CONTACT]  The creator of the piece of content.
   publisher: [CONTACT]  The publisher of the piece of content.
   contributor: [CONTACT]  Contributors to the piece of content.  The
      following fields are additionally defined for the contributor
      relationship:
      role: (ENUM)  REQUIRED.  A Canonical Value representing the role
         played by the Target Entry as contributor (e.g. author,
         director, actor, producer).  The value SHOULD BE selected from
         a standard list of values such as the European Broadcasting
         Union Role Codes [EBU-ROLE-CODES].  This is the Primary Sub-
         Field for the purposes of sorting and filtering.
      stageName: (STRING or HTML)  A human readable label or name
         attributed to the contact on stage (e.g. 'character name' or
         'interviewer').
   created: (TIMESTAMP or PERIOD)  The creation date for a particular
      version or rendition of the piece of content across its life
      cycle.
   issued: (TIMESTAMP or PERIOD)  The date of formal issuance (e.g.
      publication) of the piece of content.
   modified: (TIMESTAMP or PERIOD)  The date when the piece of content
      was last modified.
   digitised: (TIMESTAMP or PERIOD)  The date when the piece of content
      was digitised.
   alternativeDate: [COMPLEX]  An alternative date of the piece of
      content (e.g. 'release_date', 'production_date', 'date_accepted',
      'date_submitted').
      type: (ENUM)  The type of field for this instance.  The value
         SHOULD BE selected from a standard list of values.
      value: (TIMESTAMP or PERIOD)  The alternative date.  This is the
         Primary Sub-Field for the purposes of sorting and filtering.
   alternativeTitle: [COMPLEX]  An alternative name of the piece of
      content.
      type: (ENUM)  The type of field for this instance (e.g.
         'original', 'art_work_original', 'pledged', 'secondary',
         'working').  The value SHOULD BE selected from a standard list
         of values such as the EBU Metadata Reference Data and
         Classification Schemes Title types.  The "main" and "subtitle"
         values SHOULD NOT be used as this complicates processing by the
         Consumer.
      value: (STRING or HTML)  The alternative name text.  This is the
         Primary Sub-Field for the purposes of sorting and filtering.
   aliases: [IRI or STRING]  Additional or alternative identifiers for
      the piece of content.
   keywords: [STRING]  A list of keywords and phrases assigned by the
      Provider to the piece of content, e.g. "sports" or "live".  These
      values SHOULD be case-insensitive, and there SHOULD NOT be
      multiple keywords provided for a given Entry that differ only in
      case.  Note that this field is a Plural Simple Field, meaning each



Reggiori                                                       [Page 37]

                            Portable Listings                  June 2011


      instance consists only of a string value.
   description: [COMPLEX]  An extended description of the piece of
      content other than the information provided with the "summary" and
      "synopsis" fields.  The extended description MAY also consist of
      outlines, lists, bullet points, edit decision lists, indexes and
      have references to external media and graphical material.
      type: (ENUM)  The type of field for this instance (e.g.
         'abstract', 'transcript', 'excerpt',
         'promotional_information').  The value SHOULD BE selected from
         a standard list of values such as the EBU Metadata Reference
         Data and Classification Schemes Description types.  The
         "summary" and "synopsis" values SHOULD NOT be used as this
         complicates processing by the Consumer.
      value: (STRING or HTML)  The extended description text.  This is
         the Primary Sub-Field for the purposes of sorting and
         filtering.
      media: [LINK]  Additional reference material associated with the
         extended description (e.g. artwork, presentations).
   genre: [COMPLEX]  The genre categorising the piece of content other
      than "category" and "keywords".
      type: (ENUM)  The type of field for this instance.  The value
         SHOULD BE selected from a standard list of values such as the
         EBU Content Genre, Intention or the TV-Anytime Content
         Commercial or Content Alert types.
      value: (STRING)  A human readable label or name associated to the
         "type" sub-field.  This is the Primary Sub-Field for the
         purposes of sorting and filtering.
   targetAudience: [COMPLEX]  The target audience (demographic,
      geographic or guidance) categorising the piece of content other
      than "category" and "keywords" (e.g. parental controls such as PG,
      14A, R or geographic audience like regional, multinational).
      type: (ENUM)  The type of field for this instance.  The value
         SHOULD BE selected from a standard list of values such as the
         EBU Intended Audience or Parent Guidance types.
      value: (STRING)  A human readable label or name associated to the
         "type" sub-field.  This is the Primary Sub-Field for the
         purposes of sorting and filtering.
   format: (COMPLEX)  The editorial format categorising the piece of
      content other than "category" and "keywords".
      type: (ENUM)  The type of field for this instance (e.g. 'fiction',
         'presentation', 'cartoon').  The value SHOULD BE selected from
         a standard list of values such as the EBU Editorial Format
         types.
      value: (STRING)  A human readable label or name associated to the
         "type" sub-field.  This is the Primary Sub-Field for the
         purposes of sorting and filtering.





Reggiori                                                       [Page 38]

                            Portable Listings                  June 2011


   thumbnails: [LINK]  A list of thumbnail images or screen shots
      depicting the piece of content.  If more than one image is
      provided, the "primary" boolean subfield MAY be used to flag the
      preferred or principal image for display.
   source: [COMPLEX]  Reference to the resources from which the piece of
      content is derived in whole or in part.
      type: (ENUM)  The type of field for this instance (e.g.
         'sketches', 'book', 'novel').  The value SHOULD BE selected
         from a standard list of values.
      value: (STRING or HTML)  The source textual description.  This is
         the Primary Sub-Field for the purposes of sorting and
         filtering.
      media: [LINK]  Additional reference material associated with the
         source description.
   language: [COMPLEX]  Identifies languages of the content and their
      use.
      type: (ENUM)  The language purpose (e.g. 'main', 'voice over',
         'dubbed dialogue').  The value SHOULD BE selected from a
         standard list of values such as the EBU Language Purpose codes.
      value: (LANGUAGE)  The language of the track.
      label: (STRING)  A human readable label or name associated to the
         "value" sub-field.  This is the Primary Sub-Field for the
         purposes of sorting and filtering.
   location: [COMPLEX]  Location information associated with the piece
      of content.
      type: (ENUM)  The type of field for this instance (e.g.
         'filming_location', 'depicted_location', 'creation_location').
         The value SHOULD BE selected from a standard list of values.
      value: (PLACE)  The actual geographical place.
      label: (STRING)  A human readable label or name associated to the
         "value" sub-field.  This is the Primary Sub-Field for the
         purposes of sorting and filtering.  If the label field is not
         specified, and supported by the Provider, the Primary Sub-Field
         is defined to be the coordinates sub-field of the PLACE
         structure of the value field.
      fictional: (BOOLEAN)  A Boolean value indicating whether the place
         is purely fictional.
   temporal: [COMPLEX]  Temporal coverage information associated with
      the piece of content.
      type: (ENUM)  The type of field for this instance (e.g.
         'filming_period', 'depicted_period').  The value SHOULD BE
         selected from a standard list of values.
      value: (PERIOD)  The actual temporal coverage period.
      label: (STRING)  A human readable label or name associated to the
         "value" sub-field.  This is the Primary Sub-Field for the
         purposes of sorting and filtering.  If the label field is not
         specified, and supported by the Provider, the Primary Sub-Field
         is defined to be the value field.



Reggiori                                                       [Page 39]

                            Portable Listings                  June 2011


      fictional: (BOOLEAN)  A Boolean value indicating whether the
         temporal period is purely fictional (e.g. 'year 2030').
   rights: [RIGHTS]  Content rights information.  If the rights
      information is absent, no assumptions can be made about the status
      of these and other rights with respect to the piece of content.
   firstTransmissionDate: (TIMESTAMP)  The first transmission or
      publication date and time.  This is the Primary Sub-Field for the
      purposes of sorting and filtering.
   firstTransmissionChannel: (CHANNEL)  The first transmission or
      publication channel.
   repeats: [CHANNEL]  Information about the publication history of the
      piece of content.  A repeated transmission or publication.  The
      following fields are additionally defined for the repeats
      relationship:
      date: (TIMESTAMP)  The repeat transmission or publication date and
         time.
   contentVersion: (STRING or NUMBER)  The version of the content.
   position: (NUMBER)  The position of a particular piece of content
      within a container or collection (e.g.  Collection, Programme,
      Programme Group, Series).
   parent: (ENTRY)  Relates a piece of content to another piece of
      content constituting it.  This relationship SHOULD BE used to
      access the parent Entries in Collections, Programme Groups, Series
      and so on.  The following fields are refined for the parent
      relationship:
      rel: (ENUM)  The rel value MUST BE the "up" relation type as
         defined in section 6.2.2. of [RFC5988].  If this property is
         omitted or null it MUST BE processed as if the value was the
         string "up".
   peers: [ENTRY]  Relates a piece of content to other pieces of content
      which are peers within collection (predecessor/successor).  This
      relationship SHOULD BE used to access the previous and next
      Entries in Collections, Programme Groups, Series, Episodes (e.g.
      previous episode, next episode).  The following fields are refined
      for the parent relationship:
      rel: (ENUM)  REQUIRED.  The rel value MUST BE the "prev" relation
         type as defined in section 6.2.2. of [RFC5988] when referring
         to a previous Entry in a list or collection.  The rel value
         MUST BE the "next" relation type as defined in section 6.2.2.
         of [RFC5988] when referring to a next Entry in a list or
         collection.
   related: [ENTRY]  Relates a piece of content to other pieces of
      content which are related in some way (e.g. 'related clips',
      'recommendations', 'related listings').







Reggiori                                                       [Page 40]

                            Portable Listings                  June 2011


8.3.3.  Collection

   The Collection object type extends the CONTENT object type and
   represents a group or list of related pieces of content, and it has
   the following fields and relationships:

   contents: [CONTENT]  The list of pieces of content that are contained
      within the collection.

8.3.4.  Programme

   The Programme object type extends the CONTENT object type and
   represents an editorially coherent piece of content.  Defined as that
   which is created by a commissioning decision.  For example, a TV/
   radio programme, movie or tune.
   service: (SERVICE)  Associate a Programme to a brand Service (e.g.
      regional service).
   ownership: (SERVICE)  Associate a Programme to the owner Service
      (e.g. the commissioner, national broadcaster service, content
      owner).  In case there is not hierarchy of services defined, the
      service and ownership MAY refer to the same Service.
   clips: [CLIP]  Associate a Programme to a clip (e.g. trailer,
      preview, interview).
   awards: [AWARDS]  A list of awards or awards nominations for a
      programme.
   country: (COUNTRY)  The country where the programme has been
      released.
   releaseDate: (TIMESTAMP or PERIOD)  The release date and time or
      period of the programme.

8.3.5.  Programme Group

   The Programme Group object type extends the PROGRAMME object type and
   represents a collection of Programmes that are grouped together,
   which are not Series or Brand.  A Programme Group can contain
   Programmes or other Programme Groups.  The Programme Group object
   type is identified with the string PROGRAMME_GROUP.  For example, a
   collection of programmes, mini-Series, compilation, serial, concept,
   show, theme etc.
   programmes: [PROGRAMME]  The list of Programmes inside the Programme
      Group.
   series: [SERIES]  The list of Series in a Programme Group (e.g. part
      of a Brand or Series).  This relationship MUST BE used instead of
      the more generic "programmes" relationship to refer to objects of
      type Series.






Reggiori                                                       [Page 41]

                            Portable Listings                  June 2011


   episodes: [EPISODE]  The list of Episodes in a Programme Group (e.g.
      part of a Brand or Series).  This relationship MUST BE used
      instead of the more generic "programmes" relationship to refer to
      objects of type Episodes.

8.3.6.  Brand

   The Brand object type extends the PROGRAMME_GROUP object type and
   represents a collection of assets with a recognisable collective
   identity.  A programme brand groups a collection of series and or
   episodes (e.g.  'American Idol').

8.3.7.  Series

   The Series object type extends the PROGRAMME_GROUP object type and
   represents a succession of programmes with a standard format.  A
   series groups a collection of series and/or episodes (e.g.  'Rai Due
   X Factor 2010').

8.3.8.  Programme Item

   The Programme Item object type extends the PROGRAMME object type and
   represents a programme that can have versions (e.g. an episode, a
   clip).  The Programme Item object type is identified with the string
   PROGRAMME_ITEM.
   versions: [VERSION]  Different versions of a same episode or clip can
      exist.  The relationship primary boolean flag SHOULD be used to
      flag the so called 'canonical' or preferred version.

8.3.9.  Episode

   The Episode object type extends the PROGRAMME_ITEM object type and
   represents an editorial concept which groups one or more versions.
   Often when talking about a television programme what it is really
   meant is an episode.  An episode could be simply be part of a brand a
   so called pilot episode.

8.3.10.  Clip

   The Clip object type extends the PROGRAMME_ITEM object type and
   represents a short clip associated to a brand, a series or an
   episode.  The Clip object type MAY also be used to represent online
   video clips generated by users.

8.3.11.  Version

   The Version object type extends the CONTENT object type and
   represents a specific edit or version of a programme item.  There are



Reggiori                                                       [Page 42]

                            Portable Listings                  June 2011


   different version types and only one is marked as original.
   type: [ENUM]  The type of version (e.g shortened version, version
      designed for the hearing impaired, signed and dubbed audio
      described, alternative viewing angles etc.).  The value SHOULD BE
      selected from a standard list of values.  Please note this is a
      Plural Field, and there might be multiple types associated to a
      version.
   original: (BOOLEAN)  A Boolean value indicating whether or not the
      Version is the original.  Service Providers MUST NOT mark more
      than one Version as original="true", and MAY choose not to mark
      any Version as original, if this information is not available.
      For efficiency, Service Providers SHOULD NOT mark all non-original
      Versions with original="false", but should instead omit this sub-
      field for all non-original instances.
   duration: (NUMBER)  The duration of a version in seconds.  Please
      note that the published duration may be different (see
      Section 8.3.19).
   broadcasts: [BROADCAST]  The broadcast events associated with a
      particular version.
   availabilities: [TITLE]  The availabilities associated with a
      particular version when it is made available on-demand.

8.3.12.  Media Resource

   The Media Resource type extends the CONTENT object type and
   represents a digital or physical manifestation of a version.  For an
   organisation or producer acting as caretaker for a media resource, it
   MAY contain a string formatted piece of information about a specific
   e.g. tape name, shelf location for an asset, including an
   organisation's name, departmental name, shelf id. and contact
   information.  Differently for a data file or web video it MAY contain
   a IRI reference to the media resource and an optional type (e.g. for
   an HTML5 audio or video it would refer to the URL of the source and
   its type).  The Media Resource type is identified with the string
   MEDIA_RESOURCE.
   locator: (IRI or STRING)  REQUIRED.  An identifier of the digital
      media resource or a string description where to find a physical
      source (e.g. dvb://scifi@2009-10-20T03:39:00Z/PT51M or a URI
      reference to a CDN streaming service, or a string like 'Archives
      building A, Row J, Shelf 2').
   type: (ENUM)  The media type of the media resource.  The value is a
      hint about the type of the representation that is expected to be
      returned when the value field is dereferenced.  Note that the type
      field does not override the actual media type returned with the
      representation.  When specified the value MUST conform to the
      syntax of a MIME media type defined in [MIMEREG].  Unless
      otherwise specified, the type value field MUST be a valid
      Canonical Value as defined by the IANA MIME Media Types registry



Reggiori                                                       [Page 43]

                            Portable Listings                  June 2011


      [IANA-MIMEREG] includind any media type paramters, such as the
      "codecs" parameter [RFC4281].  Note that the same Media Resource
      MAY be used to represent different versions when the media type is
      a container file or format.
   medium: (COMPLEX)  The material or physical carrier of the resource.
      If a file, it should be the carrier format.
      type: (ENUM)  The type of media resource (e.g. '1BM', 'BMX',
         'video', 'audio').  The value SHOULD BE selected from a
         standard list of values such as the EBU Storage Media types.
      value: (STRING)  A label associated with the type value.  This is
         the Primary Sub-Field for the purposes of sorting and
         filtering.
   length: (NUMBER)  The media resource size or length in octets.  The
      value is a hint about the content length of the media resource
      representing the media resource and it does not override the
      actual content length of the representation as reported by the
      underlying protocol.
   start: (TIMECODE or TIME or NUMBER)  The beginning point for playback
      of the media resource (e.g. 'seeking position').
   duration: (TIMECODE or DURATION or NUMBER)  The time based duration
      of the media resource.
   audio: (COMPLEX)  Information on the audio format.
      encoding: (ENUM)  The audio encoding parameters.  The value SHOULD
         BE selected from a standard list of values such as the EBU
         Audio Compression Codes.
      configuration: (ENUM)  The audio configuration parameters (e.g.
         'stereo', '2+1', 'surround', 'surround (7+1)').  The value
         SHOULD BE selected from a standard list of values such as the
         EBU Audio Format Codes.
      bitrate: (NUMBER)  The audio bit rate.
      samplingRate: (NUMBER)  The audio sampling rate.
      loudnessLevel: (ENUM)  The media resource loudness level in dB.
   video: (COMPLEX)  Information on the video format.
      width: (NUMBER)  This value is a hint about the video's intrinsic
         or ideal width in pixels.
      height: (NUMBER)  This value is a hint about the video's intrinsic
         or ideal height in pixels.
      frameSize: (STRING)  The video frames size.
      frameRate: (ENUM)  The video frames per second rate.  The value
         SHOULD BE selected from a standard list of values such as the
         EBU Video Frame Rate types.
      aspectRatio: (ENUM)  The video aspect ratio.  The value SHOULD BE
         selected from a standard list of values such as the EBU Visual
         Aspect Ratio types.







Reggiori                                                       [Page 44]

                            Portable Listings                  June 2011


      colourMode: (ENUM)  The video colour mode.  The value SHOULD BE
         selected from a standard list of values such as the EBU Colour
         Codes.
      videoEncoding: (ENUM)  The video encoding parameters.  The value
         SHOULD BE selected from a standard list of values such as the
         EBU Video Compression Codes.
      hd: (BOOLEAN)  A Boolean value indicating whether the video is
         high definition.
      bitrate: (NUMBER)  The audio bit rate.
      samplingRate: (NUMBER)  The audio sampling rate.
   embedCode: (HTML)  An HTML fragment that, when embedded in an HTML
      page, will provide an interactive player UI for the media
      resource.

8.3.13.  Media Group

   The Media Group object type extends the MEDIA_RESOURCE object type
   and represents a group of related media resources containing one or
   more versions.  For example, a Media Group MAY BE used to express
   alternative representations for the same media resource or it MAY BE
   used to represent multiple external tracks (audio, video, text etc)
   associated and syncronized to the main audio and video tracks.  The
   Media Group object type is identified with the string MEDIA_GROUP.

   Note that a MEDIA_GROUP locator field MAY BE empty and instead one or
   more alternative media sources MAY specified.  A Consumer MUST BE
   able to select the main alternative media source by stepping through
   each of the specified sources in the given order.
   sources: [MEDIA_RESOURCE]  A list of alternative representations for
      the same media resource (e.g. alternative source files using
      different encodings/codecs made available to a web browser to play
      the same content).
   tracks: [MEDIA_GROUP]  Used to describe alternative audio, video or
      text tracks syncronized with the main the media resource.
      kind: (ENUM)  The type of track (e.g. 'subtitles', 'captions',
         'descriptions', 'signings', 'dubbing').  The value SHOULD BE
         selected from a standard list of values such as the HTML5 video
         track kind attribute, the EBU Audio Channel Purpose or Language
         Purpose codes.
      lang: (LANGUAGE)  The language of the track.
      label: (STRING)  A human readable label or name associated to the
         type sub-field.  This is the Primary Sub-Field for the purposes
         of sorting and filtering.

8.3.14.  Segment

   The Segment object type extends the CONTENT object type and
   represents a continuous portion of a piece of a programme version,



Reggiori                                                       [Page 45]

                            Portable Listings                  June 2011


   for example a single topic in a news programme or the highlights of a
   soccer match.  A particular segment can belong to a single programme
   only, but it can be a member of multiple segment groups.  A programme
   can contain multiple segments.  Segments are reusable, editorially
   distinct items.
   programme: (VERSION)  A reference to the programme version this
      segment belongs to.  If the segment is part of a segment group,
      this field MAY be left empty and the segment is assumed to belong
      to the programme as referenced by the parent segment group.
   type: (ENUM)  The type of segment (e.g. 'highlights', 'bookmarks',
      'preview', 'insertion points', 'shots', 'speech').  The value
      SHOULD BE selected from a standard list of values.
   start: (TIMECODE or TIME or NUMBER)  The beginning point for playback
      of the programme segment.
   duration: (TIMECODE or DURATION or NUMBER)  The time based duration
      of the programme segment.
   chapter: (BOOLEAN)  A Boolean value indicating whether the programme
      segment is a chapter.
   media: (LINK)  A link to the media resource representing the segment.
      The href sub-field MAY match the corresponding media resource
      locator field or contain a URI Media Fragment with a Normal Play
      Time (NPT) or SMPTE time code as defined in section 4.2.1 of
      [MEDIA-FRAGMENTS-URI].

8.3.15.  Segment Group

   The Segment Group object type extends the SEGMENT object type and
   represents collection of segments that are grouped together.  A
   segment group can contain segments or segment groups.  The Segment
   Group object type is identified with the string SEGMENT_GROUP.
   segments: [SEGMENT]  The list of segments that are contained within
      the segment group.  The order of the references to segments
      determines the temporal playback order of segments in this group.

8.3.16.  Service

   The Service object type extends the CONTENT object type and
   represents a publication outlet (e.g. a broadcasting service).  A
   service is a collection of outlets which contain common material, but
   with some variations (e.g. by region).  Hierarchies of services MAY
   be defined (e.g. radio, tv, online, mobile).  A media outlet is a
   broadcast program that transmits feature stories and news to the
   public through various 'distribution channels'.
   type: (ENUM)  The service type such as 'tv', 'radio', 'online' etc.
      The value SHOULD BE selected from a standard list of values.






Reggiori                                                       [Page 46]

                            Portable Listings                  June 2011


   subType: (ENUM)  The service subtype such as 'national', 'regional',
      'local' etc.  The value SHOULD BE selected from a standard list of
      values.
   outlets: [OUTLET]  Relates a Service to the Outlets that are
      contained within the Service.
   channel: [CHANNEL]  Relates a Service to a Channel.  A single outlet
      or service can be associated with multiple channels (e.g. the same
      news programme can be broadcasted over IPTV or DVB).
   organisation: (ORGANISATION)  Relates a Service to an Organisation
      providing the service.

8.3.17.  Outlet

   The Outlet object type extends the SERVICE object type and represents
   a service which does not have variations.  For example, in the movie
   industry some movie publication or distribution outlets may be: on-
   air, online (payed, subscription, advertised), physical media (dvd,
   blu-ray, VHS), theatre (cinema), mobile.

8.3.18.  Channel

   The Channel object type extends the CONTENT object type and
   represents a physical or virtual channel over which content is
   distributed (e.g.  DVB, DAB, IPTV).
   type: (ENUM)  The service type such as 'dvb', 'dab', 'iptv' etc.  The
      value SHOULD BE selected from a standard list of values.
   logo: (LINK)  A logo or icon associated to the channel.

8.3.19.  Programme Location

   The Programme Location object type extends the CONTENT object type
   and represents an instance or publication event of a Programme.  The
   Programme Location object type is identified with the string
   PROGRAMME_LOCATION.  A programme location is associated with a
   service, and with a particular version of a programme.  For example,
   a programme instance on a broadcast or on-demand service.
   service: (SERVICE)  A reference to the Service on which the programme
      instance will be broadcasted or made available on demand.
   programme: (VERSION)  A reference to the Programme version.
   media: (LINK)  A link to the programme version location.  The href
      sub-field SHOULD refer to a valid media resource locator field
      (see Section 8.3.12).

8.3.20.  Broadcast

   The Broadcast object type extends the PROGRAMME_LOCATION object type
   and represents a publication event of a single Programme version on a
   single service at particular time (e.g. news at 21:00 on specific



Reggiori                                                       [Page 47]

                            Portable Listings                  June 2011


   channel).  Multiple broadcast events can be grouped into a Schedule.
   start: (TIMESTAMP)  The published date and time at which the
      programme version broadcast will be starting.
   end: (TIMESTAMP)  The published date and time at which the programme
      version broadcast will be ending.
   duration: (NUMBER)  The published duration of the Programme version
      in seconds.  When all the time parameters are provided, the
      published duration MUST be equal to the difference between end
      time and start time.
   repeat: (BOOLEAN)  A Boolean value indicating whether the programme
      version being broadcasted is a repeat.
   live: (BOOLEAN)  A Boolean value indicating whether the programme
      version being broadcasted is a live broadcast.
   free: (BOOLEAN)  A Boolean value indicating whether the access to the
      programme version being broadcasted is free.
   firstShowing: (BOOLEAN)  A Boolean value indicating whether the
      programme version being broadcasted is a first showing.
   lastShowing: (BOOLEAN)  A Boolean value indicating whether the
      programme version being broadcasted is a last showing.

8.3.21.  Title

   The Title object type extends the PROGRAMME_LOCATION object type and
   represents an on demand publication event designating a window of
   availability of a single Programme version on a particular service
   between two dates (e.g. catch-up on yesterday night 20:00pm soap
   opera episode).
   startAvailability: (TIMESTAMP)  The published date and time that the
      programme version will be available.  If not specified the
      programme version is assumed to be available.
   endAvailability: (TIMESTAMP)  The published date and time that the
      programme version will no longer be available.  If not specified
      the programme version is meant to be made available indefinitely.
   firstAvailability: (BOOLEAN)  A Boolean value indicating whether the
      programme version is made available for the first time.
   lastAvailability: (BOOLEAN)  A Boolean value indicating whether the
      programme version is made available for the last time.
   duration: (NUMBER)  The published duration of the Programme version
      in seconds.
   expiryDate: (TIMESTAMP)  The published date and time when the
      programme version expires or it is no longer available for
      viewing.
   instantViewing: (BOOLEAN)  A Boolean value indicating whether the
      programme version is for instant viewing.







Reggiori                                                       [Page 48]

                            Portable Listings                  June 2011


   deliveryMode: (ENUM)  The Title delivery mode such as 'streaming',
      'download', 'progressive-download' etc.  This string generally is
      specified to contain a valid Canonical Value from a reference data
      vocabulary.  A Provider SHOULD use any additional deliveryMode
      values as necessary.

8.3.22.  Schedule

   The Schedule object type extends the CONTENT object type and
   represents a group of broadcast events from the same service (e.g.
   ZDF channel schedule).
   service: (SERVICE)  A reference to the Service on which the
      programmes will be broadcasted.
   start: (TIMESTAMP)  Start of the period covered by the schedule.
   end: (TIMESTAMP)  End of the period covered by the schedule.
   broadcasts: [BROADCAST]  The list of broadcasts inside the schedule.

8.3.23.  Catalog

   The Catalog object type extends the CONTENT object type and
   represents an on demand service (e.g.  ZDF Mediathek).
   service: (SERVICE)  A reference to the Service on which the
      programmes will be made available on demand.
   titles: [TITLE]  The list of titles inside the catalog.
   type: (ENUM)  The catalog type such as 'catchup tv', 'VOD', 'SVOD'
      etc.  The value SHOULD BE selected from a standard list of values.

8.3.24.  Rights

   The Rights object type extends the basic object type CONTENT and
   represents information (rights management statement or reference to a
   service providing such information e.g. via a URL) about copyright,
   intellectual property rights or other property rights held in and
   over a piece of content, stating whether access is open or restricted
   in some way.
   type: (ENUM)  The type of rights expressed (e.g. 'merchandising',
      'derivation', 'publication').  The value SHOULD BE selected from a
      standard list of values such as the EBU Rights Type codes.  This
      is the Primary Sub-Field for the purposes of sorting and
      filtering.
   rightsHolder: (CONTACT)  The person or organisation holding or
      managing the rights related to the piece of content.
   exploitationIssues: (STRING)  Use to state any other restrictions,
      such as non-rights ones (e.g. legal).







Reggiori                                                       [Page 49]

                            Portable Listings                  June 2011


   temporal: (PERIOD)  The temporal coverage.
   inclusionCountries: [COUNTRY or STRING]  An inclusion list of
      countries for whom the content is intended or useful.  The special
      value 'all' is reserved to indicate all or any country.
   exclusionCountries: [COUNTRY or STRING]  An exclusion list of
      countries for whom the content is intended or useful.  The special
      value 'all' is reserved to indicate all or any country.
   coverageType: (ENUM)  The coverage type (e.g. broadcast locally,
      regionally, nationally or internationally).  The value SHOULD BE
      selected from a standard list of values such as the EBU Rights
      Type codes.
   link: (LINK)  A copy of the copyright license terms under which the
      content is made available.  If the field is set, the "rel" sub-
      field MUST have the "license" value.

8.3.25.  Award

   The Award object type extends the basic object type CONTENT and
   represents an award or an award nominations for a programme.
   year: (YEAR)  Specify the year when the programme won or has been
      nominated.
   category: (ENUM)  Specify the category in which the programme won the
      awards or the nomination.  The value SHOULD BE selected from a
      standard list of values.
   nominee: [CONTACT]  A reference to the person or organisation who won
      the nomination.
   recipient: [CONTACT]  A reference to the person or organisation who
      won the award.

8.3.26.  Contact

   The Contact object type extends the basic object type ENTRY and
   represents a contact as defined in [PortableContacts].  This
   effectively means that a valid Portable Listings Contact is a valid
   Portable Contacts Contact (see section 7.2 of [PortableContacts]).

8.3.27.  Organisation

   The Organisation object type extends the CONTACT object type and
   represents an organisation or institution, with the following
   additional fields and relationships:
   contacts: [CONTACT]  The list of contacts inside the organisation.

8.3.28.  Group

   The Group object type extends the CONTACT object type and represents
   a group of people or organisations, with the following additional
   fields and relationships:



Reggiori                                                       [Page 50]

                            Portable Listings                  June 2011


   members: [CONTACT]  The members of the group.


9.  IANA Considerations

   A Entry object, when serialised to a byte stream using the JSON
   grammar, can be identified with the following media type:
   MIME Media Type Name  application
   MIME Subtype Name  listings+json
   Required Parameters  none
   Optional parameters:
      "profile":  This parameter contains the profile identifiers used
         in the definition of the Entry metadata.  If this attribute is
         omitted implementations MUST process the media type as if the
         value were the string
         "http://portablelistings.net/profiles/core/1.0/".
   Encoding Considerations  As defined for application/json in
      [RFC4627].
   Security Considerations  As defined for application/json in
      [RFC4627].
   Published Specification  This specification.
   Applications that use this media type  No applications are currently
      known to use this media type.


10.  Security Considerations

   This memo abides by the security considerations of HTTP Basic Auth
   [RFC2617] and the OAuth protocol [OAuth 2.0].


11.  Acknowledgements

   This document would not be possible without the inspiring and seminal
   work of Joseph Smarr and other Open Stack community fellows and their
   Portable Contacts [PortableContacts] specification.  Either the
   document structure, design principles, the pragmatism and simplicity
   used to present the Portable Contacts specification has been key
   inspiration for the author to start designing a similar specification
   for a fairly different domain.  Credits go also to the Atom community
   long standing work, especially their inspiring [ATOM-PROFILES] and
   the JSON Syndication Format [JSON-SYN] proposals.  Other credits go
   to other past and present people which have collaborated with the
   author either in informal chats, brainstorming sessions and email
   discussions.






Reggiori                                                       [Page 51]

                            Portable Listings                  June 2011


12.  Examples

   Here is a sample request and response that illustrates much of
   Portable Listings.  For simplicity, authorization information is not
   shown in the request.

   Sample request (via HTTP GET):


   GET /api/listings?startIndex=1&count=10&sortBy=displayName HTTP/1.1
   Host: sample.site.org

   Sample response (JSON):


HTTP/1.1 200 OK
Content-Length: ...
Content-Language: en
Content-Type: application/listings+json;
             profile="http://portablelistings.net/profiles/core/1.0/"

{
  "startIndex": 1,
  "itemsPerPage": 10,
  "totalResults": 8,
  "lang": "en",
  "entry": [
    {
      "id": "5E5EEBED3173",
      "displayName": "Episode 1",
      "title": "Pilot",
      "alternativeTitle": {
        "type": "original_title",
        "value": "Northwest Passage"
      },
      "objectType": "episode",
      "summary": "The small northwest town of Twin Peaks, Washington is
                  shaken when the body of Laura Palmer, is
                  discovered...",
      "alternativeDate": {
        "type": "original_air_date",
        "value": "1990-04-08T00:00:00Z"
      },
      "tags": [
        "FBI", "murder", "twinpeaks"
      ],
      "genre": [
        {



Reggiori                                                       [Page 52]

                            Portable Listings                  June 2011


          "type": "3.4.6.4",
          "value": "Crime"
        },
        {
          "type": "3.4",
          "value": "Drama"
        },
        {
          "type": "3.4.6.10",
          "value": "Thriller"
        }
      ],
      "language": [
        {
          "type": "main",
          "value": "en",
          "label": "English",
          "primary": true
        },
        {
          "type": "some_dialogue",
          "value": "no",
          "label": "Norwegian"
        }
      ],
      "contributor": [
        {
          "href": "C675EDD23A2D",
          "role": "director",
          "label": "David Lynch",
          "primary": true
        },
        {
          "href": "C675EDD23A2D",
          "role": "writer",
          "label": "David Lynch"
        },
        {
          "href": "2F050A9AF481",
          "role": "writer",
          "label": "Mark Frost"
        },
        {
          "href": "94423F9D5AC7",
          "role": "actor",
          "label": "Kyle MacLachlan",
          "stageName": "Special Agent Dale Cooper"
        }



Reggiori                                                       [Page 53]

                            Portable Listings                  June 2011


      ],
      "position": 1,
      "parent": {
        "href": "55835B5213C7",
        "label": "Series 1"
      },
      "peers": [
        {
          "href": "8881860D6F31",
          "label": "Episode 2",
          "rel": "next"
        }
      ]
    },
    {
      "id": "8881860D6F31",
      "displayName": "Episode 2",
      "title": "Traces to Nowhere",
      "objectType": "episode",
      "summary": "Cooper's investigation into the murder of Laura Palmer
                  continues, as her secret boyfriend James Hurley is
                  interrogated...",
      "contributor": [
        {
          "href": "3C67E1038205",
          "role": "director",
          "label": "Duwayne Dunham",
          "primary": true
        },
        {
          "href": "C675EDD23A2D",
          "role": "writer",
          "label": "David Lynch"
        },
        {
          "href": "2F050A9AF481",
          "role": "writer",
          "label": "Mark Frost"
        }
      ],
      "position": 2,
      "parent": {
        "href": "55835B5213C7",
        "label": "Series 1"
      },
      "peers": [
        {
          "href": "5E5EEBED3173",



Reggiori                                                       [Page 54]

                            Portable Listings                  June 2011


          "label": "Episode 1",
          "rel": "prev"
        },
        {
          "href": "33D1096625D0",
          "label": "Episode 3",
          "rel": "next"
        }
      ]
    }
  ]
}


13.  Compatibility with EBUCore and other standards

   This version of the Portable Listings specification is currently
   wire-compatible with the EBUCore standard.  Additionally the
   specification is aligned and compatible with other Open Standards
   such as TV-Anytime, the BBC Programme ontology and HTML5 Video and
   Multitrack related specifications.  The Contact object types syntax
   and definitions are currenly wire-compatible with Portable Contacts,
   and consequently with the overlapping portion of the OpenSocial
   RESTful Protocol version 2.0 format [OpenSocial].  Note though that
   the API interfaces are not compatible and differ.

   It is our intention to maintain this compatibility going forward, so
   long as it is feasible, and so long as the changes required are
   compatible with the Goals and Approach of this spec.  Although
   Portable Listings is an independent spec, with a more limited scope
   than other broadcast and television industry and Web standards, any
   proposed changes to the Portable Listings spec SHOULD BE considered
   in the context of other communities, and we should strive not to
   break compatibility unless it is truly necessary, e.g. if the goals
   of different standard communities diverge significantly in the
   future.


14.  References

14.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.



Reggiori                                                       [Page 55]

                            Portable Listings                  June 2011


   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              RFC 2617, June 1999.

   [RFC3339]  Klyne, G., Ed. and C. Newman, "Date and Time on the
              Internet: Timestamps", RFC 3339, July 2002.

   [RFC3987]  Duerst, M. and M. Suignard, "Internationalized Resource
              Identifiers (IRIs)", RFC 3987, January 2005.

   [RFC4281]  Gellens, R., Singer, D., and P. Frojdh, "The Codecs
              Parameter for "Bucket" Media Types", RFC 4281,
              November 2005.

   [RFC4287]  Nottingham, M., Ed. and R. Sayre, Ed., "The Atom
              Syndication Format", RFC 4287, December 2005.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

   [RFC5646]  Phillips, A. and M. Davis, "Tags for Identifying
              Languages", BCP 47, RFC 5646, September 2009.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988, October 2010.

14.2.  Informative References

   [ANSI-SMPTE-12M-1986]
              SMPTE, "SMPTE time code".

   [ATOM-MEDIA]
              Atkins, M., "Atom Media Extensions".

   [ATOM-PROFILES]
              "Atom Profiles Proposal".

   [BBC-PROGRAMMES]
              BBC, "Programmes ontology".

   [DCMI-PERIOD]
              "DCMI Period Encoding Scheme".

   [EBU-OBJECTMODEL]
              EBU, "EBU Object Model".

   [EBU-REFERENCEDATA]
              EBU, "European Broadcasting Union - Metadata Reference



Reggiori                                                       [Page 56]

                            Portable Listings                  June 2011


              Data".

   [EBU-ROLE-CODES]
              EBU, "European Broadcasting Union - Role Codes".

   [EBUCORE]  EBU, "EBU - TECH 3293 - EBU Core Metadata Set (EBU Core)
              v.1.2".

   [GEO-JSON]
              "The GeoJSON Format Specification".

   [HOSTMETA]
              Eran Hammer-Lahav, E., "Web Host Metadata".

   [HTML5]    W3C, "HTML5 - A vocabulary and associated APIs for HTML
              and XHTML".

   [HTML5-MM]
              W3C, "Media Multitrack API".

   [IANA-MIMEREG]
              IANA, "MIME Media Types".

   [ISO3166-country]
              ISO, "ISO 3166".

   [ISO8601-duration]
              ISO, "ISO 8601".

   [JSON-SYN]
              "JSON Syndication Format".

   [MEDIA-FRAGMENTS-URI]
              W3C, "Media Fragments URI 1.0".

   [MEDIA-RSS]
              Yahoo! Inc. and RSS Advisory Board, "Media RSS
              Specification".

   [MIMEREG]  Freed, N. and J. Klensin, "Media Type Specifications and
              Registration Procedures", BCP 13, RFC 4288, December 2005.

   [OAuth 2.0]
              "The OAuth 2.0 Authorization Protocol".

   [OpenSearch]
              Clinton, D., "OpenSearch 1.1".




Reggiori                                                       [Page 57]

                            Portable Listings                  June 2011


   [OpenSocial]
              "OpenSocial Social API Server Specification 2.0 DRAFT".

   [PortableContacts]
              Smarr, J., "Portable Contacts 1.0 Draft C".

   [TV-ANYTIME]
              ETSI, "TV Anytime".

   [WEBFINGER]
              "The Webfinger Protocol".

   [XRD]      "Extensible Resource Descriptor (XRD) Version 1.0 -
              Committee Draft 02".

   [XSD-DATATYPES]
              Biron, P. and A. Malhotra, "XML Schema Part 2: Datatypes
              Second Edition", October 2004,
              <http://www.w3.org/TR/xmlschema-2/>.


Appendix A.  Changes

   Changes from -03 version (Draft C)


Author's Address

   Alberto Attilio Reggiori
   Derrick Media

   Email: alberto@derrickmedia.com
   URI:   http://www.derrickmedia.com/


















Reggiori                                                       [Page 58]

